// Package starling provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package starling

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerScopes             = "Bearer.Scopes"
	BearerAndSignatureScopes = "BearerAndSignature.Scopes"
)

// Defines values for AccountHolderAccountHolderType.
const (
	AccountHolderAccountHolderTypeBANKINGASASERVICE AccountHolderAccountHolderType = "BANKING_AS_A_SERVICE"
	AccountHolderAccountHolderTypeBUSINESS          AccountHolderAccountHolderType = "BUSINESS"
	AccountHolderAccountHolderTypeINDIVIDUAL        AccountHolderAccountHolderType = "INDIVIDUAL"
	AccountHolderAccountHolderTypeJOINT             AccountHolderAccountHolderType = "JOINT"
	AccountHolderAccountHolderTypeSOLETRADER        AccountHolderAccountHolderType = "SOLE_TRADER"
)

// Defines values for AccountIdentifierIdentifierType.
const (
	AccountIdentifierIdentifierTypeABAACH   AccountIdentifierIdentifierType = "ABA_ACH"
	AccountIdentifierIdentifierTypeIBANBIC  AccountIdentifierIdentifierType = "IBAN_BIC"
	AccountIdentifierIdentifierTypeSORTCODE AccountIdentifierIdentifierType = "SORT_CODE"
)

// Defines values for AccountV2AccountType.
const (
	AccountV2AccountTypeADDITIONAL       AccountV2AccountType = "ADDITIONAL"
	AccountV2AccountTypeFIXEDTERMDEPOSIT AccountV2AccountType = "FIXED_TERM_DEPOSIT"
	AccountV2AccountTypeLOAN             AccountV2AccountType = "LOAN"
	AccountV2AccountTypePRIMARY          AccountV2AccountType = "PRIMARY"
)

// Defines values for AccountV2Currency.
const (
	AccountV2CurrencyAED       AccountV2Currency = "AED"
	AccountV2CurrencyAFN       AccountV2Currency = "AFN"
	AccountV2CurrencyALL       AccountV2Currency = "ALL"
	AccountV2CurrencyAMD       AccountV2Currency = "AMD"
	AccountV2CurrencyANG       AccountV2Currency = "ANG"
	AccountV2CurrencyAOA       AccountV2Currency = "AOA"
	AccountV2CurrencyARS       AccountV2Currency = "ARS"
	AccountV2CurrencyAUD       AccountV2Currency = "AUD"
	AccountV2CurrencyAWG       AccountV2Currency = "AWG"
	AccountV2CurrencyAZN       AccountV2Currency = "AZN"
	AccountV2CurrencyBAM       AccountV2Currency = "BAM"
	AccountV2CurrencyBBD       AccountV2Currency = "BBD"
	AccountV2CurrencyBDT       AccountV2Currency = "BDT"
	AccountV2CurrencyBGN       AccountV2Currency = "BGN"
	AccountV2CurrencyBHD       AccountV2Currency = "BHD"
	AccountV2CurrencyBIF       AccountV2Currency = "BIF"
	AccountV2CurrencyBMD       AccountV2Currency = "BMD"
	AccountV2CurrencyBND       AccountV2Currency = "BND"
	AccountV2CurrencyBOB       AccountV2Currency = "BOB"
	AccountV2CurrencyBOV       AccountV2Currency = "BOV"
	AccountV2CurrencyBRL       AccountV2Currency = "BRL"
	AccountV2CurrencyBSD       AccountV2Currency = "BSD"
	AccountV2CurrencyBTN       AccountV2Currency = "BTN"
	AccountV2CurrencyBWP       AccountV2Currency = "BWP"
	AccountV2CurrencyBYN       AccountV2Currency = "BYN"
	AccountV2CurrencyBYR       AccountV2Currency = "BYR"
	AccountV2CurrencyBZD       AccountV2Currency = "BZD"
	AccountV2CurrencyCAD       AccountV2Currency = "CAD"
	AccountV2CurrencyCDF       AccountV2Currency = "CDF"
	AccountV2CurrencyCHE       AccountV2Currency = "CHE"
	AccountV2CurrencyCHF       AccountV2Currency = "CHF"
	AccountV2CurrencyCHW       AccountV2Currency = "CHW"
	AccountV2CurrencyCLF       AccountV2Currency = "CLF"
	AccountV2CurrencyCLP       AccountV2Currency = "CLP"
	AccountV2CurrencyCNY       AccountV2Currency = "CNY"
	AccountV2CurrencyCOP       AccountV2Currency = "COP"
	AccountV2CurrencyCOU       AccountV2Currency = "COU"
	AccountV2CurrencyCRC       AccountV2Currency = "CRC"
	AccountV2CurrencyCUC       AccountV2Currency = "CUC"
	AccountV2CurrencyCUP       AccountV2Currency = "CUP"
	AccountV2CurrencyCVE       AccountV2Currency = "CVE"
	AccountV2CurrencyCZK       AccountV2Currency = "CZK"
	AccountV2CurrencyDJF       AccountV2Currency = "DJF"
	AccountV2CurrencyDKK       AccountV2Currency = "DKK"
	AccountV2CurrencyDOP       AccountV2Currency = "DOP"
	AccountV2CurrencyDZD       AccountV2Currency = "DZD"
	AccountV2CurrencyEGP       AccountV2Currency = "EGP"
	AccountV2CurrencyERN       AccountV2Currency = "ERN"
	AccountV2CurrencyETB       AccountV2Currency = "ETB"
	AccountV2CurrencyEUR       AccountV2Currency = "EUR"
	AccountV2CurrencyFJD       AccountV2Currency = "FJD"
	AccountV2CurrencyFKP       AccountV2Currency = "FKP"
	AccountV2CurrencyGBP       AccountV2Currency = "GBP"
	AccountV2CurrencyGEL       AccountV2Currency = "GEL"
	AccountV2CurrencyGHS       AccountV2Currency = "GHS"
	AccountV2CurrencyGIP       AccountV2Currency = "GIP"
	AccountV2CurrencyGMD       AccountV2Currency = "GMD"
	AccountV2CurrencyGNF       AccountV2Currency = "GNF"
	AccountV2CurrencyGTQ       AccountV2Currency = "GTQ"
	AccountV2CurrencyGYD       AccountV2Currency = "GYD"
	AccountV2CurrencyHKD       AccountV2Currency = "HKD"
	AccountV2CurrencyHNL       AccountV2Currency = "HNL"
	AccountV2CurrencyHRK       AccountV2Currency = "HRK"
	AccountV2CurrencyHTG       AccountV2Currency = "HTG"
	AccountV2CurrencyHUF       AccountV2Currency = "HUF"
	AccountV2CurrencyIDR       AccountV2Currency = "IDR"
	AccountV2CurrencyILS       AccountV2Currency = "ILS"
	AccountV2CurrencyINR       AccountV2Currency = "INR"
	AccountV2CurrencyIQD       AccountV2Currency = "IQD"
	AccountV2CurrencyIRR       AccountV2Currency = "IRR"
	AccountV2CurrencyISK       AccountV2Currency = "ISK"
	AccountV2CurrencyJMD       AccountV2Currency = "JMD"
	AccountV2CurrencyJOD       AccountV2Currency = "JOD"
	AccountV2CurrencyJPY       AccountV2Currency = "JPY"
	AccountV2CurrencyKES       AccountV2Currency = "KES"
	AccountV2CurrencyKGS       AccountV2Currency = "KGS"
	AccountV2CurrencyKHR       AccountV2Currency = "KHR"
	AccountV2CurrencyKMF       AccountV2Currency = "KMF"
	AccountV2CurrencyKPW       AccountV2Currency = "KPW"
	AccountV2CurrencyKRW       AccountV2Currency = "KRW"
	AccountV2CurrencyKWD       AccountV2Currency = "KWD"
	AccountV2CurrencyKYD       AccountV2Currency = "KYD"
	AccountV2CurrencyKZT       AccountV2Currency = "KZT"
	AccountV2CurrencyLAK       AccountV2Currency = "LAK"
	AccountV2CurrencyLBP       AccountV2Currency = "LBP"
	AccountV2CurrencyLKR       AccountV2Currency = "LKR"
	AccountV2CurrencyLRD       AccountV2Currency = "LRD"
	AccountV2CurrencyLSL       AccountV2Currency = "LSL"
	AccountV2CurrencyLTL       AccountV2Currency = "LTL"
	AccountV2CurrencyLYD       AccountV2Currency = "LYD"
	AccountV2CurrencyMAD       AccountV2Currency = "MAD"
	AccountV2CurrencyMDL       AccountV2Currency = "MDL"
	AccountV2CurrencyMGA       AccountV2Currency = "MGA"
	AccountV2CurrencyMKD       AccountV2Currency = "MKD"
	AccountV2CurrencyMMK       AccountV2Currency = "MMK"
	AccountV2CurrencyMNT       AccountV2Currency = "MNT"
	AccountV2CurrencyMOP       AccountV2Currency = "MOP"
	AccountV2CurrencyMRO       AccountV2Currency = "MRO"
	AccountV2CurrencyMRU       AccountV2Currency = "MRU"
	AccountV2CurrencyMUR       AccountV2Currency = "MUR"
	AccountV2CurrencyMVR       AccountV2Currency = "MVR"
	AccountV2CurrencyMWK       AccountV2Currency = "MWK"
	AccountV2CurrencyMXN       AccountV2Currency = "MXN"
	AccountV2CurrencyMXV       AccountV2Currency = "MXV"
	AccountV2CurrencyMYR       AccountV2Currency = "MYR"
	AccountV2CurrencyMZN       AccountV2Currency = "MZN"
	AccountV2CurrencyNAD       AccountV2Currency = "NAD"
	AccountV2CurrencyNGN       AccountV2Currency = "NGN"
	AccountV2CurrencyNIO       AccountV2Currency = "NIO"
	AccountV2CurrencyNOK       AccountV2Currency = "NOK"
	AccountV2CurrencyNPR       AccountV2Currency = "NPR"
	AccountV2CurrencyNZD       AccountV2Currency = "NZD"
	AccountV2CurrencyOMR       AccountV2Currency = "OMR"
	AccountV2CurrencyPAB       AccountV2Currency = "PAB"
	AccountV2CurrencyPEN       AccountV2Currency = "PEN"
	AccountV2CurrencyPGK       AccountV2Currency = "PGK"
	AccountV2CurrencyPHP       AccountV2Currency = "PHP"
	AccountV2CurrencyPKR       AccountV2Currency = "PKR"
	AccountV2CurrencyPLN       AccountV2Currency = "PLN"
	AccountV2CurrencyPYG       AccountV2Currency = "PYG"
	AccountV2CurrencyQAR       AccountV2Currency = "QAR"
	AccountV2CurrencyRON       AccountV2Currency = "RON"
	AccountV2CurrencyRSD       AccountV2Currency = "RSD"
	AccountV2CurrencyRUB       AccountV2Currency = "RUB"
	AccountV2CurrencyRUR       AccountV2Currency = "RUR"
	AccountV2CurrencyRWF       AccountV2Currency = "RWF"
	AccountV2CurrencySAR       AccountV2Currency = "SAR"
	AccountV2CurrencySBD       AccountV2Currency = "SBD"
	AccountV2CurrencySCR       AccountV2Currency = "SCR"
	AccountV2CurrencySDG       AccountV2Currency = "SDG"
	AccountV2CurrencySEK       AccountV2Currency = "SEK"
	AccountV2CurrencySGD       AccountV2Currency = "SGD"
	AccountV2CurrencySHP       AccountV2Currency = "SHP"
	AccountV2CurrencySLE       AccountV2Currency = "SLE"
	AccountV2CurrencySLL       AccountV2Currency = "SLL"
	AccountV2CurrencySOS       AccountV2Currency = "SOS"
	AccountV2CurrencySRD       AccountV2Currency = "SRD"
	AccountV2CurrencySSP       AccountV2Currency = "SSP"
	AccountV2CurrencySTD       AccountV2Currency = "STD"
	AccountV2CurrencySTN       AccountV2Currency = "STN"
	AccountV2CurrencySVC       AccountV2Currency = "SVC"
	AccountV2CurrencySYP       AccountV2Currency = "SYP"
	AccountV2CurrencySZL       AccountV2Currency = "SZL"
	AccountV2CurrencyTHB       AccountV2Currency = "THB"
	AccountV2CurrencyTJS       AccountV2Currency = "TJS"
	AccountV2CurrencyTMT       AccountV2Currency = "TMT"
	AccountV2CurrencyTND       AccountV2Currency = "TND"
	AccountV2CurrencyTOP       AccountV2Currency = "TOP"
	AccountV2CurrencyTRY       AccountV2Currency = "TRY"
	AccountV2CurrencyTTD       AccountV2Currency = "TTD"
	AccountV2CurrencyTWD       AccountV2Currency = "TWD"
	AccountV2CurrencyTZS       AccountV2Currency = "TZS"
	AccountV2CurrencyUAH       AccountV2Currency = "UAH"
	AccountV2CurrencyUGX       AccountV2Currency = "UGX"
	AccountV2CurrencyUNDEFINED AccountV2Currency = "UNDEFINED"
	AccountV2CurrencyUSD       AccountV2Currency = "USD"
	AccountV2CurrencyUSN       AccountV2Currency = "USN"
	AccountV2CurrencyUSS       AccountV2Currency = "USS"
	AccountV2CurrencyUYI       AccountV2Currency = "UYI"
	AccountV2CurrencyUYU       AccountV2Currency = "UYU"
	AccountV2CurrencyUZS       AccountV2Currency = "UZS"
	AccountV2CurrencyVEF       AccountV2Currency = "VEF"
	AccountV2CurrencyVES       AccountV2Currency = "VES"
	AccountV2CurrencyVND       AccountV2Currency = "VND"
	AccountV2CurrencyVUV       AccountV2Currency = "VUV"
	AccountV2CurrencyWST       AccountV2Currency = "WST"
	AccountV2CurrencyXAF       AccountV2Currency = "XAF"
	AccountV2CurrencyXAG       AccountV2Currency = "XAG"
	AccountV2CurrencyXAU       AccountV2Currency = "XAU"
	AccountV2CurrencyXBA       AccountV2Currency = "XBA"
	AccountV2CurrencyXBB       AccountV2Currency = "XBB"
	AccountV2CurrencyXBC       AccountV2Currency = "XBC"
	AccountV2CurrencyXBD       AccountV2Currency = "XBD"
	AccountV2CurrencyXCD       AccountV2Currency = "XCD"
	AccountV2CurrencyXDR       AccountV2Currency = "XDR"
	AccountV2CurrencyXOF       AccountV2Currency = "XOF"
	AccountV2CurrencyXPD       AccountV2Currency = "XPD"
	AccountV2CurrencyXPF       AccountV2Currency = "XPF"
	AccountV2CurrencyXPT       AccountV2Currency = "XPT"
	AccountV2CurrencyXSU       AccountV2Currency = "XSU"
	AccountV2CurrencyXTS       AccountV2Currency = "XTS"
	AccountV2CurrencyXUA       AccountV2Currency = "XUA"
	AccountV2CurrencyXXX       AccountV2Currency = "XXX"
	AccountV2CurrencyYER       AccountV2Currency = "YER"
	AccountV2CurrencyZAR       AccountV2Currency = "ZAR"
	AccountV2CurrencyZMW       AccountV2Currency = "ZMW"
	AccountV2CurrencyZWL       AccountV2Currency = "ZWL"
)

// Defines values for BatchPaymentDetailsBatchPaymentType.
const (
	BULKPAYMENT BatchPaymentDetailsBatchPaymentType = "BULK_PAYMENT"
)

// Defines values for CreateStandingOrderRequestSpendingCategory.
const (
	CreateStandingOrderRequestSpendingCategoryADMIN                 CreateStandingOrderRequestSpendingCategory = "ADMIN"
	CreateStandingOrderRequestSpendingCategoryBANKCHARGES           CreateStandingOrderRequestSpendingCategory = "BANK_CHARGES"
	CreateStandingOrderRequestSpendingCategoryBIKE                  CreateStandingOrderRequestSpendingCategory = "BIKE"
	CreateStandingOrderRequestSpendingCategoryBILLSANDSERVICES      CreateStandingOrderRequestSpendingCategory = "BILLS_AND_SERVICES"
	CreateStandingOrderRequestSpendingCategoryBUCKETLIST            CreateStandingOrderRequestSpendingCategory = "BUCKET_LIST"
	CreateStandingOrderRequestSpendingCategoryBUSINESSENTERTAINMENT CreateStandingOrderRequestSpendingCategory = "BUSINESS_ENTERTAINMENT"
	CreateStandingOrderRequestSpendingCategoryCAR                   CreateStandingOrderRequestSpendingCategory = "CAR"
	CreateStandingOrderRequestSpendingCategoryCASH                  CreateStandingOrderRequestSpendingCategory = "CASH"
	CreateStandingOrderRequestSpendingCategoryCELEBRATION           CreateStandingOrderRequestSpendingCategory = "CELEBRATION"
	CreateStandingOrderRequestSpendingCategoryCHARITY               CreateStandingOrderRequestSpendingCategory = "CHARITY"
	CreateStandingOrderRequestSpendingCategoryCHILDREN              CreateStandingOrderRequestSpendingCategory = "CHILDREN"
	CreateStandingOrderRequestSpendingCategoryCLIENTREFUNDS         CreateStandingOrderRequestSpendingCategory = "CLIENT_REFUNDS"
	CreateStandingOrderRequestSpendingCategoryCLOTHES               CreateStandingOrderRequestSpendingCategory = "CLOTHES"
	CreateStandingOrderRequestSpendingCategoryCOFFEE                CreateStandingOrderRequestSpendingCategory = "COFFEE"
	CreateStandingOrderRequestSpendingCategoryCORPORATIONTAX        CreateStandingOrderRequestSpendingCategory = "CORPORATION_TAX"
	CreateStandingOrderRequestSpendingCategoryDEBTREPAYMENT         CreateStandingOrderRequestSpendingCategory = "DEBT_REPAYMENT"
	CreateStandingOrderRequestSpendingCategoryDIRECTORSWAGES        CreateStandingOrderRequestSpendingCategory = "DIRECTORS_WAGES"
	CreateStandingOrderRequestSpendingCategoryDIVIDENDS             CreateStandingOrderRequestSpendingCategory = "DIVIDENDS"
	CreateStandingOrderRequestSpendingCategoryDIY                   CreateStandingOrderRequestSpendingCategory = "DIY"
	CreateStandingOrderRequestSpendingCategoryDRINKS                CreateStandingOrderRequestSpendingCategory = "DRINKS"
	CreateStandingOrderRequestSpendingCategoryEATINGOUT             CreateStandingOrderRequestSpendingCategory = "EATING_OUT"
	CreateStandingOrderRequestSpendingCategoryEDUCATION             CreateStandingOrderRequestSpendingCategory = "EDUCATION"
	CreateStandingOrderRequestSpendingCategoryEMERGENCY             CreateStandingOrderRequestSpendingCategory = "EMERGENCY"
	CreateStandingOrderRequestSpendingCategoryENTERTAINMENT         CreateStandingOrderRequestSpendingCategory = "ENTERTAINMENT"
	CreateStandingOrderRequestSpendingCategoryEQUIPMENT             CreateStandingOrderRequestSpendingCategory = "EQUIPMENT"
	CreateStandingOrderRequestSpendingCategoryESSENTIALSPEND        CreateStandingOrderRequestSpendingCategory = "ESSENTIAL_SPEND"
	CreateStandingOrderRequestSpendingCategoryEXPENSES              CreateStandingOrderRequestSpendingCategory = "EXPENSES"
	CreateStandingOrderRequestSpendingCategoryFAMILY                CreateStandingOrderRequestSpendingCategory = "FAMILY"
	CreateStandingOrderRequestSpendingCategoryFITNESS               CreateStandingOrderRequestSpendingCategory = "FITNESS"
	CreateStandingOrderRequestSpendingCategoryFOODANDDRINK          CreateStandingOrderRequestSpendingCategory = "FOOD_AND_DRINK"
	CreateStandingOrderRequestSpendingCategoryFUEL                  CreateStandingOrderRequestSpendingCategory = "FUEL"
	CreateStandingOrderRequestSpendingCategoryGAMBLING              CreateStandingOrderRequestSpendingCategory = "GAMBLING"
	CreateStandingOrderRequestSpendingCategoryGAMING                CreateStandingOrderRequestSpendingCategory = "GAMING"
	CreateStandingOrderRequestSpendingCategoryGARDEN                CreateStandingOrderRequestSpendingCategory = "GARDEN"
	CreateStandingOrderRequestSpendingCategoryGENERAL               CreateStandingOrderRequestSpendingCategory = "GENERAL"
	CreateStandingOrderRequestSpendingCategoryGIFTS                 CreateStandingOrderRequestSpendingCategory = "GIFTS"
	CreateStandingOrderRequestSpendingCategoryGROCERIES             CreateStandingOrderRequestSpendingCategory = "GROCERIES"
	CreateStandingOrderRequestSpendingCategoryHOBBY                 CreateStandingOrderRequestSpendingCategory = "HOBBY"
	CreateStandingOrderRequestSpendingCategoryHOLIDAYS              CreateStandingOrderRequestSpendingCategory = "HOLIDAYS"
	CreateStandingOrderRequestSpendingCategoryHOME                  CreateStandingOrderRequestSpendingCategory = "HOME"
	CreateStandingOrderRequestSpendingCategoryIMPULSEBUY            CreateStandingOrderRequestSpendingCategory = "IMPULSE_BUY"
	CreateStandingOrderRequestSpendingCategoryINCOME                CreateStandingOrderRequestSpendingCategory = "INCOME"
	CreateStandingOrderRequestSpendingCategoryINSURANCE             CreateStandingOrderRequestSpendingCategory = "INSURANCE"
	CreateStandingOrderRequestSpendingCategoryINTERESTPAYMENTS      CreateStandingOrderRequestSpendingCategory = "INTEREST_PAYMENTS"
	CreateStandingOrderRequestSpendingCategoryINVENTORY             CreateStandingOrderRequestSpendingCategory = "INVENTORY"
	CreateStandingOrderRequestSpendingCategoryINVESTMENTCAPITAL     CreateStandingOrderRequestSpendingCategory = "INVESTMENT_CAPITAL"
	CreateStandingOrderRequestSpendingCategoryINVESTMENTS           CreateStandingOrderRequestSpendingCategory = "INVESTMENTS"
	CreateStandingOrderRequestSpendingCategoryLIFESTYLE             CreateStandingOrderRequestSpendingCategory = "LIFESTYLE"
	CreateStandingOrderRequestSpendingCategoryLOANPRINCIPAL         CreateStandingOrderRequestSpendingCategory = "LOAN_PRINCIPAL"
	CreateStandingOrderRequestSpendingCategoryMAINTENANCEANDREPAIRS CreateStandingOrderRequestSpendingCategory = "MAINTENANCE_AND_REPAIRS"
	CreateStandingOrderRequestSpendingCategoryMARKETING             CreateStandingOrderRequestSpendingCategory = "MARKETING"
	CreateStandingOrderRequestSpendingCategoryMEDICAL               CreateStandingOrderRequestSpendingCategory = "MEDICAL"
	CreateStandingOrderRequestSpendingCategoryMORTGAGE              CreateStandingOrderRequestSpendingCategory = "MORTGAGE"
	CreateStandingOrderRequestSpendingCategoryNONE                  CreateStandingOrderRequestSpendingCategory = "NONE"
	CreateStandingOrderRequestSpendingCategoryNONESSENTIALSPEND     CreateStandingOrderRequestSpendingCategory = "NON_ESSENTIAL_SPEND"
	CreateStandingOrderRequestSpendingCategoryOTHER                 CreateStandingOrderRequestSpendingCategory = "OTHER"
	CreateStandingOrderRequestSpendingCategoryOTHERINCOME           CreateStandingOrderRequestSpendingCategory = "OTHER_INCOME"
	CreateStandingOrderRequestSpendingCategoryPAYMENTS              CreateStandingOrderRequestSpendingCategory = "PAYMENTS"
	CreateStandingOrderRequestSpendingCategoryPERSONAL              CreateStandingOrderRequestSpendingCategory = "PERSONAL"
	CreateStandingOrderRequestSpendingCategoryPERSONALCARE          CreateStandingOrderRequestSpendingCategory = "PERSONAL_CARE"
	CreateStandingOrderRequestSpendingCategoryPERSONALTRANSFERS     CreateStandingOrderRequestSpendingCategory = "PERSONAL_TRANSFERS"
	CreateStandingOrderRequestSpendingCategoryPETS                  CreateStandingOrderRequestSpendingCategory = "PETS"
	CreateStandingOrderRequestSpendingCategoryPHONEANDINTERNET      CreateStandingOrderRequestSpendingCategory = "PHONE_AND_INTERNET"
	CreateStandingOrderRequestSpendingCategoryPROFESSIONALSERVICES  CreateStandingOrderRequestSpendingCategory = "PROFESSIONAL_SERVICES"
	CreateStandingOrderRequestSpendingCategoryPROJECTS              CreateStandingOrderRequestSpendingCategory = "PROJECTS"
	CreateStandingOrderRequestSpendingCategoryRELATIONSHIPS         CreateStandingOrderRequestSpendingCategory = "RELATIONSHIPS"
	CreateStandingOrderRequestSpendingCategoryRENT                  CreateStandingOrderRequestSpendingCategory = "RENT"
	CreateStandingOrderRequestSpendingCategoryREPAIRSANDMAINTENANCE CreateStandingOrderRequestSpendingCategory = "REPAIRS_AND_MAINTENANCE"
	CreateStandingOrderRequestSpendingCategoryREVENUE               CreateStandingOrderRequestSpendingCategory = "REVENUE"
	CreateStandingOrderRequestSpendingCategorySAVING                CreateStandingOrderRequestSpendingCategory = "SAVING"
	CreateStandingOrderRequestSpendingCategorySELFASSESSMENTTAX     CreateStandingOrderRequestSpendingCategory = "SELF_ASSESSMENT_TAX"
	CreateStandingOrderRequestSpendingCategorySHOPPING              CreateStandingOrderRequestSpendingCategory = "SHOPPING"
	CreateStandingOrderRequestSpendingCategorySTAFF                 CreateStandingOrderRequestSpendingCategory = "STAFF"
	CreateStandingOrderRequestSpendingCategorySUBSCRIPTIONS         CreateStandingOrderRequestSpendingCategory = "SUBSCRIPTIONS"
	CreateStandingOrderRequestSpendingCategoryTAKEAWAY              CreateStandingOrderRequestSpendingCategory = "TAKEAWAY"
	CreateStandingOrderRequestSpendingCategoryTAXI                  CreateStandingOrderRequestSpendingCategory = "TAXI"
	CreateStandingOrderRequestSpendingCategoryTRANSFERS             CreateStandingOrderRequestSpendingCategory = "TRANSFERS"
	CreateStandingOrderRequestSpendingCategoryTRANSPORT             CreateStandingOrderRequestSpendingCategory = "TRANSPORT"
	CreateStandingOrderRequestSpendingCategoryTRAVEL                CreateStandingOrderRequestSpendingCategory = "TRAVEL"
	CreateStandingOrderRequestSpendingCategoryTREATS                CreateStandingOrderRequestSpendingCategory = "TREATS"
	CreateStandingOrderRequestSpendingCategoryVAT                   CreateStandingOrderRequestSpendingCategory = "VAT"
	CreateStandingOrderRequestSpendingCategoryVEHICLES              CreateStandingOrderRequestSpendingCategory = "VEHICLES"
	CreateStandingOrderRequestSpendingCategoryWEDDING               CreateStandingOrderRequestSpendingCategory = "WEDDING"
	CreateStandingOrderRequestSpendingCategoryWELLBEING             CreateStandingOrderRequestSpendingCategory = "WELLBEING"
	CreateStandingOrderRequestSpendingCategoryWORKPLACE             CreateStandingOrderRequestSpendingCategory = "WORKPLACE"
)

// Defines values for DirectDebitMandateV2Source.
const (
	ELECTRONIC DirectDebitMandateV2Source = "ELECTRONIC"
	PAPER      DirectDebitMandateV2Source = "PAPER"
)

// Defines values for DirectDebitMandateV2Status.
const (
	DirectDebitMandateV2StatusCANCELLED  DirectDebitMandateV2Status = "CANCELLED"
	DirectDebitMandateV2StatusLIVE       DirectDebitMandateV2Status = "LIVE"
	DirectDebitMandateV2StatusPENDINGCAS DirectDebitMandateV2Status = "PENDING_CAS"
)

// Defines values for FeedItemCounterPartyType.
const (
	FeedItemCounterPartyTypeCATEGORY FeedItemCounterPartyType = "CATEGORY"
	FeedItemCounterPartyTypeCHEQUE   FeedItemCounterPartyType = "CHEQUE"
	FeedItemCounterPartyTypeCUSTOMER FeedItemCounterPartyType = "CUSTOMER"
	FeedItemCounterPartyTypeLOAN     FeedItemCounterPartyType = "LOAN"
	FeedItemCounterPartyTypeMERCHANT FeedItemCounterPartyType = "MERCHANT"
	FeedItemCounterPartyTypePAYEE    FeedItemCounterPartyType = "PAYEE"
	FeedItemCounterPartyTypeSENDER   FeedItemCounterPartyType = "SENDER"
	FeedItemCounterPartyTypeSTARLING FeedItemCounterPartyType = "STARLING"
)

// Defines values for FeedItemCountry.
const (
	FeedItemCountryAC        FeedItemCountry = "AC"
	FeedItemCountryAD        FeedItemCountry = "AD"
	FeedItemCountryAE        FeedItemCountry = "AE"
	FeedItemCountryAF        FeedItemCountry = "AF"
	FeedItemCountryAG        FeedItemCountry = "AG"
	FeedItemCountryAI        FeedItemCountry = "AI"
	FeedItemCountryAL        FeedItemCountry = "AL"
	FeedItemCountryAM        FeedItemCountry = "AM"
	FeedItemCountryAN        FeedItemCountry = "AN"
	FeedItemCountryAO        FeedItemCountry = "AO"
	FeedItemCountryAQ        FeedItemCountry = "AQ"
	FeedItemCountryAR        FeedItemCountry = "AR"
	FeedItemCountryAS        FeedItemCountry = "AS"
	FeedItemCountryAT        FeedItemCountry = "AT"
	FeedItemCountryAU        FeedItemCountry = "AU"
	FeedItemCountryAW        FeedItemCountry = "AW"
	FeedItemCountryAX        FeedItemCountry = "AX"
	FeedItemCountryAZ        FeedItemCountry = "AZ"
	FeedItemCountryBA        FeedItemCountry = "BA"
	FeedItemCountryBB        FeedItemCountry = "BB"
	FeedItemCountryBD        FeedItemCountry = "BD"
	FeedItemCountryBE        FeedItemCountry = "BE"
	FeedItemCountryBF        FeedItemCountry = "BF"
	FeedItemCountryBG        FeedItemCountry = "BG"
	FeedItemCountryBH        FeedItemCountry = "BH"
	FeedItemCountryBI        FeedItemCountry = "BI"
	FeedItemCountryBJ        FeedItemCountry = "BJ"
	FeedItemCountryBL        FeedItemCountry = "BL"
	FeedItemCountryBM        FeedItemCountry = "BM"
	FeedItemCountryBN        FeedItemCountry = "BN"
	FeedItemCountryBO        FeedItemCountry = "BO"
	FeedItemCountryBQ        FeedItemCountry = "BQ"
	FeedItemCountryBR        FeedItemCountry = "BR"
	FeedItemCountryBS        FeedItemCountry = "BS"
	FeedItemCountryBT        FeedItemCountry = "BT"
	FeedItemCountryBU        FeedItemCountry = "BU"
	FeedItemCountryBV        FeedItemCountry = "BV"
	FeedItemCountryBW        FeedItemCountry = "BW"
	FeedItemCountryBY        FeedItemCountry = "BY"
	FeedItemCountryBZ        FeedItemCountry = "BZ"
	FeedItemCountryCA        FeedItemCountry = "CA"
	FeedItemCountryCC        FeedItemCountry = "CC"
	FeedItemCountryCD        FeedItemCountry = "CD"
	FeedItemCountryCF        FeedItemCountry = "CF"
	FeedItemCountryCG        FeedItemCountry = "CG"
	FeedItemCountryCH        FeedItemCountry = "CH"
	FeedItemCountryCI        FeedItemCountry = "CI"
	FeedItemCountryCK        FeedItemCountry = "CK"
	FeedItemCountryCL        FeedItemCountry = "CL"
	FeedItemCountryCM        FeedItemCountry = "CM"
	FeedItemCountryCN        FeedItemCountry = "CN"
	FeedItemCountryCO        FeedItemCountry = "CO"
	FeedItemCountryCP        FeedItemCountry = "CP"
	FeedItemCountryCR        FeedItemCountry = "CR"
	FeedItemCountryCS        FeedItemCountry = "CS"
	FeedItemCountryCU        FeedItemCountry = "CU"
	FeedItemCountryCV        FeedItemCountry = "CV"
	FeedItemCountryCW        FeedItemCountry = "CW"
	FeedItemCountryCX        FeedItemCountry = "CX"
	FeedItemCountryCY        FeedItemCountry = "CY"
	FeedItemCountryCZ        FeedItemCountry = "CZ"
	FeedItemCountryDE        FeedItemCountry = "DE"
	FeedItemCountryDG        FeedItemCountry = "DG"
	FeedItemCountryDJ        FeedItemCountry = "DJ"
	FeedItemCountryDK        FeedItemCountry = "DK"
	FeedItemCountryDM        FeedItemCountry = "DM"
	FeedItemCountryDO        FeedItemCountry = "DO"
	FeedItemCountryDZ        FeedItemCountry = "DZ"
	FeedItemCountryEA        FeedItemCountry = "EA"
	FeedItemCountryEC        FeedItemCountry = "EC"
	FeedItemCountryEE        FeedItemCountry = "EE"
	FeedItemCountryEG        FeedItemCountry = "EG"
	FeedItemCountryEH        FeedItemCountry = "EH"
	FeedItemCountryER        FeedItemCountry = "ER"
	FeedItemCountryES        FeedItemCountry = "ES"
	FeedItemCountryET        FeedItemCountry = "ET"
	FeedItemCountryEU        FeedItemCountry = "EU"
	FeedItemCountryEZ        FeedItemCountry = "EZ"
	FeedItemCountryFI        FeedItemCountry = "FI"
	FeedItemCountryFJ        FeedItemCountry = "FJ"
	FeedItemCountryFK        FeedItemCountry = "FK"
	FeedItemCountryFM        FeedItemCountry = "FM"
	FeedItemCountryFO        FeedItemCountry = "FO"
	FeedItemCountryFR        FeedItemCountry = "FR"
	FeedItemCountryFX        FeedItemCountry = "FX"
	FeedItemCountryGA        FeedItemCountry = "GA"
	FeedItemCountryGB        FeedItemCountry = "GB"
	FeedItemCountryGD        FeedItemCountry = "GD"
	FeedItemCountryGE        FeedItemCountry = "GE"
	FeedItemCountryGF        FeedItemCountry = "GF"
	FeedItemCountryGG        FeedItemCountry = "GG"
	FeedItemCountryGH        FeedItemCountry = "GH"
	FeedItemCountryGI        FeedItemCountry = "GI"
	FeedItemCountryGL        FeedItemCountry = "GL"
	FeedItemCountryGM        FeedItemCountry = "GM"
	FeedItemCountryGN        FeedItemCountry = "GN"
	FeedItemCountryGP        FeedItemCountry = "GP"
	FeedItemCountryGQ        FeedItemCountry = "GQ"
	FeedItemCountryGR        FeedItemCountry = "GR"
	FeedItemCountryGS        FeedItemCountry = "GS"
	FeedItemCountryGT        FeedItemCountry = "GT"
	FeedItemCountryGU        FeedItemCountry = "GU"
	FeedItemCountryGW        FeedItemCountry = "GW"
	FeedItemCountryGY        FeedItemCountry = "GY"
	FeedItemCountryHK        FeedItemCountry = "HK"
	FeedItemCountryHM        FeedItemCountry = "HM"
	FeedItemCountryHN        FeedItemCountry = "HN"
	FeedItemCountryHR        FeedItemCountry = "HR"
	FeedItemCountryHT        FeedItemCountry = "HT"
	FeedItemCountryHU        FeedItemCountry = "HU"
	FeedItemCountryIC        FeedItemCountry = "IC"
	FeedItemCountryID        FeedItemCountry = "ID"
	FeedItemCountryIE        FeedItemCountry = "IE"
	FeedItemCountryIL        FeedItemCountry = "IL"
	FeedItemCountryIM        FeedItemCountry = "IM"
	FeedItemCountryIN        FeedItemCountry = "IN"
	FeedItemCountryIO        FeedItemCountry = "IO"
	FeedItemCountryIQ        FeedItemCountry = "IQ"
	FeedItemCountryIR        FeedItemCountry = "IR"
	FeedItemCountryIS        FeedItemCountry = "IS"
	FeedItemCountryIT        FeedItemCountry = "IT"
	FeedItemCountryJE        FeedItemCountry = "JE"
	FeedItemCountryJM        FeedItemCountry = "JM"
	FeedItemCountryJO        FeedItemCountry = "JO"
	FeedItemCountryJP        FeedItemCountry = "JP"
	FeedItemCountryKE        FeedItemCountry = "KE"
	FeedItemCountryKG        FeedItemCountry = "KG"
	FeedItemCountryKH        FeedItemCountry = "KH"
	FeedItemCountryKI        FeedItemCountry = "KI"
	FeedItemCountryKM        FeedItemCountry = "KM"
	FeedItemCountryKN        FeedItemCountry = "KN"
	FeedItemCountryKP        FeedItemCountry = "KP"
	FeedItemCountryKR        FeedItemCountry = "KR"
	FeedItemCountryKW        FeedItemCountry = "KW"
	FeedItemCountryKY        FeedItemCountry = "KY"
	FeedItemCountryKZ        FeedItemCountry = "KZ"
	FeedItemCountryLA        FeedItemCountry = "LA"
	FeedItemCountryLB        FeedItemCountry = "LB"
	FeedItemCountryLC        FeedItemCountry = "LC"
	FeedItemCountryLI        FeedItemCountry = "LI"
	FeedItemCountryLK        FeedItemCountry = "LK"
	FeedItemCountryLR        FeedItemCountry = "LR"
	FeedItemCountryLS        FeedItemCountry = "LS"
	FeedItemCountryLT        FeedItemCountry = "LT"
	FeedItemCountryLU        FeedItemCountry = "LU"
	FeedItemCountryLV        FeedItemCountry = "LV"
	FeedItemCountryLY        FeedItemCountry = "LY"
	FeedItemCountryMA        FeedItemCountry = "MA"
	FeedItemCountryMC        FeedItemCountry = "MC"
	FeedItemCountryMD        FeedItemCountry = "MD"
	FeedItemCountryME        FeedItemCountry = "ME"
	FeedItemCountryMF        FeedItemCountry = "MF"
	FeedItemCountryMG        FeedItemCountry = "MG"
	FeedItemCountryMH        FeedItemCountry = "MH"
	FeedItemCountryMK        FeedItemCountry = "MK"
	FeedItemCountryML        FeedItemCountry = "ML"
	FeedItemCountryMM        FeedItemCountry = "MM"
	FeedItemCountryMN        FeedItemCountry = "MN"
	FeedItemCountryMO        FeedItemCountry = "MO"
	FeedItemCountryMP        FeedItemCountry = "MP"
	FeedItemCountryMQ        FeedItemCountry = "MQ"
	FeedItemCountryMR        FeedItemCountry = "MR"
	FeedItemCountryMS        FeedItemCountry = "MS"
	FeedItemCountryMT        FeedItemCountry = "MT"
	FeedItemCountryMU        FeedItemCountry = "MU"
	FeedItemCountryMV        FeedItemCountry = "MV"
	FeedItemCountryMW        FeedItemCountry = "MW"
	FeedItemCountryMX        FeedItemCountry = "MX"
	FeedItemCountryMY        FeedItemCountry = "MY"
	FeedItemCountryMZ        FeedItemCountry = "MZ"
	FeedItemCountryNA        FeedItemCountry = "NA"
	FeedItemCountryNC        FeedItemCountry = "NC"
	FeedItemCountryNE        FeedItemCountry = "NE"
	FeedItemCountryNF        FeedItemCountry = "NF"
	FeedItemCountryNG        FeedItemCountry = "NG"
	FeedItemCountryNI        FeedItemCountry = "NI"
	FeedItemCountryNL        FeedItemCountry = "NL"
	FeedItemCountryNO        FeedItemCountry = "NO"
	FeedItemCountryNP        FeedItemCountry = "NP"
	FeedItemCountryNR        FeedItemCountry = "NR"
	FeedItemCountryNT        FeedItemCountry = "NT"
	FeedItemCountryNU        FeedItemCountry = "NU"
	FeedItemCountryNZ        FeedItemCountry = "NZ"
	FeedItemCountryOM        FeedItemCountry = "OM"
	FeedItemCountryPA        FeedItemCountry = "PA"
	FeedItemCountryPE        FeedItemCountry = "PE"
	FeedItemCountryPF        FeedItemCountry = "PF"
	FeedItemCountryPG        FeedItemCountry = "PG"
	FeedItemCountryPH        FeedItemCountry = "PH"
	FeedItemCountryPK        FeedItemCountry = "PK"
	FeedItemCountryPL        FeedItemCountry = "PL"
	FeedItemCountryPM        FeedItemCountry = "PM"
	FeedItemCountryPN        FeedItemCountry = "PN"
	FeedItemCountryPR        FeedItemCountry = "PR"
	FeedItemCountryPS        FeedItemCountry = "PS"
	FeedItemCountryPT        FeedItemCountry = "PT"
	FeedItemCountryPW        FeedItemCountry = "PW"
	FeedItemCountryPY        FeedItemCountry = "PY"
	FeedItemCountryQA        FeedItemCountry = "QA"
	FeedItemCountryRE        FeedItemCountry = "RE"
	FeedItemCountryRO        FeedItemCountry = "RO"
	FeedItemCountryRS        FeedItemCountry = "RS"
	FeedItemCountryRU        FeedItemCountry = "RU"
	FeedItemCountryRW        FeedItemCountry = "RW"
	FeedItemCountrySA        FeedItemCountry = "SA"
	FeedItemCountrySB        FeedItemCountry = "SB"
	FeedItemCountrySC        FeedItemCountry = "SC"
	FeedItemCountrySD        FeedItemCountry = "SD"
	FeedItemCountrySE        FeedItemCountry = "SE"
	FeedItemCountrySF        FeedItemCountry = "SF"
	FeedItemCountrySG        FeedItemCountry = "SG"
	FeedItemCountrySH        FeedItemCountry = "SH"
	FeedItemCountrySI        FeedItemCountry = "SI"
	FeedItemCountrySJ        FeedItemCountry = "SJ"
	FeedItemCountrySK        FeedItemCountry = "SK"
	FeedItemCountrySL        FeedItemCountry = "SL"
	FeedItemCountrySM        FeedItemCountry = "SM"
	FeedItemCountrySN        FeedItemCountry = "SN"
	FeedItemCountrySO        FeedItemCountry = "SO"
	FeedItemCountrySR        FeedItemCountry = "SR"
	FeedItemCountrySS        FeedItemCountry = "SS"
	FeedItemCountryST        FeedItemCountry = "ST"
	FeedItemCountrySU        FeedItemCountry = "SU"
	FeedItemCountrySV        FeedItemCountry = "SV"
	FeedItemCountrySX        FeedItemCountry = "SX"
	FeedItemCountrySY        FeedItemCountry = "SY"
	FeedItemCountrySZ        FeedItemCountry = "SZ"
	FeedItemCountryTA        FeedItemCountry = "TA"
	FeedItemCountryTC        FeedItemCountry = "TC"
	FeedItemCountryTD        FeedItemCountry = "TD"
	FeedItemCountryTF        FeedItemCountry = "TF"
	FeedItemCountryTG        FeedItemCountry = "TG"
	FeedItemCountryTH        FeedItemCountry = "TH"
	FeedItemCountryTJ        FeedItemCountry = "TJ"
	FeedItemCountryTK        FeedItemCountry = "TK"
	FeedItemCountryTL        FeedItemCountry = "TL"
	FeedItemCountryTM        FeedItemCountry = "TM"
	FeedItemCountryTN        FeedItemCountry = "TN"
	FeedItemCountryTO        FeedItemCountry = "TO"
	FeedItemCountryTP        FeedItemCountry = "TP"
	FeedItemCountryTR        FeedItemCountry = "TR"
	FeedItemCountryTT        FeedItemCountry = "TT"
	FeedItemCountryTV        FeedItemCountry = "TV"
	FeedItemCountryTW        FeedItemCountry = "TW"
	FeedItemCountryTZ        FeedItemCountry = "TZ"
	FeedItemCountryUA        FeedItemCountry = "UA"
	FeedItemCountryUG        FeedItemCountry = "UG"
	FeedItemCountryUK        FeedItemCountry = "UK"
	FeedItemCountryUM        FeedItemCountry = "UM"
	FeedItemCountryUNDEFINED FeedItemCountry = "UNDEFINED"
	FeedItemCountryUS        FeedItemCountry = "US"
	FeedItemCountryUY        FeedItemCountry = "UY"
	FeedItemCountryUZ        FeedItemCountry = "UZ"
	FeedItemCountryVA        FeedItemCountry = "VA"
	FeedItemCountryVC        FeedItemCountry = "VC"
	FeedItemCountryVE        FeedItemCountry = "VE"
	FeedItemCountryVG        FeedItemCountry = "VG"
	FeedItemCountryVI        FeedItemCountry = "VI"
	FeedItemCountryVN        FeedItemCountry = "VN"
	FeedItemCountryVU        FeedItemCountry = "VU"
	FeedItemCountryWF        FeedItemCountry = "WF"
	FeedItemCountryWS        FeedItemCountry = "WS"
	FeedItemCountryXI        FeedItemCountry = "XI"
	FeedItemCountryXK        FeedItemCountry = "XK"
	FeedItemCountryXU        FeedItemCountry = "XU"
	FeedItemCountryXX        FeedItemCountry = "XX"
	FeedItemCountryYE        FeedItemCountry = "YE"
	FeedItemCountryYT        FeedItemCountry = "YT"
	FeedItemCountryYU        FeedItemCountry = "YU"
	FeedItemCountryZA        FeedItemCountry = "ZA"
	FeedItemCountryZM        FeedItemCountry = "ZM"
	FeedItemCountryZR        FeedItemCountry = "ZR"
	FeedItemCountryZW        FeedItemCountry = "ZW"
)

// Defines values for FeedItemDirection.
const (
	FeedItemDirectionIN  FeedItemDirection = "IN"
	FeedItemDirectionOUT FeedItemDirection = "OUT"
)

// Defines values for FeedItemSource.
const (
	FeedItemSourceBRITISHBUSINESSBANKFEES FeedItemSource = "BRITISH_BUSINESS_BANK_FEES"
	FeedItemSourceCARDFEECHARGE           FeedItemSource = "CARD_FEE_CHARGE"
	FeedItemSourceCASHDEPOSIT             FeedItemSource = "CASH_DEPOSIT"
	FeedItemSourceCASHDEPOSITCHARGE       FeedItemSource = "CASH_DEPOSIT_CHARGE"
	FeedItemSourceCASHWITHDRAWAL          FeedItemSource = "CASH_WITHDRAWAL"
	FeedItemSourceCASHWITHDRAWALCHARGE    FeedItemSource = "CASH_WITHDRAWAL_CHARGE"
	FeedItemSourceCHAPS                   FeedItemSource = "CHAPS"
	FeedItemSourceCHEQUE                  FeedItemSource = "CHEQUE"
	FeedItemSourceCICSCHEQUE              FeedItemSource = "CICS_CHEQUE"
	FeedItemSourceCURRENCYCLOUD           FeedItemSource = "CURRENCY_CLOUD"
	FeedItemSourceDIRECTCREDIT            FeedItemSource = "DIRECT_CREDIT"
	FeedItemSourceDIRECTDEBIT             FeedItemSource = "DIRECT_DEBIT"
	FeedItemSourceDIRECTDEBITDISPUTE      FeedItemSource = "DIRECT_DEBIT_DISPUTE"
	FeedItemSourceERRORSANDOMISSIONS      FeedItemSource = "ERRORS_AND_OMISSIONS"
	FeedItemSourceFASTERPAYMENTSIN        FeedItemSource = "FASTER_PAYMENTS_IN"
	FeedItemSourceFASTERPAYMENTSOUT       FeedItemSource = "FASTER_PAYMENTS_OUT"
	FeedItemSourceFASTERPAYMENTSREFUND    FeedItemSource = "FASTER_PAYMENTS_REFUND"
	FeedItemSourceFASTERPAYMENTSREVERSAL  FeedItemSource = "FASTER_PAYMENTS_REVERSAL"
	FeedItemSourceFXTRANSFER              FeedItemSource = "FX_TRANSFER"
	FeedItemSourceINTERESTPAYMENT         FeedItemSource = "INTEREST_PAYMENT"
	FeedItemSourceINTERESTV2PAYMENT       FeedItemSource = "INTEREST_V2_PAYMENT"
	FeedItemSourceINTERNALTRANSFER        FeedItemSource = "INTERNAL_TRANSFER"
	FeedItemSourceISSPAYMENT              FeedItemSource = "ISS_PAYMENT"
	FeedItemSourceLOANFEEPAYMENT          FeedItemSource = "LOAN_FEE_PAYMENT"
	FeedItemSourceLOANINTERESTCHARGE      FeedItemSource = "LOAN_INTEREST_CHARGE"
	FeedItemSourceLOANLATEPAYMENT         FeedItemSource = "LOAN_LATE_PAYMENT"
	FeedItemSourceLOANOVERPAYMENT         FeedItemSource = "LOAN_OVERPAYMENT"
	FeedItemSourceLOANPRINCIPALPAYMENT    FeedItemSource = "LOAN_PRINCIPAL_PAYMENT"
	FeedItemSourceLOANREPAYMENT           FeedItemSource = "LOAN_REPAYMENT"
	FeedItemSourceMASTERCARD              FeedItemSource = "MASTER_CARD"
	FeedItemSourceMASTERCARDCHARGEBACK    FeedItemSource = "MASTERCARD_CHARGEBACK"
	FeedItemSourceMASTERCARDMONEYSEND     FeedItemSource = "MASTERCARD_MONEYSEND"
	FeedItemSourceMISSEDPAYMENTFEE        FeedItemSource = "MISSED_PAYMENT_FEE"
	FeedItemSourceNOSTRODEPOSIT           FeedItemSource = "NOSTRO_DEPOSIT"
	FeedItemSourceONUSPAYME               FeedItemSource = "ON_US_PAY_ME"
	FeedItemSourceOVERDRAFT               FeedItemSource = "OVERDRAFT"
	FeedItemSourceOVERDRAFTFEE            FeedItemSource = "OVERDRAFT_FEE"
	FeedItemSourceOVERDRAFTINTERESTWAIVED FeedItemSource = "OVERDRAFT_INTEREST_WAIVED"
	FeedItemSourceSEPACREDITTRANSFER      FeedItemSource = "SEPA_CREDIT_TRANSFER"
	FeedItemSourceSEPADIRECTDEBIT         FeedItemSource = "SEPA_DIRECT_DEBIT"
	FeedItemSourceSTARLINGPAYMENT         FeedItemSource = "STARLING_PAYMENT"
	FeedItemSourceSTARLINGPAYSTRIPE       FeedItemSource = "STARLING_PAY_STRIPE"
	FeedItemSourceSTRIPEFUNDING           FeedItemSource = "STRIPE_FUNDING"
	FeedItemSourceSUBSCRIPTIONCHARGE      FeedItemSource = "SUBSCRIPTION_CHARGE"
	FeedItemSourceTARGET2CUSTOMERPAYMENT  FeedItemSource = "TARGET2_CUSTOMER_PAYMENT"
	FeedItemSourceWITHHELDTAX             FeedItemSource = "WITHHELD_TAX"
)

// Defines values for FeedItemSourceSubType.
const (
	FeedItemSourceSubTypeANDROIDPAY           FeedItemSourceSubType = "ANDROID_PAY"
	FeedItemSourceSubTypeANDROIDPAYONLINE     FeedItemSourceSubType = "ANDROID_PAY_ONLINE"
	FeedItemSourceSubTypeAPPLEPAY             FeedItemSourceSubType = "APPLE_PAY"
	FeedItemSourceSubTypeAPPLEPAYONLINE       FeedItemSourceSubType = "APPLE_PAY_ONLINE"
	FeedItemSourceSubTypeATM                  FeedItemSourceSubType = "ATM"
	FeedItemSourceSubTypeCARDSUBSCRIPTION     FeedItemSourceSubType = "CARD_SUBSCRIPTION"
	FeedItemSourceSubTypeCHIPANDPIN           FeedItemSourceSubType = "CHIP_AND_PIN"
	FeedItemSourceSubTypeCLICKTOPAY           FeedItemSourceSubType = "CLICK_TO_PAY"
	FeedItemSourceSubTypeCONTACTLESS          FeedItemSourceSubType = "CONTACTLESS"
	FeedItemSourceSubTypeCREDITAUTH           FeedItemSourceSubType = "CREDIT_AUTH"
	FeedItemSourceSubTypeDEPOSIT              FeedItemSourceSubType = "DEPOSIT"
	FeedItemSourceSubTypeFITBITPAY            FeedItemSourceSubType = "FITBIT_PAY"
	FeedItemSourceSubTypeGARMINPAY            FeedItemSourceSubType = "GARMIN_PAY"
	FeedItemSourceSubTypeMAGNETICSTRIP        FeedItemSourceSubType = "MAGNETIC_STRIP"
	FeedItemSourceSubTypeMANUALKEYENTRY       FeedItemSourceSubType = "MANUAL_KEY_ENTRY"
	FeedItemSourceSubTypeNEARBY               FeedItemSourceSubType = "NEARBY"
	FeedItemSourceSubTypeNEWCARD              FeedItemSourceSubType = "NEW_CARD"
	FeedItemSourceSubTypeNEWCARDOVERSEAS      FeedItemSourceSubType = "NEW_CARD_OVERSEAS"
	FeedItemSourceSubTypeNOTAPPLICABLE        FeedItemSourceSubType = "NOT_APPLICABLE"
	FeedItemSourceSubTypeONLINE               FeedItemSourceSubType = "ONLINE"
	FeedItemSourceSubTypeOTHERWALLET          FeedItemSourceSubType = "OTHER_WALLET"
	FeedItemSourceSubTypeOVERDRAFT            FeedItemSourceSubType = "OVERDRAFT"
	FeedItemSourceSubTypeSAMSUNGPAY           FeedItemSourceSubType = "SAMSUNG_PAY"
	FeedItemSourceSubTypeSETTLEUP             FeedItemSourceSubType = "SETTLE_UP"
	FeedItemSourceSubTypeTRANSFERSAMECURRENCY FeedItemSourceSubType = "TRANSFER_SAME_CURRENCY"
	FeedItemSourceSubTypeUNKNOWN              FeedItemSourceSubType = "UNKNOWN"
)

// Defines values for FeedItemSpendingCategory.
const (
	FeedItemSpendingCategoryADMIN                 FeedItemSpendingCategory = "ADMIN"
	FeedItemSpendingCategoryBANKCHARGES           FeedItemSpendingCategory = "BANK_CHARGES"
	FeedItemSpendingCategoryBIKE                  FeedItemSpendingCategory = "BIKE"
	FeedItemSpendingCategoryBILLSANDSERVICES      FeedItemSpendingCategory = "BILLS_AND_SERVICES"
	FeedItemSpendingCategoryBUCKETLIST            FeedItemSpendingCategory = "BUCKET_LIST"
	FeedItemSpendingCategoryBUSINESSENTERTAINMENT FeedItemSpendingCategory = "BUSINESS_ENTERTAINMENT"
	FeedItemSpendingCategoryCAR                   FeedItemSpendingCategory = "CAR"
	FeedItemSpendingCategoryCASH                  FeedItemSpendingCategory = "CASH"
	FeedItemSpendingCategoryCELEBRATION           FeedItemSpendingCategory = "CELEBRATION"
	FeedItemSpendingCategoryCHARITY               FeedItemSpendingCategory = "CHARITY"
	FeedItemSpendingCategoryCHILDREN              FeedItemSpendingCategory = "CHILDREN"
	FeedItemSpendingCategoryCLIENTREFUNDS         FeedItemSpendingCategory = "CLIENT_REFUNDS"
	FeedItemSpendingCategoryCLOTHES               FeedItemSpendingCategory = "CLOTHES"
	FeedItemSpendingCategoryCOFFEE                FeedItemSpendingCategory = "COFFEE"
	FeedItemSpendingCategoryCORPORATIONTAX        FeedItemSpendingCategory = "CORPORATION_TAX"
	FeedItemSpendingCategoryDEBTREPAYMENT         FeedItemSpendingCategory = "DEBT_REPAYMENT"
	FeedItemSpendingCategoryDIRECTORSWAGES        FeedItemSpendingCategory = "DIRECTORS_WAGES"
	FeedItemSpendingCategoryDIVIDENDS             FeedItemSpendingCategory = "DIVIDENDS"
	FeedItemSpendingCategoryDIY                   FeedItemSpendingCategory = "DIY"
	FeedItemSpendingCategoryDRINKS                FeedItemSpendingCategory = "DRINKS"
	FeedItemSpendingCategoryEATINGOUT             FeedItemSpendingCategory = "EATING_OUT"
	FeedItemSpendingCategoryEDUCATION             FeedItemSpendingCategory = "EDUCATION"
	FeedItemSpendingCategoryEMERGENCY             FeedItemSpendingCategory = "EMERGENCY"
	FeedItemSpendingCategoryENTERTAINMENT         FeedItemSpendingCategory = "ENTERTAINMENT"
	FeedItemSpendingCategoryEQUIPMENT             FeedItemSpendingCategory = "EQUIPMENT"
	FeedItemSpendingCategoryESSENTIALSPEND        FeedItemSpendingCategory = "ESSENTIAL_SPEND"
	FeedItemSpendingCategoryEXPENSES              FeedItemSpendingCategory = "EXPENSES"
	FeedItemSpendingCategoryFAMILY                FeedItemSpendingCategory = "FAMILY"
	FeedItemSpendingCategoryFITNESS               FeedItemSpendingCategory = "FITNESS"
	FeedItemSpendingCategoryFOODANDDRINK          FeedItemSpendingCategory = "FOOD_AND_DRINK"
	FeedItemSpendingCategoryFUEL                  FeedItemSpendingCategory = "FUEL"
	FeedItemSpendingCategoryGAMBLING              FeedItemSpendingCategory = "GAMBLING"
	FeedItemSpendingCategoryGAMING                FeedItemSpendingCategory = "GAMING"
	FeedItemSpendingCategoryGARDEN                FeedItemSpendingCategory = "GARDEN"
	FeedItemSpendingCategoryGENERAL               FeedItemSpendingCategory = "GENERAL"
	FeedItemSpendingCategoryGIFTS                 FeedItemSpendingCategory = "GIFTS"
	FeedItemSpendingCategoryGROCERIES             FeedItemSpendingCategory = "GROCERIES"
	FeedItemSpendingCategoryHOBBY                 FeedItemSpendingCategory = "HOBBY"
	FeedItemSpendingCategoryHOLIDAYS              FeedItemSpendingCategory = "HOLIDAYS"
	FeedItemSpendingCategoryHOME                  FeedItemSpendingCategory = "HOME"
	FeedItemSpendingCategoryIMPULSEBUY            FeedItemSpendingCategory = "IMPULSE_BUY"
	FeedItemSpendingCategoryINCOME                FeedItemSpendingCategory = "INCOME"
	FeedItemSpendingCategoryINSURANCE             FeedItemSpendingCategory = "INSURANCE"
	FeedItemSpendingCategoryINTERESTPAYMENTS      FeedItemSpendingCategory = "INTEREST_PAYMENTS"
	FeedItemSpendingCategoryINVENTORY             FeedItemSpendingCategory = "INVENTORY"
	FeedItemSpendingCategoryINVESTMENTCAPITAL     FeedItemSpendingCategory = "INVESTMENT_CAPITAL"
	FeedItemSpendingCategoryINVESTMENTS           FeedItemSpendingCategory = "INVESTMENTS"
	FeedItemSpendingCategoryLIFESTYLE             FeedItemSpendingCategory = "LIFESTYLE"
	FeedItemSpendingCategoryLOANPRINCIPAL         FeedItemSpendingCategory = "LOAN_PRINCIPAL"
	FeedItemSpendingCategoryMAINTENANCEANDREPAIRS FeedItemSpendingCategory = "MAINTENANCE_AND_REPAIRS"
	FeedItemSpendingCategoryMARKETING             FeedItemSpendingCategory = "MARKETING"
	FeedItemSpendingCategoryMEDICAL               FeedItemSpendingCategory = "MEDICAL"
	FeedItemSpendingCategoryMORTGAGE              FeedItemSpendingCategory = "MORTGAGE"
	FeedItemSpendingCategoryNONE                  FeedItemSpendingCategory = "NONE"
	FeedItemSpendingCategoryNONESSENTIALSPEND     FeedItemSpendingCategory = "NON_ESSENTIAL_SPEND"
	FeedItemSpendingCategoryOTHER                 FeedItemSpendingCategory = "OTHER"
	FeedItemSpendingCategoryOTHERINCOME           FeedItemSpendingCategory = "OTHER_INCOME"
	FeedItemSpendingCategoryPAYMENTS              FeedItemSpendingCategory = "PAYMENTS"
	FeedItemSpendingCategoryPERSONAL              FeedItemSpendingCategory = "PERSONAL"
	FeedItemSpendingCategoryPERSONALCARE          FeedItemSpendingCategory = "PERSONAL_CARE"
	FeedItemSpendingCategoryPERSONALTRANSFERS     FeedItemSpendingCategory = "PERSONAL_TRANSFERS"
	FeedItemSpendingCategoryPETS                  FeedItemSpendingCategory = "PETS"
	FeedItemSpendingCategoryPHONEANDINTERNET      FeedItemSpendingCategory = "PHONE_AND_INTERNET"
	FeedItemSpendingCategoryPROFESSIONALSERVICES  FeedItemSpendingCategory = "PROFESSIONAL_SERVICES"
	FeedItemSpendingCategoryPROJECTS              FeedItemSpendingCategory = "PROJECTS"
	FeedItemSpendingCategoryRELATIONSHIPS         FeedItemSpendingCategory = "RELATIONSHIPS"
	FeedItemSpendingCategoryRENT                  FeedItemSpendingCategory = "RENT"
	FeedItemSpendingCategoryREPAIRSANDMAINTENANCE FeedItemSpendingCategory = "REPAIRS_AND_MAINTENANCE"
	FeedItemSpendingCategoryREVENUE               FeedItemSpendingCategory = "REVENUE"
	FeedItemSpendingCategorySAVING                FeedItemSpendingCategory = "SAVING"
	FeedItemSpendingCategorySELFASSESSMENTTAX     FeedItemSpendingCategory = "SELF_ASSESSMENT_TAX"
	FeedItemSpendingCategorySHOPPING              FeedItemSpendingCategory = "SHOPPING"
	FeedItemSpendingCategorySTAFF                 FeedItemSpendingCategory = "STAFF"
	FeedItemSpendingCategorySUBSCRIPTIONS         FeedItemSpendingCategory = "SUBSCRIPTIONS"
	FeedItemSpendingCategoryTAKEAWAY              FeedItemSpendingCategory = "TAKEAWAY"
	FeedItemSpendingCategoryTAXI                  FeedItemSpendingCategory = "TAXI"
	FeedItemSpendingCategoryTRANSFERS             FeedItemSpendingCategory = "TRANSFERS"
	FeedItemSpendingCategoryTRANSPORT             FeedItemSpendingCategory = "TRANSPORT"
	FeedItemSpendingCategoryTRAVEL                FeedItemSpendingCategory = "TRAVEL"
	FeedItemSpendingCategoryTREATS                FeedItemSpendingCategory = "TREATS"
	FeedItemSpendingCategoryVAT                   FeedItemSpendingCategory = "VAT"
	FeedItemSpendingCategoryVEHICLES              FeedItemSpendingCategory = "VEHICLES"
	FeedItemSpendingCategoryWEDDING               FeedItemSpendingCategory = "WEDDING"
	FeedItemSpendingCategoryWELLBEING             FeedItemSpendingCategory = "WELLBEING"
	FeedItemSpendingCategoryWORKPLACE             FeedItemSpendingCategory = "WORKPLACE"
)

// Defines values for FeedItemStatus.
const (
	FeedItemStatusACCOUNTCHECK      FeedItemStatus = "ACCOUNT_CHECK"
	FeedItemStatusDECLINED          FeedItemStatus = "DECLINED"
	FeedItemStatusPENDING           FeedItemStatus = "PENDING"
	FeedItemStatusREFUNDED          FeedItemStatus = "REFUNDED"
	FeedItemStatusRETRYING          FeedItemStatus = "RETRYING"
	FeedItemStatusREVERSED          FeedItemStatus = "REVERSED"
	FeedItemStatusSETTLED           FeedItemStatus = "SETTLED"
	FeedItemStatusUPCOMING          FeedItemStatus = "UPCOMING"
	FeedItemStatusUPCOMINGCANCELLED FeedItemStatus = "UPCOMING_CANCELLED"
)

// Defines values for FeedItemAttachmentAttachmentType.
const (
	ImagePdf FeedItemAttachmentAttachmentType = "image, pdf"
)

// Defines values for FeedItemAttachmentFeedItemAttachmentType.
const (
	IMAGE    FeedItemAttachmentFeedItemAttachmentType = "IMAGE"
	IMAGEPDF FeedItemAttachmentFeedItemAttachmentType = "IMAGE, PDF"
	PDF      FeedItemAttachmentFeedItemAttachmentType = "PDF"
)

// Defines values for InstructLocalPaymentRequestSpendingCategory.
const (
	InstructLocalPaymentRequestSpendingCategoryADMIN                 InstructLocalPaymentRequestSpendingCategory = "ADMIN"
	InstructLocalPaymentRequestSpendingCategoryBANKCHARGES           InstructLocalPaymentRequestSpendingCategory = "BANK_CHARGES"
	InstructLocalPaymentRequestSpendingCategoryBIKE                  InstructLocalPaymentRequestSpendingCategory = "BIKE"
	InstructLocalPaymentRequestSpendingCategoryBILLSANDSERVICES      InstructLocalPaymentRequestSpendingCategory = "BILLS_AND_SERVICES"
	InstructLocalPaymentRequestSpendingCategoryBUCKETLIST            InstructLocalPaymentRequestSpendingCategory = "BUCKET_LIST"
	InstructLocalPaymentRequestSpendingCategoryBUSINESSENTERTAINMENT InstructLocalPaymentRequestSpendingCategory = "BUSINESS_ENTERTAINMENT"
	InstructLocalPaymentRequestSpendingCategoryCAR                   InstructLocalPaymentRequestSpendingCategory = "CAR"
	InstructLocalPaymentRequestSpendingCategoryCASH                  InstructLocalPaymentRequestSpendingCategory = "CASH"
	InstructLocalPaymentRequestSpendingCategoryCELEBRATION           InstructLocalPaymentRequestSpendingCategory = "CELEBRATION"
	InstructLocalPaymentRequestSpendingCategoryCHARITY               InstructLocalPaymentRequestSpendingCategory = "CHARITY"
	InstructLocalPaymentRequestSpendingCategoryCHILDREN              InstructLocalPaymentRequestSpendingCategory = "CHILDREN"
	InstructLocalPaymentRequestSpendingCategoryCLIENTREFUNDS         InstructLocalPaymentRequestSpendingCategory = "CLIENT_REFUNDS"
	InstructLocalPaymentRequestSpendingCategoryCLOTHES               InstructLocalPaymentRequestSpendingCategory = "CLOTHES"
	InstructLocalPaymentRequestSpendingCategoryCOFFEE                InstructLocalPaymentRequestSpendingCategory = "COFFEE"
	InstructLocalPaymentRequestSpendingCategoryCORPORATIONTAX        InstructLocalPaymentRequestSpendingCategory = "CORPORATION_TAX"
	InstructLocalPaymentRequestSpendingCategoryDEBTREPAYMENT         InstructLocalPaymentRequestSpendingCategory = "DEBT_REPAYMENT"
	InstructLocalPaymentRequestSpendingCategoryDIRECTORSWAGES        InstructLocalPaymentRequestSpendingCategory = "DIRECTORS_WAGES"
	InstructLocalPaymentRequestSpendingCategoryDIVIDENDS             InstructLocalPaymentRequestSpendingCategory = "DIVIDENDS"
	InstructLocalPaymentRequestSpendingCategoryDIY                   InstructLocalPaymentRequestSpendingCategory = "DIY"
	InstructLocalPaymentRequestSpendingCategoryDRINKS                InstructLocalPaymentRequestSpendingCategory = "DRINKS"
	InstructLocalPaymentRequestSpendingCategoryEATINGOUT             InstructLocalPaymentRequestSpendingCategory = "EATING_OUT"
	InstructLocalPaymentRequestSpendingCategoryEDUCATION             InstructLocalPaymentRequestSpendingCategory = "EDUCATION"
	InstructLocalPaymentRequestSpendingCategoryEMERGENCY             InstructLocalPaymentRequestSpendingCategory = "EMERGENCY"
	InstructLocalPaymentRequestSpendingCategoryENTERTAINMENT         InstructLocalPaymentRequestSpendingCategory = "ENTERTAINMENT"
	InstructLocalPaymentRequestSpendingCategoryEQUIPMENT             InstructLocalPaymentRequestSpendingCategory = "EQUIPMENT"
	InstructLocalPaymentRequestSpendingCategoryESSENTIALSPEND        InstructLocalPaymentRequestSpendingCategory = "ESSENTIAL_SPEND"
	InstructLocalPaymentRequestSpendingCategoryEXPENSES              InstructLocalPaymentRequestSpendingCategory = "EXPENSES"
	InstructLocalPaymentRequestSpendingCategoryFAMILY                InstructLocalPaymentRequestSpendingCategory = "FAMILY"
	InstructLocalPaymentRequestSpendingCategoryFITNESS               InstructLocalPaymentRequestSpendingCategory = "FITNESS"
	InstructLocalPaymentRequestSpendingCategoryFOODANDDRINK          InstructLocalPaymentRequestSpendingCategory = "FOOD_AND_DRINK"
	InstructLocalPaymentRequestSpendingCategoryFUEL                  InstructLocalPaymentRequestSpendingCategory = "FUEL"
	InstructLocalPaymentRequestSpendingCategoryGAMBLING              InstructLocalPaymentRequestSpendingCategory = "GAMBLING"
	InstructLocalPaymentRequestSpendingCategoryGAMING                InstructLocalPaymentRequestSpendingCategory = "GAMING"
	InstructLocalPaymentRequestSpendingCategoryGARDEN                InstructLocalPaymentRequestSpendingCategory = "GARDEN"
	InstructLocalPaymentRequestSpendingCategoryGENERAL               InstructLocalPaymentRequestSpendingCategory = "GENERAL"
	InstructLocalPaymentRequestSpendingCategoryGIFTS                 InstructLocalPaymentRequestSpendingCategory = "GIFTS"
	InstructLocalPaymentRequestSpendingCategoryGROCERIES             InstructLocalPaymentRequestSpendingCategory = "GROCERIES"
	InstructLocalPaymentRequestSpendingCategoryHOBBY                 InstructLocalPaymentRequestSpendingCategory = "HOBBY"
	InstructLocalPaymentRequestSpendingCategoryHOLIDAYS              InstructLocalPaymentRequestSpendingCategory = "HOLIDAYS"
	InstructLocalPaymentRequestSpendingCategoryHOME                  InstructLocalPaymentRequestSpendingCategory = "HOME"
	InstructLocalPaymentRequestSpendingCategoryIMPULSEBUY            InstructLocalPaymentRequestSpendingCategory = "IMPULSE_BUY"
	InstructLocalPaymentRequestSpendingCategoryINCOME                InstructLocalPaymentRequestSpendingCategory = "INCOME"
	InstructLocalPaymentRequestSpendingCategoryINSURANCE             InstructLocalPaymentRequestSpendingCategory = "INSURANCE"
	InstructLocalPaymentRequestSpendingCategoryINTERESTPAYMENTS      InstructLocalPaymentRequestSpendingCategory = "INTEREST_PAYMENTS"
	InstructLocalPaymentRequestSpendingCategoryINVENTORY             InstructLocalPaymentRequestSpendingCategory = "INVENTORY"
	InstructLocalPaymentRequestSpendingCategoryINVESTMENTCAPITAL     InstructLocalPaymentRequestSpendingCategory = "INVESTMENT_CAPITAL"
	InstructLocalPaymentRequestSpendingCategoryINVESTMENTS           InstructLocalPaymentRequestSpendingCategory = "INVESTMENTS"
	InstructLocalPaymentRequestSpendingCategoryLIFESTYLE             InstructLocalPaymentRequestSpendingCategory = "LIFESTYLE"
	InstructLocalPaymentRequestSpendingCategoryLOANPRINCIPAL         InstructLocalPaymentRequestSpendingCategory = "LOAN_PRINCIPAL"
	InstructLocalPaymentRequestSpendingCategoryMAINTENANCEANDREPAIRS InstructLocalPaymentRequestSpendingCategory = "MAINTENANCE_AND_REPAIRS"
	InstructLocalPaymentRequestSpendingCategoryMARKETING             InstructLocalPaymentRequestSpendingCategory = "MARKETING"
	InstructLocalPaymentRequestSpendingCategoryMEDICAL               InstructLocalPaymentRequestSpendingCategory = "MEDICAL"
	InstructLocalPaymentRequestSpendingCategoryMORTGAGE              InstructLocalPaymentRequestSpendingCategory = "MORTGAGE"
	InstructLocalPaymentRequestSpendingCategoryNONE                  InstructLocalPaymentRequestSpendingCategory = "NONE"
	InstructLocalPaymentRequestSpendingCategoryNONESSENTIALSPEND     InstructLocalPaymentRequestSpendingCategory = "NON_ESSENTIAL_SPEND"
	InstructLocalPaymentRequestSpendingCategoryOTHER                 InstructLocalPaymentRequestSpendingCategory = "OTHER"
	InstructLocalPaymentRequestSpendingCategoryOTHERINCOME           InstructLocalPaymentRequestSpendingCategory = "OTHER_INCOME"
	InstructLocalPaymentRequestSpendingCategoryPAYMENTS              InstructLocalPaymentRequestSpendingCategory = "PAYMENTS"
	InstructLocalPaymentRequestSpendingCategoryPERSONAL              InstructLocalPaymentRequestSpendingCategory = "PERSONAL"
	InstructLocalPaymentRequestSpendingCategoryPERSONALCARE          InstructLocalPaymentRequestSpendingCategory = "PERSONAL_CARE"
	InstructLocalPaymentRequestSpendingCategoryPERSONALTRANSFERS     InstructLocalPaymentRequestSpendingCategory = "PERSONAL_TRANSFERS"
	InstructLocalPaymentRequestSpendingCategoryPETS                  InstructLocalPaymentRequestSpendingCategory = "PETS"
	InstructLocalPaymentRequestSpendingCategoryPHONEANDINTERNET      InstructLocalPaymentRequestSpendingCategory = "PHONE_AND_INTERNET"
	InstructLocalPaymentRequestSpendingCategoryPROFESSIONALSERVICES  InstructLocalPaymentRequestSpendingCategory = "PROFESSIONAL_SERVICES"
	InstructLocalPaymentRequestSpendingCategoryPROJECTS              InstructLocalPaymentRequestSpendingCategory = "PROJECTS"
	InstructLocalPaymentRequestSpendingCategoryRELATIONSHIPS         InstructLocalPaymentRequestSpendingCategory = "RELATIONSHIPS"
	InstructLocalPaymentRequestSpendingCategoryRENT                  InstructLocalPaymentRequestSpendingCategory = "RENT"
	InstructLocalPaymentRequestSpendingCategoryREPAIRSANDMAINTENANCE InstructLocalPaymentRequestSpendingCategory = "REPAIRS_AND_MAINTENANCE"
	InstructLocalPaymentRequestSpendingCategoryREVENUE               InstructLocalPaymentRequestSpendingCategory = "REVENUE"
	InstructLocalPaymentRequestSpendingCategorySAVING                InstructLocalPaymentRequestSpendingCategory = "SAVING"
	InstructLocalPaymentRequestSpendingCategorySELFASSESSMENTTAX     InstructLocalPaymentRequestSpendingCategory = "SELF_ASSESSMENT_TAX"
	InstructLocalPaymentRequestSpendingCategorySHOPPING              InstructLocalPaymentRequestSpendingCategory = "SHOPPING"
	InstructLocalPaymentRequestSpendingCategorySTAFF                 InstructLocalPaymentRequestSpendingCategory = "STAFF"
	InstructLocalPaymentRequestSpendingCategorySUBSCRIPTIONS         InstructLocalPaymentRequestSpendingCategory = "SUBSCRIPTIONS"
	InstructLocalPaymentRequestSpendingCategoryTAKEAWAY              InstructLocalPaymentRequestSpendingCategory = "TAKEAWAY"
	InstructLocalPaymentRequestSpendingCategoryTAXI                  InstructLocalPaymentRequestSpendingCategory = "TAXI"
	InstructLocalPaymentRequestSpendingCategoryTRANSFERS             InstructLocalPaymentRequestSpendingCategory = "TRANSFERS"
	InstructLocalPaymentRequestSpendingCategoryTRANSPORT             InstructLocalPaymentRequestSpendingCategory = "TRANSPORT"
	InstructLocalPaymentRequestSpendingCategoryTRAVEL                InstructLocalPaymentRequestSpendingCategory = "TRAVEL"
	InstructLocalPaymentRequestSpendingCategoryTREATS                InstructLocalPaymentRequestSpendingCategory = "TREATS"
	InstructLocalPaymentRequestSpendingCategoryVAT                   InstructLocalPaymentRequestSpendingCategory = "VAT"
	InstructLocalPaymentRequestSpendingCategoryVEHICLES              InstructLocalPaymentRequestSpendingCategory = "VEHICLES"
	InstructLocalPaymentRequestSpendingCategoryWEDDING               InstructLocalPaymentRequestSpendingCategory = "WEDDING"
	InstructLocalPaymentRequestSpendingCategoryWELLBEING             InstructLocalPaymentRequestSpendingCategory = "WELLBEING"
	InstructLocalPaymentRequestSpendingCategoryWORKPLACE             InstructLocalPaymentRequestSpendingCategory = "WORKPLACE"
)

// Defines values for MoneyCurrency.
const (
	MoneyCurrencyAED       MoneyCurrency = "AED"
	MoneyCurrencyAFN       MoneyCurrency = "AFN"
	MoneyCurrencyALL       MoneyCurrency = "ALL"
	MoneyCurrencyAMD       MoneyCurrency = "AMD"
	MoneyCurrencyANG       MoneyCurrency = "ANG"
	MoneyCurrencyAOA       MoneyCurrency = "AOA"
	MoneyCurrencyARS       MoneyCurrency = "ARS"
	MoneyCurrencyAUD       MoneyCurrency = "AUD"
	MoneyCurrencyAWG       MoneyCurrency = "AWG"
	MoneyCurrencyAZN       MoneyCurrency = "AZN"
	MoneyCurrencyBAM       MoneyCurrency = "BAM"
	MoneyCurrencyBBD       MoneyCurrency = "BBD"
	MoneyCurrencyBDT       MoneyCurrency = "BDT"
	MoneyCurrencyBGN       MoneyCurrency = "BGN"
	MoneyCurrencyBHD       MoneyCurrency = "BHD"
	MoneyCurrencyBIF       MoneyCurrency = "BIF"
	MoneyCurrencyBMD       MoneyCurrency = "BMD"
	MoneyCurrencyBND       MoneyCurrency = "BND"
	MoneyCurrencyBOB       MoneyCurrency = "BOB"
	MoneyCurrencyBOV       MoneyCurrency = "BOV"
	MoneyCurrencyBRL       MoneyCurrency = "BRL"
	MoneyCurrencyBSD       MoneyCurrency = "BSD"
	MoneyCurrencyBTN       MoneyCurrency = "BTN"
	MoneyCurrencyBWP       MoneyCurrency = "BWP"
	MoneyCurrencyBYN       MoneyCurrency = "BYN"
	MoneyCurrencyBYR       MoneyCurrency = "BYR"
	MoneyCurrencyBZD       MoneyCurrency = "BZD"
	MoneyCurrencyCAD       MoneyCurrency = "CAD"
	MoneyCurrencyCDF       MoneyCurrency = "CDF"
	MoneyCurrencyCHE       MoneyCurrency = "CHE"
	MoneyCurrencyCHF       MoneyCurrency = "CHF"
	MoneyCurrencyCHW       MoneyCurrency = "CHW"
	MoneyCurrencyCLF       MoneyCurrency = "CLF"
	MoneyCurrencyCLP       MoneyCurrency = "CLP"
	MoneyCurrencyCNY       MoneyCurrency = "CNY"
	MoneyCurrencyCOP       MoneyCurrency = "COP"
	MoneyCurrencyCOU       MoneyCurrency = "COU"
	MoneyCurrencyCRC       MoneyCurrency = "CRC"
	MoneyCurrencyCUC       MoneyCurrency = "CUC"
	MoneyCurrencyCUP       MoneyCurrency = "CUP"
	MoneyCurrencyCVE       MoneyCurrency = "CVE"
	MoneyCurrencyCZK       MoneyCurrency = "CZK"
	MoneyCurrencyDJF       MoneyCurrency = "DJF"
	MoneyCurrencyDKK       MoneyCurrency = "DKK"
	MoneyCurrencyDOP       MoneyCurrency = "DOP"
	MoneyCurrencyDZD       MoneyCurrency = "DZD"
	MoneyCurrencyEGP       MoneyCurrency = "EGP"
	MoneyCurrencyERN       MoneyCurrency = "ERN"
	MoneyCurrencyETB       MoneyCurrency = "ETB"
	MoneyCurrencyEUR       MoneyCurrency = "EUR"
	MoneyCurrencyFJD       MoneyCurrency = "FJD"
	MoneyCurrencyFKP       MoneyCurrency = "FKP"
	MoneyCurrencyGBP       MoneyCurrency = "GBP"
	MoneyCurrencyGEL       MoneyCurrency = "GEL"
	MoneyCurrencyGHS       MoneyCurrency = "GHS"
	MoneyCurrencyGIP       MoneyCurrency = "GIP"
	MoneyCurrencyGMD       MoneyCurrency = "GMD"
	MoneyCurrencyGNF       MoneyCurrency = "GNF"
	MoneyCurrencyGTQ       MoneyCurrency = "GTQ"
	MoneyCurrencyGYD       MoneyCurrency = "GYD"
	MoneyCurrencyHKD       MoneyCurrency = "HKD"
	MoneyCurrencyHNL       MoneyCurrency = "HNL"
	MoneyCurrencyHRK       MoneyCurrency = "HRK"
	MoneyCurrencyHTG       MoneyCurrency = "HTG"
	MoneyCurrencyHUF       MoneyCurrency = "HUF"
	MoneyCurrencyIDR       MoneyCurrency = "IDR"
	MoneyCurrencyILS       MoneyCurrency = "ILS"
	MoneyCurrencyINR       MoneyCurrency = "INR"
	MoneyCurrencyIQD       MoneyCurrency = "IQD"
	MoneyCurrencyIRR       MoneyCurrency = "IRR"
	MoneyCurrencyISK       MoneyCurrency = "ISK"
	MoneyCurrencyJMD       MoneyCurrency = "JMD"
	MoneyCurrencyJOD       MoneyCurrency = "JOD"
	MoneyCurrencyJPY       MoneyCurrency = "JPY"
	MoneyCurrencyKES       MoneyCurrency = "KES"
	MoneyCurrencyKGS       MoneyCurrency = "KGS"
	MoneyCurrencyKHR       MoneyCurrency = "KHR"
	MoneyCurrencyKMF       MoneyCurrency = "KMF"
	MoneyCurrencyKPW       MoneyCurrency = "KPW"
	MoneyCurrencyKRW       MoneyCurrency = "KRW"
	MoneyCurrencyKWD       MoneyCurrency = "KWD"
	MoneyCurrencyKYD       MoneyCurrency = "KYD"
	MoneyCurrencyKZT       MoneyCurrency = "KZT"
	MoneyCurrencyLAK       MoneyCurrency = "LAK"
	MoneyCurrencyLBP       MoneyCurrency = "LBP"
	MoneyCurrencyLKR       MoneyCurrency = "LKR"
	MoneyCurrencyLRD       MoneyCurrency = "LRD"
	MoneyCurrencyLSL       MoneyCurrency = "LSL"
	MoneyCurrencyLTL       MoneyCurrency = "LTL"
	MoneyCurrencyLYD       MoneyCurrency = "LYD"
	MoneyCurrencyMAD       MoneyCurrency = "MAD"
	MoneyCurrencyMDL       MoneyCurrency = "MDL"
	MoneyCurrencyMGA       MoneyCurrency = "MGA"
	MoneyCurrencyMKD       MoneyCurrency = "MKD"
	MoneyCurrencyMMK       MoneyCurrency = "MMK"
	MoneyCurrencyMNT       MoneyCurrency = "MNT"
	MoneyCurrencyMOP       MoneyCurrency = "MOP"
	MoneyCurrencyMRO       MoneyCurrency = "MRO"
	MoneyCurrencyMRU       MoneyCurrency = "MRU"
	MoneyCurrencyMUR       MoneyCurrency = "MUR"
	MoneyCurrencyMVR       MoneyCurrency = "MVR"
	MoneyCurrencyMWK       MoneyCurrency = "MWK"
	MoneyCurrencyMXN       MoneyCurrency = "MXN"
	MoneyCurrencyMXV       MoneyCurrency = "MXV"
	MoneyCurrencyMYR       MoneyCurrency = "MYR"
	MoneyCurrencyMZN       MoneyCurrency = "MZN"
	MoneyCurrencyNAD       MoneyCurrency = "NAD"
	MoneyCurrencyNGN       MoneyCurrency = "NGN"
	MoneyCurrencyNIO       MoneyCurrency = "NIO"
	MoneyCurrencyNOK       MoneyCurrency = "NOK"
	MoneyCurrencyNPR       MoneyCurrency = "NPR"
	MoneyCurrencyNZD       MoneyCurrency = "NZD"
	MoneyCurrencyOMR       MoneyCurrency = "OMR"
	MoneyCurrencyPAB       MoneyCurrency = "PAB"
	MoneyCurrencyPEN       MoneyCurrency = "PEN"
	MoneyCurrencyPGK       MoneyCurrency = "PGK"
	MoneyCurrencyPHP       MoneyCurrency = "PHP"
	MoneyCurrencyPKR       MoneyCurrency = "PKR"
	MoneyCurrencyPLN       MoneyCurrency = "PLN"
	MoneyCurrencyPYG       MoneyCurrency = "PYG"
	MoneyCurrencyQAR       MoneyCurrency = "QAR"
	MoneyCurrencyRON       MoneyCurrency = "RON"
	MoneyCurrencyRSD       MoneyCurrency = "RSD"
	MoneyCurrencyRUB       MoneyCurrency = "RUB"
	MoneyCurrencyRUR       MoneyCurrency = "RUR"
	MoneyCurrencyRWF       MoneyCurrency = "RWF"
	MoneyCurrencySAR       MoneyCurrency = "SAR"
	MoneyCurrencySBD       MoneyCurrency = "SBD"
	MoneyCurrencySCR       MoneyCurrency = "SCR"
	MoneyCurrencySDG       MoneyCurrency = "SDG"
	MoneyCurrencySEK       MoneyCurrency = "SEK"
	MoneyCurrencySGD       MoneyCurrency = "SGD"
	MoneyCurrencySHP       MoneyCurrency = "SHP"
	MoneyCurrencySLE       MoneyCurrency = "SLE"
	MoneyCurrencySLL       MoneyCurrency = "SLL"
	MoneyCurrencySOS       MoneyCurrency = "SOS"
	MoneyCurrencySRD       MoneyCurrency = "SRD"
	MoneyCurrencySSP       MoneyCurrency = "SSP"
	MoneyCurrencySTD       MoneyCurrency = "STD"
	MoneyCurrencySTN       MoneyCurrency = "STN"
	MoneyCurrencySVC       MoneyCurrency = "SVC"
	MoneyCurrencySYP       MoneyCurrency = "SYP"
	MoneyCurrencySZL       MoneyCurrency = "SZL"
	MoneyCurrencyTHB       MoneyCurrency = "THB"
	MoneyCurrencyTJS       MoneyCurrency = "TJS"
	MoneyCurrencyTMT       MoneyCurrency = "TMT"
	MoneyCurrencyTND       MoneyCurrency = "TND"
	MoneyCurrencyTOP       MoneyCurrency = "TOP"
	MoneyCurrencyTRY       MoneyCurrency = "TRY"
	MoneyCurrencyTTD       MoneyCurrency = "TTD"
	MoneyCurrencyTWD       MoneyCurrency = "TWD"
	MoneyCurrencyTZS       MoneyCurrency = "TZS"
	MoneyCurrencyUAH       MoneyCurrency = "UAH"
	MoneyCurrencyUGX       MoneyCurrency = "UGX"
	MoneyCurrencyUNDEFINED MoneyCurrency = "UNDEFINED"
	MoneyCurrencyUSD       MoneyCurrency = "USD"
	MoneyCurrencyUSN       MoneyCurrency = "USN"
	MoneyCurrencyUSS       MoneyCurrency = "USS"
	MoneyCurrencyUYI       MoneyCurrency = "UYI"
	MoneyCurrencyUYU       MoneyCurrency = "UYU"
	MoneyCurrencyUZS       MoneyCurrency = "UZS"
	MoneyCurrencyVEF       MoneyCurrency = "VEF"
	MoneyCurrencyVES       MoneyCurrency = "VES"
	MoneyCurrencyVND       MoneyCurrency = "VND"
	MoneyCurrencyVUV       MoneyCurrency = "VUV"
	MoneyCurrencyWST       MoneyCurrency = "WST"
	MoneyCurrencyXAF       MoneyCurrency = "XAF"
	MoneyCurrencyXAG       MoneyCurrency = "XAG"
	MoneyCurrencyXAU       MoneyCurrency = "XAU"
	MoneyCurrencyXBA       MoneyCurrency = "XBA"
	MoneyCurrencyXBB       MoneyCurrency = "XBB"
	MoneyCurrencyXBC       MoneyCurrency = "XBC"
	MoneyCurrencyXBD       MoneyCurrency = "XBD"
	MoneyCurrencyXCD       MoneyCurrency = "XCD"
	MoneyCurrencyXDR       MoneyCurrency = "XDR"
	MoneyCurrencyXOF       MoneyCurrency = "XOF"
	MoneyCurrencyXPD       MoneyCurrency = "XPD"
	MoneyCurrencyXPF       MoneyCurrency = "XPF"
	MoneyCurrencyXPT       MoneyCurrency = "XPT"
	MoneyCurrencyXSU       MoneyCurrency = "XSU"
	MoneyCurrencyXTS       MoneyCurrency = "XTS"
	MoneyCurrencyXUA       MoneyCurrency = "XUA"
	MoneyCurrencyXXX       MoneyCurrency = "XXX"
	MoneyCurrencyYER       MoneyCurrency = "YER"
	MoneyCurrencyZAR       MoneyCurrency = "ZAR"
	MoneyCurrencyZMW       MoneyCurrency = "ZMW"
	MoneyCurrencyZWL       MoneyCurrency = "ZWL"
)

// Defines values for PayeePayeeType.
const (
	PayeePayeeTypeBUSINESS   PayeePayeeType = "BUSINESS"
	PayeePayeeTypeINDIVIDUAL PayeePayeeType = "INDIVIDUAL"
)

// Defines values for PayeeAccountBankIdentifierType.
const (
	PayeeAccountBankIdentifierTypeABA      PayeeAccountBankIdentifierType = "ABA"
	PayeeAccountBankIdentifierTypeABAACH   PayeeAccountBankIdentifierType = "ABA_ACH"
	PayeeAccountBankIdentifierTypeABAWIRE  PayeeAccountBankIdentifierType = "ABA_WIRE"
	PayeeAccountBankIdentifierTypeBSB      PayeeAccountBankIdentifierType = "BSB"
	PayeeAccountBankIdentifierTypeIBAN     PayeeAccountBankIdentifierType = "IBAN"
	PayeeAccountBankIdentifierTypeSORTCODE PayeeAccountBankIdentifierType = "SORT_CODE"
	PayeeAccountBankIdentifierTypeSWIFT    PayeeAccountBankIdentifierType = "SWIFT"
)

// Defines values for PayeeAccountCountryCode.
const (
	PayeeAccountCountryCodeAC        PayeeAccountCountryCode = "AC"
	PayeeAccountCountryCodeAD        PayeeAccountCountryCode = "AD"
	PayeeAccountCountryCodeAE        PayeeAccountCountryCode = "AE"
	PayeeAccountCountryCodeAF        PayeeAccountCountryCode = "AF"
	PayeeAccountCountryCodeAG        PayeeAccountCountryCode = "AG"
	PayeeAccountCountryCodeAI        PayeeAccountCountryCode = "AI"
	PayeeAccountCountryCodeAL        PayeeAccountCountryCode = "AL"
	PayeeAccountCountryCodeAM        PayeeAccountCountryCode = "AM"
	PayeeAccountCountryCodeAN        PayeeAccountCountryCode = "AN"
	PayeeAccountCountryCodeAO        PayeeAccountCountryCode = "AO"
	PayeeAccountCountryCodeAQ        PayeeAccountCountryCode = "AQ"
	PayeeAccountCountryCodeAR        PayeeAccountCountryCode = "AR"
	PayeeAccountCountryCodeAS        PayeeAccountCountryCode = "AS"
	PayeeAccountCountryCodeAT        PayeeAccountCountryCode = "AT"
	PayeeAccountCountryCodeAU        PayeeAccountCountryCode = "AU"
	PayeeAccountCountryCodeAW        PayeeAccountCountryCode = "AW"
	PayeeAccountCountryCodeAX        PayeeAccountCountryCode = "AX"
	PayeeAccountCountryCodeAZ        PayeeAccountCountryCode = "AZ"
	PayeeAccountCountryCodeBA        PayeeAccountCountryCode = "BA"
	PayeeAccountCountryCodeBB        PayeeAccountCountryCode = "BB"
	PayeeAccountCountryCodeBD        PayeeAccountCountryCode = "BD"
	PayeeAccountCountryCodeBE        PayeeAccountCountryCode = "BE"
	PayeeAccountCountryCodeBF        PayeeAccountCountryCode = "BF"
	PayeeAccountCountryCodeBG        PayeeAccountCountryCode = "BG"
	PayeeAccountCountryCodeBH        PayeeAccountCountryCode = "BH"
	PayeeAccountCountryCodeBI        PayeeAccountCountryCode = "BI"
	PayeeAccountCountryCodeBJ        PayeeAccountCountryCode = "BJ"
	PayeeAccountCountryCodeBL        PayeeAccountCountryCode = "BL"
	PayeeAccountCountryCodeBM        PayeeAccountCountryCode = "BM"
	PayeeAccountCountryCodeBN        PayeeAccountCountryCode = "BN"
	PayeeAccountCountryCodeBO        PayeeAccountCountryCode = "BO"
	PayeeAccountCountryCodeBQ        PayeeAccountCountryCode = "BQ"
	PayeeAccountCountryCodeBR        PayeeAccountCountryCode = "BR"
	PayeeAccountCountryCodeBS        PayeeAccountCountryCode = "BS"
	PayeeAccountCountryCodeBT        PayeeAccountCountryCode = "BT"
	PayeeAccountCountryCodeBU        PayeeAccountCountryCode = "BU"
	PayeeAccountCountryCodeBV        PayeeAccountCountryCode = "BV"
	PayeeAccountCountryCodeBW        PayeeAccountCountryCode = "BW"
	PayeeAccountCountryCodeBY        PayeeAccountCountryCode = "BY"
	PayeeAccountCountryCodeBZ        PayeeAccountCountryCode = "BZ"
	PayeeAccountCountryCodeCA        PayeeAccountCountryCode = "CA"
	PayeeAccountCountryCodeCC        PayeeAccountCountryCode = "CC"
	PayeeAccountCountryCodeCD        PayeeAccountCountryCode = "CD"
	PayeeAccountCountryCodeCF        PayeeAccountCountryCode = "CF"
	PayeeAccountCountryCodeCG        PayeeAccountCountryCode = "CG"
	PayeeAccountCountryCodeCH        PayeeAccountCountryCode = "CH"
	PayeeAccountCountryCodeCI        PayeeAccountCountryCode = "CI"
	PayeeAccountCountryCodeCK        PayeeAccountCountryCode = "CK"
	PayeeAccountCountryCodeCL        PayeeAccountCountryCode = "CL"
	PayeeAccountCountryCodeCM        PayeeAccountCountryCode = "CM"
	PayeeAccountCountryCodeCN        PayeeAccountCountryCode = "CN"
	PayeeAccountCountryCodeCO        PayeeAccountCountryCode = "CO"
	PayeeAccountCountryCodeCP        PayeeAccountCountryCode = "CP"
	PayeeAccountCountryCodeCR        PayeeAccountCountryCode = "CR"
	PayeeAccountCountryCodeCS        PayeeAccountCountryCode = "CS"
	PayeeAccountCountryCodeCU        PayeeAccountCountryCode = "CU"
	PayeeAccountCountryCodeCV        PayeeAccountCountryCode = "CV"
	PayeeAccountCountryCodeCW        PayeeAccountCountryCode = "CW"
	PayeeAccountCountryCodeCX        PayeeAccountCountryCode = "CX"
	PayeeAccountCountryCodeCY        PayeeAccountCountryCode = "CY"
	PayeeAccountCountryCodeCZ        PayeeAccountCountryCode = "CZ"
	PayeeAccountCountryCodeDE        PayeeAccountCountryCode = "DE"
	PayeeAccountCountryCodeDG        PayeeAccountCountryCode = "DG"
	PayeeAccountCountryCodeDJ        PayeeAccountCountryCode = "DJ"
	PayeeAccountCountryCodeDK        PayeeAccountCountryCode = "DK"
	PayeeAccountCountryCodeDM        PayeeAccountCountryCode = "DM"
	PayeeAccountCountryCodeDO        PayeeAccountCountryCode = "DO"
	PayeeAccountCountryCodeDZ        PayeeAccountCountryCode = "DZ"
	PayeeAccountCountryCodeEA        PayeeAccountCountryCode = "EA"
	PayeeAccountCountryCodeEC        PayeeAccountCountryCode = "EC"
	PayeeAccountCountryCodeEE        PayeeAccountCountryCode = "EE"
	PayeeAccountCountryCodeEG        PayeeAccountCountryCode = "EG"
	PayeeAccountCountryCodeEH        PayeeAccountCountryCode = "EH"
	PayeeAccountCountryCodeER        PayeeAccountCountryCode = "ER"
	PayeeAccountCountryCodeES        PayeeAccountCountryCode = "ES"
	PayeeAccountCountryCodeET        PayeeAccountCountryCode = "ET"
	PayeeAccountCountryCodeEU        PayeeAccountCountryCode = "EU"
	PayeeAccountCountryCodeEZ        PayeeAccountCountryCode = "EZ"
	PayeeAccountCountryCodeFI        PayeeAccountCountryCode = "FI"
	PayeeAccountCountryCodeFJ        PayeeAccountCountryCode = "FJ"
	PayeeAccountCountryCodeFK        PayeeAccountCountryCode = "FK"
	PayeeAccountCountryCodeFM        PayeeAccountCountryCode = "FM"
	PayeeAccountCountryCodeFO        PayeeAccountCountryCode = "FO"
	PayeeAccountCountryCodeFR        PayeeAccountCountryCode = "FR"
	PayeeAccountCountryCodeFX        PayeeAccountCountryCode = "FX"
	PayeeAccountCountryCodeGA        PayeeAccountCountryCode = "GA"
	PayeeAccountCountryCodeGB        PayeeAccountCountryCode = "GB"
	PayeeAccountCountryCodeGD        PayeeAccountCountryCode = "GD"
	PayeeAccountCountryCodeGE        PayeeAccountCountryCode = "GE"
	PayeeAccountCountryCodeGF        PayeeAccountCountryCode = "GF"
	PayeeAccountCountryCodeGG        PayeeAccountCountryCode = "GG"
	PayeeAccountCountryCodeGH        PayeeAccountCountryCode = "GH"
	PayeeAccountCountryCodeGI        PayeeAccountCountryCode = "GI"
	PayeeAccountCountryCodeGL        PayeeAccountCountryCode = "GL"
	PayeeAccountCountryCodeGM        PayeeAccountCountryCode = "GM"
	PayeeAccountCountryCodeGN        PayeeAccountCountryCode = "GN"
	PayeeAccountCountryCodeGP        PayeeAccountCountryCode = "GP"
	PayeeAccountCountryCodeGQ        PayeeAccountCountryCode = "GQ"
	PayeeAccountCountryCodeGR        PayeeAccountCountryCode = "GR"
	PayeeAccountCountryCodeGS        PayeeAccountCountryCode = "GS"
	PayeeAccountCountryCodeGT        PayeeAccountCountryCode = "GT"
	PayeeAccountCountryCodeGU        PayeeAccountCountryCode = "GU"
	PayeeAccountCountryCodeGW        PayeeAccountCountryCode = "GW"
	PayeeAccountCountryCodeGY        PayeeAccountCountryCode = "GY"
	PayeeAccountCountryCodeHK        PayeeAccountCountryCode = "HK"
	PayeeAccountCountryCodeHM        PayeeAccountCountryCode = "HM"
	PayeeAccountCountryCodeHN        PayeeAccountCountryCode = "HN"
	PayeeAccountCountryCodeHR        PayeeAccountCountryCode = "HR"
	PayeeAccountCountryCodeHT        PayeeAccountCountryCode = "HT"
	PayeeAccountCountryCodeHU        PayeeAccountCountryCode = "HU"
	PayeeAccountCountryCodeIC        PayeeAccountCountryCode = "IC"
	PayeeAccountCountryCodeID        PayeeAccountCountryCode = "ID"
	PayeeAccountCountryCodeIE        PayeeAccountCountryCode = "IE"
	PayeeAccountCountryCodeIL        PayeeAccountCountryCode = "IL"
	PayeeAccountCountryCodeIM        PayeeAccountCountryCode = "IM"
	PayeeAccountCountryCodeIN        PayeeAccountCountryCode = "IN"
	PayeeAccountCountryCodeIO        PayeeAccountCountryCode = "IO"
	PayeeAccountCountryCodeIQ        PayeeAccountCountryCode = "IQ"
	PayeeAccountCountryCodeIR        PayeeAccountCountryCode = "IR"
	PayeeAccountCountryCodeIS        PayeeAccountCountryCode = "IS"
	PayeeAccountCountryCodeIT        PayeeAccountCountryCode = "IT"
	PayeeAccountCountryCodeJE        PayeeAccountCountryCode = "JE"
	PayeeAccountCountryCodeJM        PayeeAccountCountryCode = "JM"
	PayeeAccountCountryCodeJO        PayeeAccountCountryCode = "JO"
	PayeeAccountCountryCodeJP        PayeeAccountCountryCode = "JP"
	PayeeAccountCountryCodeKE        PayeeAccountCountryCode = "KE"
	PayeeAccountCountryCodeKG        PayeeAccountCountryCode = "KG"
	PayeeAccountCountryCodeKH        PayeeAccountCountryCode = "KH"
	PayeeAccountCountryCodeKI        PayeeAccountCountryCode = "KI"
	PayeeAccountCountryCodeKM        PayeeAccountCountryCode = "KM"
	PayeeAccountCountryCodeKN        PayeeAccountCountryCode = "KN"
	PayeeAccountCountryCodeKP        PayeeAccountCountryCode = "KP"
	PayeeAccountCountryCodeKR        PayeeAccountCountryCode = "KR"
	PayeeAccountCountryCodeKW        PayeeAccountCountryCode = "KW"
	PayeeAccountCountryCodeKY        PayeeAccountCountryCode = "KY"
	PayeeAccountCountryCodeKZ        PayeeAccountCountryCode = "KZ"
	PayeeAccountCountryCodeLA        PayeeAccountCountryCode = "LA"
	PayeeAccountCountryCodeLB        PayeeAccountCountryCode = "LB"
	PayeeAccountCountryCodeLC        PayeeAccountCountryCode = "LC"
	PayeeAccountCountryCodeLI        PayeeAccountCountryCode = "LI"
	PayeeAccountCountryCodeLK        PayeeAccountCountryCode = "LK"
	PayeeAccountCountryCodeLR        PayeeAccountCountryCode = "LR"
	PayeeAccountCountryCodeLS        PayeeAccountCountryCode = "LS"
	PayeeAccountCountryCodeLT        PayeeAccountCountryCode = "LT"
	PayeeAccountCountryCodeLU        PayeeAccountCountryCode = "LU"
	PayeeAccountCountryCodeLV        PayeeAccountCountryCode = "LV"
	PayeeAccountCountryCodeLY        PayeeAccountCountryCode = "LY"
	PayeeAccountCountryCodeMA        PayeeAccountCountryCode = "MA"
	PayeeAccountCountryCodeMC        PayeeAccountCountryCode = "MC"
	PayeeAccountCountryCodeMD        PayeeAccountCountryCode = "MD"
	PayeeAccountCountryCodeME        PayeeAccountCountryCode = "ME"
	PayeeAccountCountryCodeMF        PayeeAccountCountryCode = "MF"
	PayeeAccountCountryCodeMG        PayeeAccountCountryCode = "MG"
	PayeeAccountCountryCodeMH        PayeeAccountCountryCode = "MH"
	PayeeAccountCountryCodeMK        PayeeAccountCountryCode = "MK"
	PayeeAccountCountryCodeML        PayeeAccountCountryCode = "ML"
	PayeeAccountCountryCodeMM        PayeeAccountCountryCode = "MM"
	PayeeAccountCountryCodeMN        PayeeAccountCountryCode = "MN"
	PayeeAccountCountryCodeMO        PayeeAccountCountryCode = "MO"
	PayeeAccountCountryCodeMP        PayeeAccountCountryCode = "MP"
	PayeeAccountCountryCodeMQ        PayeeAccountCountryCode = "MQ"
	PayeeAccountCountryCodeMR        PayeeAccountCountryCode = "MR"
	PayeeAccountCountryCodeMS        PayeeAccountCountryCode = "MS"
	PayeeAccountCountryCodeMT        PayeeAccountCountryCode = "MT"
	PayeeAccountCountryCodeMU        PayeeAccountCountryCode = "MU"
	PayeeAccountCountryCodeMV        PayeeAccountCountryCode = "MV"
	PayeeAccountCountryCodeMW        PayeeAccountCountryCode = "MW"
	PayeeAccountCountryCodeMX        PayeeAccountCountryCode = "MX"
	PayeeAccountCountryCodeMY        PayeeAccountCountryCode = "MY"
	PayeeAccountCountryCodeMZ        PayeeAccountCountryCode = "MZ"
	PayeeAccountCountryCodeNA        PayeeAccountCountryCode = "NA"
	PayeeAccountCountryCodeNC        PayeeAccountCountryCode = "NC"
	PayeeAccountCountryCodeNE        PayeeAccountCountryCode = "NE"
	PayeeAccountCountryCodeNF        PayeeAccountCountryCode = "NF"
	PayeeAccountCountryCodeNG        PayeeAccountCountryCode = "NG"
	PayeeAccountCountryCodeNI        PayeeAccountCountryCode = "NI"
	PayeeAccountCountryCodeNL        PayeeAccountCountryCode = "NL"
	PayeeAccountCountryCodeNO        PayeeAccountCountryCode = "NO"
	PayeeAccountCountryCodeNP        PayeeAccountCountryCode = "NP"
	PayeeAccountCountryCodeNR        PayeeAccountCountryCode = "NR"
	PayeeAccountCountryCodeNT        PayeeAccountCountryCode = "NT"
	PayeeAccountCountryCodeNU        PayeeAccountCountryCode = "NU"
	PayeeAccountCountryCodeNZ        PayeeAccountCountryCode = "NZ"
	PayeeAccountCountryCodeOM        PayeeAccountCountryCode = "OM"
	PayeeAccountCountryCodePA        PayeeAccountCountryCode = "PA"
	PayeeAccountCountryCodePE        PayeeAccountCountryCode = "PE"
	PayeeAccountCountryCodePF        PayeeAccountCountryCode = "PF"
	PayeeAccountCountryCodePG        PayeeAccountCountryCode = "PG"
	PayeeAccountCountryCodePH        PayeeAccountCountryCode = "PH"
	PayeeAccountCountryCodePK        PayeeAccountCountryCode = "PK"
	PayeeAccountCountryCodePL        PayeeAccountCountryCode = "PL"
	PayeeAccountCountryCodePM        PayeeAccountCountryCode = "PM"
	PayeeAccountCountryCodePN        PayeeAccountCountryCode = "PN"
	PayeeAccountCountryCodePR        PayeeAccountCountryCode = "PR"
	PayeeAccountCountryCodePS        PayeeAccountCountryCode = "PS"
	PayeeAccountCountryCodePT        PayeeAccountCountryCode = "PT"
	PayeeAccountCountryCodePW        PayeeAccountCountryCode = "PW"
	PayeeAccountCountryCodePY        PayeeAccountCountryCode = "PY"
	PayeeAccountCountryCodeQA        PayeeAccountCountryCode = "QA"
	PayeeAccountCountryCodeRE        PayeeAccountCountryCode = "RE"
	PayeeAccountCountryCodeRO        PayeeAccountCountryCode = "RO"
	PayeeAccountCountryCodeRS        PayeeAccountCountryCode = "RS"
	PayeeAccountCountryCodeRU        PayeeAccountCountryCode = "RU"
	PayeeAccountCountryCodeRW        PayeeAccountCountryCode = "RW"
	PayeeAccountCountryCodeSA        PayeeAccountCountryCode = "SA"
	PayeeAccountCountryCodeSB        PayeeAccountCountryCode = "SB"
	PayeeAccountCountryCodeSC        PayeeAccountCountryCode = "SC"
	PayeeAccountCountryCodeSD        PayeeAccountCountryCode = "SD"
	PayeeAccountCountryCodeSE        PayeeAccountCountryCode = "SE"
	PayeeAccountCountryCodeSF        PayeeAccountCountryCode = "SF"
	PayeeAccountCountryCodeSG        PayeeAccountCountryCode = "SG"
	PayeeAccountCountryCodeSH        PayeeAccountCountryCode = "SH"
	PayeeAccountCountryCodeSI        PayeeAccountCountryCode = "SI"
	PayeeAccountCountryCodeSJ        PayeeAccountCountryCode = "SJ"
	PayeeAccountCountryCodeSK        PayeeAccountCountryCode = "SK"
	PayeeAccountCountryCodeSL        PayeeAccountCountryCode = "SL"
	PayeeAccountCountryCodeSM        PayeeAccountCountryCode = "SM"
	PayeeAccountCountryCodeSN        PayeeAccountCountryCode = "SN"
	PayeeAccountCountryCodeSO        PayeeAccountCountryCode = "SO"
	PayeeAccountCountryCodeSR        PayeeAccountCountryCode = "SR"
	PayeeAccountCountryCodeSS        PayeeAccountCountryCode = "SS"
	PayeeAccountCountryCodeST        PayeeAccountCountryCode = "ST"
	PayeeAccountCountryCodeSU        PayeeAccountCountryCode = "SU"
	PayeeAccountCountryCodeSV        PayeeAccountCountryCode = "SV"
	PayeeAccountCountryCodeSX        PayeeAccountCountryCode = "SX"
	PayeeAccountCountryCodeSY        PayeeAccountCountryCode = "SY"
	PayeeAccountCountryCodeSZ        PayeeAccountCountryCode = "SZ"
	PayeeAccountCountryCodeTA        PayeeAccountCountryCode = "TA"
	PayeeAccountCountryCodeTC        PayeeAccountCountryCode = "TC"
	PayeeAccountCountryCodeTD        PayeeAccountCountryCode = "TD"
	PayeeAccountCountryCodeTF        PayeeAccountCountryCode = "TF"
	PayeeAccountCountryCodeTG        PayeeAccountCountryCode = "TG"
	PayeeAccountCountryCodeTH        PayeeAccountCountryCode = "TH"
	PayeeAccountCountryCodeTJ        PayeeAccountCountryCode = "TJ"
	PayeeAccountCountryCodeTK        PayeeAccountCountryCode = "TK"
	PayeeAccountCountryCodeTL        PayeeAccountCountryCode = "TL"
	PayeeAccountCountryCodeTM        PayeeAccountCountryCode = "TM"
	PayeeAccountCountryCodeTN        PayeeAccountCountryCode = "TN"
	PayeeAccountCountryCodeTO        PayeeAccountCountryCode = "TO"
	PayeeAccountCountryCodeTP        PayeeAccountCountryCode = "TP"
	PayeeAccountCountryCodeTR        PayeeAccountCountryCode = "TR"
	PayeeAccountCountryCodeTT        PayeeAccountCountryCode = "TT"
	PayeeAccountCountryCodeTV        PayeeAccountCountryCode = "TV"
	PayeeAccountCountryCodeTW        PayeeAccountCountryCode = "TW"
	PayeeAccountCountryCodeTZ        PayeeAccountCountryCode = "TZ"
	PayeeAccountCountryCodeUA        PayeeAccountCountryCode = "UA"
	PayeeAccountCountryCodeUG        PayeeAccountCountryCode = "UG"
	PayeeAccountCountryCodeUK        PayeeAccountCountryCode = "UK"
	PayeeAccountCountryCodeUM        PayeeAccountCountryCode = "UM"
	PayeeAccountCountryCodeUNDEFINED PayeeAccountCountryCode = "UNDEFINED"
	PayeeAccountCountryCodeUS        PayeeAccountCountryCode = "US"
	PayeeAccountCountryCodeUY        PayeeAccountCountryCode = "UY"
	PayeeAccountCountryCodeUZ        PayeeAccountCountryCode = "UZ"
	PayeeAccountCountryCodeVA        PayeeAccountCountryCode = "VA"
	PayeeAccountCountryCodeVC        PayeeAccountCountryCode = "VC"
	PayeeAccountCountryCodeVE        PayeeAccountCountryCode = "VE"
	PayeeAccountCountryCodeVG        PayeeAccountCountryCode = "VG"
	PayeeAccountCountryCodeVI        PayeeAccountCountryCode = "VI"
	PayeeAccountCountryCodeVN        PayeeAccountCountryCode = "VN"
	PayeeAccountCountryCodeVU        PayeeAccountCountryCode = "VU"
	PayeeAccountCountryCodeWF        PayeeAccountCountryCode = "WF"
	PayeeAccountCountryCodeWS        PayeeAccountCountryCode = "WS"
	PayeeAccountCountryCodeXI        PayeeAccountCountryCode = "XI"
	PayeeAccountCountryCodeXK        PayeeAccountCountryCode = "XK"
	PayeeAccountCountryCodeXU        PayeeAccountCountryCode = "XU"
	PayeeAccountCountryCodeXX        PayeeAccountCountryCode = "XX"
	PayeeAccountCountryCodeYE        PayeeAccountCountryCode = "YE"
	PayeeAccountCountryCodeYT        PayeeAccountCountryCode = "YT"
	PayeeAccountCountryCodeYU        PayeeAccountCountryCode = "YU"
	PayeeAccountCountryCodeZA        PayeeAccountCountryCode = "ZA"
	PayeeAccountCountryCodeZM        PayeeAccountCountryCode = "ZM"
	PayeeAccountCountryCodeZR        PayeeAccountCountryCode = "ZR"
	PayeeAccountCountryCodeZW        PayeeAccountCountryCode = "ZW"
)

// Defines values for PayeeAccountPayeeChannelType.
const (
	BANKACCOUNT PayeeAccountPayeeChannelType = "BANK_ACCOUNT"
	NEARBY      PayeeAccountPayeeChannelType = "NEARBY"
	SETTLEUP    PayeeAccountPayeeChannelType = "SETTLE_UP"
)

// Defines values for PayeeAccountCreationRequestBankIdentifierType.
const (
	PayeeAccountCreationRequestBankIdentifierTypeABA      PayeeAccountCreationRequestBankIdentifierType = "ABA"
	PayeeAccountCreationRequestBankIdentifierTypeABAACH   PayeeAccountCreationRequestBankIdentifierType = "ABA_ACH"
	PayeeAccountCreationRequestBankIdentifierTypeABAWIRE  PayeeAccountCreationRequestBankIdentifierType = "ABA_WIRE"
	PayeeAccountCreationRequestBankIdentifierTypeBSB      PayeeAccountCreationRequestBankIdentifierType = "BSB"
	PayeeAccountCreationRequestBankIdentifierTypeIBAN     PayeeAccountCreationRequestBankIdentifierType = "IBAN"
	PayeeAccountCreationRequestBankIdentifierTypeSORTCODE PayeeAccountCreationRequestBankIdentifierType = "SORT_CODE"
	PayeeAccountCreationRequestBankIdentifierTypeSWIFT    PayeeAccountCreationRequestBankIdentifierType = "SWIFT"
)

// Defines values for PayeeCreationRequestPayeeType.
const (
	PayeeCreationRequestPayeeTypeBUSINESS   PayeeCreationRequestPayeeType = "BUSINESS"
	PayeeCreationRequestPayeeTypeINDIVIDUAL PayeeCreationRequestPayeeType = "INDIVIDUAL"
)

// Defines values for PayeePaymentSpendingCategory.
const (
	PayeePaymentSpendingCategoryADMIN                 PayeePaymentSpendingCategory = "ADMIN"
	PayeePaymentSpendingCategoryBANKCHARGES           PayeePaymentSpendingCategory = "BANK_CHARGES"
	PayeePaymentSpendingCategoryBIKE                  PayeePaymentSpendingCategory = "BIKE"
	PayeePaymentSpendingCategoryBILLSANDSERVICES      PayeePaymentSpendingCategory = "BILLS_AND_SERVICES"
	PayeePaymentSpendingCategoryBUCKETLIST            PayeePaymentSpendingCategory = "BUCKET_LIST"
	PayeePaymentSpendingCategoryBUSINESSENTERTAINMENT PayeePaymentSpendingCategory = "BUSINESS_ENTERTAINMENT"
	PayeePaymentSpendingCategoryCAR                   PayeePaymentSpendingCategory = "CAR"
	PayeePaymentSpendingCategoryCASH                  PayeePaymentSpendingCategory = "CASH"
	PayeePaymentSpendingCategoryCELEBRATION           PayeePaymentSpendingCategory = "CELEBRATION"
	PayeePaymentSpendingCategoryCHARITY               PayeePaymentSpendingCategory = "CHARITY"
	PayeePaymentSpendingCategoryCHILDREN              PayeePaymentSpendingCategory = "CHILDREN"
	PayeePaymentSpendingCategoryCLIENTREFUNDS         PayeePaymentSpendingCategory = "CLIENT_REFUNDS"
	PayeePaymentSpendingCategoryCLOTHES               PayeePaymentSpendingCategory = "CLOTHES"
	PayeePaymentSpendingCategoryCOFFEE                PayeePaymentSpendingCategory = "COFFEE"
	PayeePaymentSpendingCategoryCORPORATIONTAX        PayeePaymentSpendingCategory = "CORPORATION_TAX"
	PayeePaymentSpendingCategoryDEBTREPAYMENT         PayeePaymentSpendingCategory = "DEBT_REPAYMENT"
	PayeePaymentSpendingCategoryDIRECTORSWAGES        PayeePaymentSpendingCategory = "DIRECTORS_WAGES"
	PayeePaymentSpendingCategoryDIVIDENDS             PayeePaymentSpendingCategory = "DIVIDENDS"
	PayeePaymentSpendingCategoryDIY                   PayeePaymentSpendingCategory = "DIY"
	PayeePaymentSpendingCategoryDRINKS                PayeePaymentSpendingCategory = "DRINKS"
	PayeePaymentSpendingCategoryEATINGOUT             PayeePaymentSpendingCategory = "EATING_OUT"
	PayeePaymentSpendingCategoryEDUCATION             PayeePaymentSpendingCategory = "EDUCATION"
	PayeePaymentSpendingCategoryEMERGENCY             PayeePaymentSpendingCategory = "EMERGENCY"
	PayeePaymentSpendingCategoryENTERTAINMENT         PayeePaymentSpendingCategory = "ENTERTAINMENT"
	PayeePaymentSpendingCategoryEQUIPMENT             PayeePaymentSpendingCategory = "EQUIPMENT"
	PayeePaymentSpendingCategoryESSENTIALSPEND        PayeePaymentSpendingCategory = "ESSENTIAL_SPEND"
	PayeePaymentSpendingCategoryEXPENSES              PayeePaymentSpendingCategory = "EXPENSES"
	PayeePaymentSpendingCategoryFAMILY                PayeePaymentSpendingCategory = "FAMILY"
	PayeePaymentSpendingCategoryFITNESS               PayeePaymentSpendingCategory = "FITNESS"
	PayeePaymentSpendingCategoryFOODANDDRINK          PayeePaymentSpendingCategory = "FOOD_AND_DRINK"
	PayeePaymentSpendingCategoryFUEL                  PayeePaymentSpendingCategory = "FUEL"
	PayeePaymentSpendingCategoryGAMBLING              PayeePaymentSpendingCategory = "GAMBLING"
	PayeePaymentSpendingCategoryGAMING                PayeePaymentSpendingCategory = "GAMING"
	PayeePaymentSpendingCategoryGARDEN                PayeePaymentSpendingCategory = "GARDEN"
	PayeePaymentSpendingCategoryGENERAL               PayeePaymentSpendingCategory = "GENERAL"
	PayeePaymentSpendingCategoryGIFTS                 PayeePaymentSpendingCategory = "GIFTS"
	PayeePaymentSpendingCategoryGROCERIES             PayeePaymentSpendingCategory = "GROCERIES"
	PayeePaymentSpendingCategoryHOBBY                 PayeePaymentSpendingCategory = "HOBBY"
	PayeePaymentSpendingCategoryHOLIDAYS              PayeePaymentSpendingCategory = "HOLIDAYS"
	PayeePaymentSpendingCategoryHOME                  PayeePaymentSpendingCategory = "HOME"
	PayeePaymentSpendingCategoryIMPULSEBUY            PayeePaymentSpendingCategory = "IMPULSE_BUY"
	PayeePaymentSpendingCategoryINCOME                PayeePaymentSpendingCategory = "INCOME"
	PayeePaymentSpendingCategoryINSURANCE             PayeePaymentSpendingCategory = "INSURANCE"
	PayeePaymentSpendingCategoryINTERESTPAYMENTS      PayeePaymentSpendingCategory = "INTEREST_PAYMENTS"
	PayeePaymentSpendingCategoryINVENTORY             PayeePaymentSpendingCategory = "INVENTORY"
	PayeePaymentSpendingCategoryINVESTMENTCAPITAL     PayeePaymentSpendingCategory = "INVESTMENT_CAPITAL"
	PayeePaymentSpendingCategoryINVESTMENTS           PayeePaymentSpendingCategory = "INVESTMENTS"
	PayeePaymentSpendingCategoryLIFESTYLE             PayeePaymentSpendingCategory = "LIFESTYLE"
	PayeePaymentSpendingCategoryLOANPRINCIPAL         PayeePaymentSpendingCategory = "LOAN_PRINCIPAL"
	PayeePaymentSpendingCategoryMAINTENANCEANDREPAIRS PayeePaymentSpendingCategory = "MAINTENANCE_AND_REPAIRS"
	PayeePaymentSpendingCategoryMARKETING             PayeePaymentSpendingCategory = "MARKETING"
	PayeePaymentSpendingCategoryMEDICAL               PayeePaymentSpendingCategory = "MEDICAL"
	PayeePaymentSpendingCategoryMORTGAGE              PayeePaymentSpendingCategory = "MORTGAGE"
	PayeePaymentSpendingCategoryNONE                  PayeePaymentSpendingCategory = "NONE"
	PayeePaymentSpendingCategoryNONESSENTIALSPEND     PayeePaymentSpendingCategory = "NON_ESSENTIAL_SPEND"
	PayeePaymentSpendingCategoryOTHER                 PayeePaymentSpendingCategory = "OTHER"
	PayeePaymentSpendingCategoryOTHERINCOME           PayeePaymentSpendingCategory = "OTHER_INCOME"
	PayeePaymentSpendingCategoryPAYMENTS              PayeePaymentSpendingCategory = "PAYMENTS"
	PayeePaymentSpendingCategoryPERSONAL              PayeePaymentSpendingCategory = "PERSONAL"
	PayeePaymentSpendingCategoryPERSONALCARE          PayeePaymentSpendingCategory = "PERSONAL_CARE"
	PayeePaymentSpendingCategoryPERSONALTRANSFERS     PayeePaymentSpendingCategory = "PERSONAL_TRANSFERS"
	PayeePaymentSpendingCategoryPETS                  PayeePaymentSpendingCategory = "PETS"
	PayeePaymentSpendingCategoryPHONEANDINTERNET      PayeePaymentSpendingCategory = "PHONE_AND_INTERNET"
	PayeePaymentSpendingCategoryPROFESSIONALSERVICES  PayeePaymentSpendingCategory = "PROFESSIONAL_SERVICES"
	PayeePaymentSpendingCategoryPROJECTS              PayeePaymentSpendingCategory = "PROJECTS"
	PayeePaymentSpendingCategoryRELATIONSHIPS         PayeePaymentSpendingCategory = "RELATIONSHIPS"
	PayeePaymentSpendingCategoryRENT                  PayeePaymentSpendingCategory = "RENT"
	PayeePaymentSpendingCategoryREPAIRSANDMAINTENANCE PayeePaymentSpendingCategory = "REPAIRS_AND_MAINTENANCE"
	PayeePaymentSpendingCategoryREVENUE               PayeePaymentSpendingCategory = "REVENUE"
	PayeePaymentSpendingCategorySAVING                PayeePaymentSpendingCategory = "SAVING"
	PayeePaymentSpendingCategorySELFASSESSMENTTAX     PayeePaymentSpendingCategory = "SELF_ASSESSMENT_TAX"
	PayeePaymentSpendingCategorySHOPPING              PayeePaymentSpendingCategory = "SHOPPING"
	PayeePaymentSpendingCategorySTAFF                 PayeePaymentSpendingCategory = "STAFF"
	PayeePaymentSpendingCategorySUBSCRIPTIONS         PayeePaymentSpendingCategory = "SUBSCRIPTIONS"
	PayeePaymentSpendingCategoryTAKEAWAY              PayeePaymentSpendingCategory = "TAKEAWAY"
	PayeePaymentSpendingCategoryTAXI                  PayeePaymentSpendingCategory = "TAXI"
	PayeePaymentSpendingCategoryTRANSFERS             PayeePaymentSpendingCategory = "TRANSFERS"
	PayeePaymentSpendingCategoryTRANSPORT             PayeePaymentSpendingCategory = "TRANSPORT"
	PayeePaymentSpendingCategoryTRAVEL                PayeePaymentSpendingCategory = "TRAVEL"
	PayeePaymentSpendingCategoryTREATS                PayeePaymentSpendingCategory = "TREATS"
	PayeePaymentSpendingCategoryVAT                   PayeePaymentSpendingCategory = "VAT"
	PayeePaymentSpendingCategoryVEHICLES              PayeePaymentSpendingCategory = "VEHICLES"
	PayeePaymentSpendingCategoryWEDDING               PayeePaymentSpendingCategory = "WEDDING"
	PayeePaymentSpendingCategoryWELLBEING             PayeePaymentSpendingCategory = "WELLBEING"
	PayeePaymentSpendingCategoryWORKPLACE             PayeePaymentSpendingCategory = "WORKPLACE"
)

// Defines values for PaymentOrderV2SpendingCategory.
const (
	PaymentOrderV2SpendingCategoryADMIN                 PaymentOrderV2SpendingCategory = "ADMIN"
	PaymentOrderV2SpendingCategoryBANKCHARGES           PaymentOrderV2SpendingCategory = "BANK_CHARGES"
	PaymentOrderV2SpendingCategoryBIKE                  PaymentOrderV2SpendingCategory = "BIKE"
	PaymentOrderV2SpendingCategoryBILLSANDSERVICES      PaymentOrderV2SpendingCategory = "BILLS_AND_SERVICES"
	PaymentOrderV2SpendingCategoryBUCKETLIST            PaymentOrderV2SpendingCategory = "BUCKET_LIST"
	PaymentOrderV2SpendingCategoryBUSINESSENTERTAINMENT PaymentOrderV2SpendingCategory = "BUSINESS_ENTERTAINMENT"
	PaymentOrderV2SpendingCategoryCAR                   PaymentOrderV2SpendingCategory = "CAR"
	PaymentOrderV2SpendingCategoryCASH                  PaymentOrderV2SpendingCategory = "CASH"
	PaymentOrderV2SpendingCategoryCELEBRATION           PaymentOrderV2SpendingCategory = "CELEBRATION"
	PaymentOrderV2SpendingCategoryCHARITY               PaymentOrderV2SpendingCategory = "CHARITY"
	PaymentOrderV2SpendingCategoryCHILDREN              PaymentOrderV2SpendingCategory = "CHILDREN"
	PaymentOrderV2SpendingCategoryCLIENTREFUNDS         PaymentOrderV2SpendingCategory = "CLIENT_REFUNDS"
	PaymentOrderV2SpendingCategoryCLOTHES               PaymentOrderV2SpendingCategory = "CLOTHES"
	PaymentOrderV2SpendingCategoryCOFFEE                PaymentOrderV2SpendingCategory = "COFFEE"
	PaymentOrderV2SpendingCategoryCORPORATIONTAX        PaymentOrderV2SpendingCategory = "CORPORATION_TAX"
	PaymentOrderV2SpendingCategoryDEBTREPAYMENT         PaymentOrderV2SpendingCategory = "DEBT_REPAYMENT"
	PaymentOrderV2SpendingCategoryDIRECTORSWAGES        PaymentOrderV2SpendingCategory = "DIRECTORS_WAGES"
	PaymentOrderV2SpendingCategoryDIVIDENDS             PaymentOrderV2SpendingCategory = "DIVIDENDS"
	PaymentOrderV2SpendingCategoryDIY                   PaymentOrderV2SpendingCategory = "DIY"
	PaymentOrderV2SpendingCategoryDRINKS                PaymentOrderV2SpendingCategory = "DRINKS"
	PaymentOrderV2SpendingCategoryEATINGOUT             PaymentOrderV2SpendingCategory = "EATING_OUT"
	PaymentOrderV2SpendingCategoryEDUCATION             PaymentOrderV2SpendingCategory = "EDUCATION"
	PaymentOrderV2SpendingCategoryEMERGENCY             PaymentOrderV2SpendingCategory = "EMERGENCY"
	PaymentOrderV2SpendingCategoryENTERTAINMENT         PaymentOrderV2SpendingCategory = "ENTERTAINMENT"
	PaymentOrderV2SpendingCategoryEQUIPMENT             PaymentOrderV2SpendingCategory = "EQUIPMENT"
	PaymentOrderV2SpendingCategoryESSENTIALSPEND        PaymentOrderV2SpendingCategory = "ESSENTIAL_SPEND"
	PaymentOrderV2SpendingCategoryEXPENSES              PaymentOrderV2SpendingCategory = "EXPENSES"
	PaymentOrderV2SpendingCategoryFAMILY                PaymentOrderV2SpendingCategory = "FAMILY"
	PaymentOrderV2SpendingCategoryFITNESS               PaymentOrderV2SpendingCategory = "FITNESS"
	PaymentOrderV2SpendingCategoryFOODANDDRINK          PaymentOrderV2SpendingCategory = "FOOD_AND_DRINK"
	PaymentOrderV2SpendingCategoryFUEL                  PaymentOrderV2SpendingCategory = "FUEL"
	PaymentOrderV2SpendingCategoryGAMBLING              PaymentOrderV2SpendingCategory = "GAMBLING"
	PaymentOrderV2SpendingCategoryGAMING                PaymentOrderV2SpendingCategory = "GAMING"
	PaymentOrderV2SpendingCategoryGARDEN                PaymentOrderV2SpendingCategory = "GARDEN"
	PaymentOrderV2SpendingCategoryGENERAL               PaymentOrderV2SpendingCategory = "GENERAL"
	PaymentOrderV2SpendingCategoryGIFTS                 PaymentOrderV2SpendingCategory = "GIFTS"
	PaymentOrderV2SpendingCategoryGROCERIES             PaymentOrderV2SpendingCategory = "GROCERIES"
	PaymentOrderV2SpendingCategoryHOBBY                 PaymentOrderV2SpendingCategory = "HOBBY"
	PaymentOrderV2SpendingCategoryHOLIDAYS              PaymentOrderV2SpendingCategory = "HOLIDAYS"
	PaymentOrderV2SpendingCategoryHOME                  PaymentOrderV2SpendingCategory = "HOME"
	PaymentOrderV2SpendingCategoryIMPULSEBUY            PaymentOrderV2SpendingCategory = "IMPULSE_BUY"
	PaymentOrderV2SpendingCategoryINCOME                PaymentOrderV2SpendingCategory = "INCOME"
	PaymentOrderV2SpendingCategoryINSURANCE             PaymentOrderV2SpendingCategory = "INSURANCE"
	PaymentOrderV2SpendingCategoryINTERESTPAYMENTS      PaymentOrderV2SpendingCategory = "INTEREST_PAYMENTS"
	PaymentOrderV2SpendingCategoryINVENTORY             PaymentOrderV2SpendingCategory = "INVENTORY"
	PaymentOrderV2SpendingCategoryINVESTMENTCAPITAL     PaymentOrderV2SpendingCategory = "INVESTMENT_CAPITAL"
	PaymentOrderV2SpendingCategoryINVESTMENTS           PaymentOrderV2SpendingCategory = "INVESTMENTS"
	PaymentOrderV2SpendingCategoryLIFESTYLE             PaymentOrderV2SpendingCategory = "LIFESTYLE"
	PaymentOrderV2SpendingCategoryLOANPRINCIPAL         PaymentOrderV2SpendingCategory = "LOAN_PRINCIPAL"
	PaymentOrderV2SpendingCategoryMAINTENANCEANDREPAIRS PaymentOrderV2SpendingCategory = "MAINTENANCE_AND_REPAIRS"
	PaymentOrderV2SpendingCategoryMARKETING             PaymentOrderV2SpendingCategory = "MARKETING"
	PaymentOrderV2SpendingCategoryMEDICAL               PaymentOrderV2SpendingCategory = "MEDICAL"
	PaymentOrderV2SpendingCategoryMORTGAGE              PaymentOrderV2SpendingCategory = "MORTGAGE"
	PaymentOrderV2SpendingCategoryNONE                  PaymentOrderV2SpendingCategory = "NONE"
	PaymentOrderV2SpendingCategoryNONESSENTIALSPEND     PaymentOrderV2SpendingCategory = "NON_ESSENTIAL_SPEND"
	PaymentOrderV2SpendingCategoryOTHER                 PaymentOrderV2SpendingCategory = "OTHER"
	PaymentOrderV2SpendingCategoryOTHERINCOME           PaymentOrderV2SpendingCategory = "OTHER_INCOME"
	PaymentOrderV2SpendingCategoryPAYMENTS              PaymentOrderV2SpendingCategory = "PAYMENTS"
	PaymentOrderV2SpendingCategoryPERSONAL              PaymentOrderV2SpendingCategory = "PERSONAL"
	PaymentOrderV2SpendingCategoryPERSONALCARE          PaymentOrderV2SpendingCategory = "PERSONAL_CARE"
	PaymentOrderV2SpendingCategoryPERSONALTRANSFERS     PaymentOrderV2SpendingCategory = "PERSONAL_TRANSFERS"
	PaymentOrderV2SpendingCategoryPETS                  PaymentOrderV2SpendingCategory = "PETS"
	PaymentOrderV2SpendingCategoryPHONEANDINTERNET      PaymentOrderV2SpendingCategory = "PHONE_AND_INTERNET"
	PaymentOrderV2SpendingCategoryPROFESSIONALSERVICES  PaymentOrderV2SpendingCategory = "PROFESSIONAL_SERVICES"
	PaymentOrderV2SpendingCategoryPROJECTS              PaymentOrderV2SpendingCategory = "PROJECTS"
	PaymentOrderV2SpendingCategoryRELATIONSHIPS         PaymentOrderV2SpendingCategory = "RELATIONSHIPS"
	PaymentOrderV2SpendingCategoryRENT                  PaymentOrderV2SpendingCategory = "RENT"
	PaymentOrderV2SpendingCategoryREPAIRSANDMAINTENANCE PaymentOrderV2SpendingCategory = "REPAIRS_AND_MAINTENANCE"
	PaymentOrderV2SpendingCategoryREVENUE               PaymentOrderV2SpendingCategory = "REVENUE"
	PaymentOrderV2SpendingCategorySAVING                PaymentOrderV2SpendingCategory = "SAVING"
	PaymentOrderV2SpendingCategorySELFASSESSMENTTAX     PaymentOrderV2SpendingCategory = "SELF_ASSESSMENT_TAX"
	PaymentOrderV2SpendingCategorySHOPPING              PaymentOrderV2SpendingCategory = "SHOPPING"
	PaymentOrderV2SpendingCategorySTAFF                 PaymentOrderV2SpendingCategory = "STAFF"
	PaymentOrderV2SpendingCategorySUBSCRIPTIONS         PaymentOrderV2SpendingCategory = "SUBSCRIPTIONS"
	PaymentOrderV2SpendingCategoryTAKEAWAY              PaymentOrderV2SpendingCategory = "TAKEAWAY"
	PaymentOrderV2SpendingCategoryTAXI                  PaymentOrderV2SpendingCategory = "TAXI"
	PaymentOrderV2SpendingCategoryTRANSFERS             PaymentOrderV2SpendingCategory = "TRANSFERS"
	PaymentOrderV2SpendingCategoryTRANSPORT             PaymentOrderV2SpendingCategory = "TRANSPORT"
	PaymentOrderV2SpendingCategoryTRAVEL                PaymentOrderV2SpendingCategory = "TRAVEL"
	PaymentOrderV2SpendingCategoryTREATS                PaymentOrderV2SpendingCategory = "TREATS"
	PaymentOrderV2SpendingCategoryVAT                   PaymentOrderV2SpendingCategory = "VAT"
	PaymentOrderV2SpendingCategoryVEHICLES              PaymentOrderV2SpendingCategory = "VEHICLES"
	PaymentOrderV2SpendingCategoryWEDDING               PaymentOrderV2SpendingCategory = "WEDDING"
	PaymentOrderV2SpendingCategoryWELLBEING             PaymentOrderV2SpendingCategory = "WELLBEING"
	PaymentOrderV2SpendingCategoryWORKPLACE             PaymentOrderV2SpendingCategory = "WORKPLACE"
)

// Defines values for PaymentRecipientBankIdentifierType.
const (
	PaymentRecipientBankIdentifierTypeABA      PaymentRecipientBankIdentifierType = "ABA"
	PaymentRecipientBankIdentifierTypeABAACH   PaymentRecipientBankIdentifierType = "ABA_ACH"
	PaymentRecipientBankIdentifierTypeABAWIRE  PaymentRecipientBankIdentifierType = "ABA_WIRE"
	PaymentRecipientBankIdentifierTypeBSB      PaymentRecipientBankIdentifierType = "BSB"
	PaymentRecipientBankIdentifierTypeIBAN     PaymentRecipientBankIdentifierType = "IBAN"
	PaymentRecipientBankIdentifierTypeSORTCODE PaymentRecipientBankIdentifierType = "SORT_CODE"
	PaymentRecipientBankIdentifierTypeSWIFT    PaymentRecipientBankIdentifierType = "SWIFT"
)

// Defines values for PaymentRecipientPayeeType.
const (
	PaymentRecipientPayeeTypeBUSINESS   PaymentRecipientPayeeType = "BUSINESS"
	PaymentRecipientPayeeTypeINDIVIDUAL PaymentRecipientPayeeType = "INDIVIDUAL"
)

// Defines values for PaymentStatusDetailsDescription.
const (
	PaymentStatusDetailsDescriptionACCEPTED                           PaymentStatusDetailsDescription = "ACCEPTED"
	PaymentStatusDetailsDescriptionDESTINATIONACCOUNTINVALID          PaymentStatusDetailsDescription = "DESTINATION_ACCOUNT_INVALID"
	PaymentStatusDetailsDescriptionDESTINATIONACCOUNTNAMEMISMATCH     PaymentStatusDetailsDescription = "DESTINATION_ACCOUNT_NAME_MISMATCH"
	PaymentStatusDetailsDescriptionDESTINATIONACCOUNTUNAVAILABLE      PaymentStatusDetailsDescription = "DESTINATION_ACCOUNT_UNAVAILABLE"
	PaymentStatusDetailsDescriptionPENDING                            PaymentStatusDetailsDescription = "PENDING"
	PaymentStatusDetailsDescriptionQUALIFIEDACCEPTAFTERNEXTWORKINGDAY PaymentStatusDetailsDescription = "QUALIFIED_ACCEPT_AFTER_NEXT_WORKING_DAY"
	PaymentStatusDetailsDescriptionQUALIFIEDACCEPTNEXTCALENDARDAY     PaymentStatusDetailsDescription = "QUALIFIED_ACCEPT_NEXT_CALENDAR_DAY"
	PaymentStatusDetailsDescriptionQUALIFIEDACCEPTNEXTWORKINGDAY      PaymentStatusDetailsDescription = "QUALIFIED_ACCEPT_NEXT_WORKING_DAY"
	PaymentStatusDetailsDescriptionQUALIFIEDACCEPTSAMEDAY             PaymentStatusDetailsDescription = "QUALIFIED_ACCEPT_SAME_DAY"
	PaymentStatusDetailsDescriptionQUALIFIEDACCEPTUNSPECIFIEDDAY      PaymentStatusDetailsDescription = "QUALIFIED_ACCEPT_UNSPECIFIED_DAY"
	PaymentStatusDetailsDescriptionQUALIFIEDACCEPTWITHINTWOHOURS      PaymentStatusDetailsDescription = "QUALIFIED_ACCEPT_WITHIN_TWO_HOURS"
	PaymentStatusDetailsDescriptionREFERENCEINFORMATIONINCORRECT      PaymentStatusDetailsDescription = "REFERENCE_INFORMATION_INCORRECT"
)

// Defines values for PaymentStatusDetailsPaymentStatus.
const (
	PaymentStatusDetailsPaymentStatusACCEPTED PaymentStatusDetailsPaymentStatus = "ACCEPTED"
	PaymentStatusDetailsPaymentStatusPENDING  PaymentStatusDetailsPaymentStatus = "PENDING"
	PaymentStatusDetailsPaymentStatusREJECTED PaymentStatusDetailsPaymentStatus = "REJECTED"
)

// Defines values for ReceiptCurrencyCode.
const (
	ReceiptCurrencyCodeAED       ReceiptCurrencyCode = "AED"
	ReceiptCurrencyCodeAFN       ReceiptCurrencyCode = "AFN"
	ReceiptCurrencyCodeALL       ReceiptCurrencyCode = "ALL"
	ReceiptCurrencyCodeAMD       ReceiptCurrencyCode = "AMD"
	ReceiptCurrencyCodeANG       ReceiptCurrencyCode = "ANG"
	ReceiptCurrencyCodeAOA       ReceiptCurrencyCode = "AOA"
	ReceiptCurrencyCodeARS       ReceiptCurrencyCode = "ARS"
	ReceiptCurrencyCodeAUD       ReceiptCurrencyCode = "AUD"
	ReceiptCurrencyCodeAWG       ReceiptCurrencyCode = "AWG"
	ReceiptCurrencyCodeAZN       ReceiptCurrencyCode = "AZN"
	ReceiptCurrencyCodeBAM       ReceiptCurrencyCode = "BAM"
	ReceiptCurrencyCodeBBD       ReceiptCurrencyCode = "BBD"
	ReceiptCurrencyCodeBDT       ReceiptCurrencyCode = "BDT"
	ReceiptCurrencyCodeBGN       ReceiptCurrencyCode = "BGN"
	ReceiptCurrencyCodeBHD       ReceiptCurrencyCode = "BHD"
	ReceiptCurrencyCodeBIF       ReceiptCurrencyCode = "BIF"
	ReceiptCurrencyCodeBMD       ReceiptCurrencyCode = "BMD"
	ReceiptCurrencyCodeBND       ReceiptCurrencyCode = "BND"
	ReceiptCurrencyCodeBOB       ReceiptCurrencyCode = "BOB"
	ReceiptCurrencyCodeBOV       ReceiptCurrencyCode = "BOV"
	ReceiptCurrencyCodeBRL       ReceiptCurrencyCode = "BRL"
	ReceiptCurrencyCodeBSD       ReceiptCurrencyCode = "BSD"
	ReceiptCurrencyCodeBTN       ReceiptCurrencyCode = "BTN"
	ReceiptCurrencyCodeBWP       ReceiptCurrencyCode = "BWP"
	ReceiptCurrencyCodeBYN       ReceiptCurrencyCode = "BYN"
	ReceiptCurrencyCodeBYR       ReceiptCurrencyCode = "BYR"
	ReceiptCurrencyCodeBZD       ReceiptCurrencyCode = "BZD"
	ReceiptCurrencyCodeCAD       ReceiptCurrencyCode = "CAD"
	ReceiptCurrencyCodeCDF       ReceiptCurrencyCode = "CDF"
	ReceiptCurrencyCodeCHE       ReceiptCurrencyCode = "CHE"
	ReceiptCurrencyCodeCHF       ReceiptCurrencyCode = "CHF"
	ReceiptCurrencyCodeCHW       ReceiptCurrencyCode = "CHW"
	ReceiptCurrencyCodeCLF       ReceiptCurrencyCode = "CLF"
	ReceiptCurrencyCodeCLP       ReceiptCurrencyCode = "CLP"
	ReceiptCurrencyCodeCNY       ReceiptCurrencyCode = "CNY"
	ReceiptCurrencyCodeCOP       ReceiptCurrencyCode = "COP"
	ReceiptCurrencyCodeCOU       ReceiptCurrencyCode = "COU"
	ReceiptCurrencyCodeCRC       ReceiptCurrencyCode = "CRC"
	ReceiptCurrencyCodeCUC       ReceiptCurrencyCode = "CUC"
	ReceiptCurrencyCodeCUP       ReceiptCurrencyCode = "CUP"
	ReceiptCurrencyCodeCVE       ReceiptCurrencyCode = "CVE"
	ReceiptCurrencyCodeCZK       ReceiptCurrencyCode = "CZK"
	ReceiptCurrencyCodeDJF       ReceiptCurrencyCode = "DJF"
	ReceiptCurrencyCodeDKK       ReceiptCurrencyCode = "DKK"
	ReceiptCurrencyCodeDOP       ReceiptCurrencyCode = "DOP"
	ReceiptCurrencyCodeDZD       ReceiptCurrencyCode = "DZD"
	ReceiptCurrencyCodeEGP       ReceiptCurrencyCode = "EGP"
	ReceiptCurrencyCodeERN       ReceiptCurrencyCode = "ERN"
	ReceiptCurrencyCodeETB       ReceiptCurrencyCode = "ETB"
	ReceiptCurrencyCodeEUR       ReceiptCurrencyCode = "EUR"
	ReceiptCurrencyCodeFJD       ReceiptCurrencyCode = "FJD"
	ReceiptCurrencyCodeFKP       ReceiptCurrencyCode = "FKP"
	ReceiptCurrencyCodeGBP       ReceiptCurrencyCode = "GBP"
	ReceiptCurrencyCodeGEL       ReceiptCurrencyCode = "GEL"
	ReceiptCurrencyCodeGHS       ReceiptCurrencyCode = "GHS"
	ReceiptCurrencyCodeGIP       ReceiptCurrencyCode = "GIP"
	ReceiptCurrencyCodeGMD       ReceiptCurrencyCode = "GMD"
	ReceiptCurrencyCodeGNF       ReceiptCurrencyCode = "GNF"
	ReceiptCurrencyCodeGTQ       ReceiptCurrencyCode = "GTQ"
	ReceiptCurrencyCodeGYD       ReceiptCurrencyCode = "GYD"
	ReceiptCurrencyCodeHKD       ReceiptCurrencyCode = "HKD"
	ReceiptCurrencyCodeHNL       ReceiptCurrencyCode = "HNL"
	ReceiptCurrencyCodeHRK       ReceiptCurrencyCode = "HRK"
	ReceiptCurrencyCodeHTG       ReceiptCurrencyCode = "HTG"
	ReceiptCurrencyCodeHUF       ReceiptCurrencyCode = "HUF"
	ReceiptCurrencyCodeIDR       ReceiptCurrencyCode = "IDR"
	ReceiptCurrencyCodeILS       ReceiptCurrencyCode = "ILS"
	ReceiptCurrencyCodeINR       ReceiptCurrencyCode = "INR"
	ReceiptCurrencyCodeIQD       ReceiptCurrencyCode = "IQD"
	ReceiptCurrencyCodeIRR       ReceiptCurrencyCode = "IRR"
	ReceiptCurrencyCodeISK       ReceiptCurrencyCode = "ISK"
	ReceiptCurrencyCodeJMD       ReceiptCurrencyCode = "JMD"
	ReceiptCurrencyCodeJOD       ReceiptCurrencyCode = "JOD"
	ReceiptCurrencyCodeJPY       ReceiptCurrencyCode = "JPY"
	ReceiptCurrencyCodeKES       ReceiptCurrencyCode = "KES"
	ReceiptCurrencyCodeKGS       ReceiptCurrencyCode = "KGS"
	ReceiptCurrencyCodeKHR       ReceiptCurrencyCode = "KHR"
	ReceiptCurrencyCodeKMF       ReceiptCurrencyCode = "KMF"
	ReceiptCurrencyCodeKPW       ReceiptCurrencyCode = "KPW"
	ReceiptCurrencyCodeKRW       ReceiptCurrencyCode = "KRW"
	ReceiptCurrencyCodeKWD       ReceiptCurrencyCode = "KWD"
	ReceiptCurrencyCodeKYD       ReceiptCurrencyCode = "KYD"
	ReceiptCurrencyCodeKZT       ReceiptCurrencyCode = "KZT"
	ReceiptCurrencyCodeLAK       ReceiptCurrencyCode = "LAK"
	ReceiptCurrencyCodeLBP       ReceiptCurrencyCode = "LBP"
	ReceiptCurrencyCodeLKR       ReceiptCurrencyCode = "LKR"
	ReceiptCurrencyCodeLRD       ReceiptCurrencyCode = "LRD"
	ReceiptCurrencyCodeLSL       ReceiptCurrencyCode = "LSL"
	ReceiptCurrencyCodeLTL       ReceiptCurrencyCode = "LTL"
	ReceiptCurrencyCodeLYD       ReceiptCurrencyCode = "LYD"
	ReceiptCurrencyCodeMAD       ReceiptCurrencyCode = "MAD"
	ReceiptCurrencyCodeMDL       ReceiptCurrencyCode = "MDL"
	ReceiptCurrencyCodeMGA       ReceiptCurrencyCode = "MGA"
	ReceiptCurrencyCodeMKD       ReceiptCurrencyCode = "MKD"
	ReceiptCurrencyCodeMMK       ReceiptCurrencyCode = "MMK"
	ReceiptCurrencyCodeMNT       ReceiptCurrencyCode = "MNT"
	ReceiptCurrencyCodeMOP       ReceiptCurrencyCode = "MOP"
	ReceiptCurrencyCodeMRO       ReceiptCurrencyCode = "MRO"
	ReceiptCurrencyCodeMRU       ReceiptCurrencyCode = "MRU"
	ReceiptCurrencyCodeMUR       ReceiptCurrencyCode = "MUR"
	ReceiptCurrencyCodeMVR       ReceiptCurrencyCode = "MVR"
	ReceiptCurrencyCodeMWK       ReceiptCurrencyCode = "MWK"
	ReceiptCurrencyCodeMXN       ReceiptCurrencyCode = "MXN"
	ReceiptCurrencyCodeMXV       ReceiptCurrencyCode = "MXV"
	ReceiptCurrencyCodeMYR       ReceiptCurrencyCode = "MYR"
	ReceiptCurrencyCodeMZN       ReceiptCurrencyCode = "MZN"
	ReceiptCurrencyCodeNAD       ReceiptCurrencyCode = "NAD"
	ReceiptCurrencyCodeNGN       ReceiptCurrencyCode = "NGN"
	ReceiptCurrencyCodeNIO       ReceiptCurrencyCode = "NIO"
	ReceiptCurrencyCodeNOK       ReceiptCurrencyCode = "NOK"
	ReceiptCurrencyCodeNPR       ReceiptCurrencyCode = "NPR"
	ReceiptCurrencyCodeNZD       ReceiptCurrencyCode = "NZD"
	ReceiptCurrencyCodeOMR       ReceiptCurrencyCode = "OMR"
	ReceiptCurrencyCodePAB       ReceiptCurrencyCode = "PAB"
	ReceiptCurrencyCodePEN       ReceiptCurrencyCode = "PEN"
	ReceiptCurrencyCodePGK       ReceiptCurrencyCode = "PGK"
	ReceiptCurrencyCodePHP       ReceiptCurrencyCode = "PHP"
	ReceiptCurrencyCodePKR       ReceiptCurrencyCode = "PKR"
	ReceiptCurrencyCodePLN       ReceiptCurrencyCode = "PLN"
	ReceiptCurrencyCodePYG       ReceiptCurrencyCode = "PYG"
	ReceiptCurrencyCodeQAR       ReceiptCurrencyCode = "QAR"
	ReceiptCurrencyCodeRON       ReceiptCurrencyCode = "RON"
	ReceiptCurrencyCodeRSD       ReceiptCurrencyCode = "RSD"
	ReceiptCurrencyCodeRUB       ReceiptCurrencyCode = "RUB"
	ReceiptCurrencyCodeRUR       ReceiptCurrencyCode = "RUR"
	ReceiptCurrencyCodeRWF       ReceiptCurrencyCode = "RWF"
	ReceiptCurrencyCodeSAR       ReceiptCurrencyCode = "SAR"
	ReceiptCurrencyCodeSBD       ReceiptCurrencyCode = "SBD"
	ReceiptCurrencyCodeSCR       ReceiptCurrencyCode = "SCR"
	ReceiptCurrencyCodeSDG       ReceiptCurrencyCode = "SDG"
	ReceiptCurrencyCodeSEK       ReceiptCurrencyCode = "SEK"
	ReceiptCurrencyCodeSGD       ReceiptCurrencyCode = "SGD"
	ReceiptCurrencyCodeSHP       ReceiptCurrencyCode = "SHP"
	ReceiptCurrencyCodeSLE       ReceiptCurrencyCode = "SLE"
	ReceiptCurrencyCodeSLL       ReceiptCurrencyCode = "SLL"
	ReceiptCurrencyCodeSOS       ReceiptCurrencyCode = "SOS"
	ReceiptCurrencyCodeSRD       ReceiptCurrencyCode = "SRD"
	ReceiptCurrencyCodeSSP       ReceiptCurrencyCode = "SSP"
	ReceiptCurrencyCodeSTD       ReceiptCurrencyCode = "STD"
	ReceiptCurrencyCodeSTN       ReceiptCurrencyCode = "STN"
	ReceiptCurrencyCodeSVC       ReceiptCurrencyCode = "SVC"
	ReceiptCurrencyCodeSYP       ReceiptCurrencyCode = "SYP"
	ReceiptCurrencyCodeSZL       ReceiptCurrencyCode = "SZL"
	ReceiptCurrencyCodeTHB       ReceiptCurrencyCode = "THB"
	ReceiptCurrencyCodeTJS       ReceiptCurrencyCode = "TJS"
	ReceiptCurrencyCodeTMT       ReceiptCurrencyCode = "TMT"
	ReceiptCurrencyCodeTND       ReceiptCurrencyCode = "TND"
	ReceiptCurrencyCodeTOP       ReceiptCurrencyCode = "TOP"
	ReceiptCurrencyCodeTRY       ReceiptCurrencyCode = "TRY"
	ReceiptCurrencyCodeTTD       ReceiptCurrencyCode = "TTD"
	ReceiptCurrencyCodeTWD       ReceiptCurrencyCode = "TWD"
	ReceiptCurrencyCodeTZS       ReceiptCurrencyCode = "TZS"
	ReceiptCurrencyCodeUAH       ReceiptCurrencyCode = "UAH"
	ReceiptCurrencyCodeUGX       ReceiptCurrencyCode = "UGX"
	ReceiptCurrencyCodeUNDEFINED ReceiptCurrencyCode = "UNDEFINED"
	ReceiptCurrencyCodeUSD       ReceiptCurrencyCode = "USD"
	ReceiptCurrencyCodeUSN       ReceiptCurrencyCode = "USN"
	ReceiptCurrencyCodeUSS       ReceiptCurrencyCode = "USS"
	ReceiptCurrencyCodeUYI       ReceiptCurrencyCode = "UYI"
	ReceiptCurrencyCodeUYU       ReceiptCurrencyCode = "UYU"
	ReceiptCurrencyCodeUZS       ReceiptCurrencyCode = "UZS"
	ReceiptCurrencyCodeVEF       ReceiptCurrencyCode = "VEF"
	ReceiptCurrencyCodeVES       ReceiptCurrencyCode = "VES"
	ReceiptCurrencyCodeVND       ReceiptCurrencyCode = "VND"
	ReceiptCurrencyCodeVUV       ReceiptCurrencyCode = "VUV"
	ReceiptCurrencyCodeWST       ReceiptCurrencyCode = "WST"
	ReceiptCurrencyCodeXAF       ReceiptCurrencyCode = "XAF"
	ReceiptCurrencyCodeXAG       ReceiptCurrencyCode = "XAG"
	ReceiptCurrencyCodeXAU       ReceiptCurrencyCode = "XAU"
	ReceiptCurrencyCodeXBA       ReceiptCurrencyCode = "XBA"
	ReceiptCurrencyCodeXBB       ReceiptCurrencyCode = "XBB"
	ReceiptCurrencyCodeXBC       ReceiptCurrencyCode = "XBC"
	ReceiptCurrencyCodeXBD       ReceiptCurrencyCode = "XBD"
	ReceiptCurrencyCodeXCD       ReceiptCurrencyCode = "XCD"
	ReceiptCurrencyCodeXDR       ReceiptCurrencyCode = "XDR"
	ReceiptCurrencyCodeXOF       ReceiptCurrencyCode = "XOF"
	ReceiptCurrencyCodeXPD       ReceiptCurrencyCode = "XPD"
	ReceiptCurrencyCodeXPF       ReceiptCurrencyCode = "XPF"
	ReceiptCurrencyCodeXPT       ReceiptCurrencyCode = "XPT"
	ReceiptCurrencyCodeXSU       ReceiptCurrencyCode = "XSU"
	ReceiptCurrencyCodeXTS       ReceiptCurrencyCode = "XTS"
	ReceiptCurrencyCodeXUA       ReceiptCurrencyCode = "XUA"
	ReceiptCurrencyCodeXXX       ReceiptCurrencyCode = "XXX"
	ReceiptCurrencyCodeYER       ReceiptCurrencyCode = "YER"
	ReceiptCurrencyCodeZAR       ReceiptCurrencyCode = "ZAR"
	ReceiptCurrencyCodeZMW       ReceiptCurrencyCode = "ZMW"
	ReceiptCurrencyCodeZWL       ReceiptCurrencyCode = "ZWL"
)

// Defines values for ReceiptMetadataSource.
const (
	ReceiptMetadataSourceCUSTOMER ReceiptMetadataSource = "CUSTOMER"
	ReceiptMetadataSourcePARTNER  ReceiptMetadataSource = "PARTNER"
	ReceiptMetadataSourceSTARLING ReceiptMetadataSource = "STARLING"
)

// Defines values for ReceiptItemType.
const (
	BALANCEADJUSTMENT ReceiptItemType = "BALANCE_ADJUSTMENT"
	GRATUITY          ReceiptItemType = "GRATUITY"
	PURCHASE          ReceiptItemType = "PURCHASE"
	SERVICEFEE        ReceiptItemType = "SERVICE_FEE"
)

// Defines values for ReceiptTaxDetailTaxCurrencyCode.
const (
	ReceiptTaxDetailTaxCurrencyCodeAED       ReceiptTaxDetailTaxCurrencyCode = "AED"
	ReceiptTaxDetailTaxCurrencyCodeAFN       ReceiptTaxDetailTaxCurrencyCode = "AFN"
	ReceiptTaxDetailTaxCurrencyCodeALL       ReceiptTaxDetailTaxCurrencyCode = "ALL"
	ReceiptTaxDetailTaxCurrencyCodeAMD       ReceiptTaxDetailTaxCurrencyCode = "AMD"
	ReceiptTaxDetailTaxCurrencyCodeANG       ReceiptTaxDetailTaxCurrencyCode = "ANG"
	ReceiptTaxDetailTaxCurrencyCodeAOA       ReceiptTaxDetailTaxCurrencyCode = "AOA"
	ReceiptTaxDetailTaxCurrencyCodeARS       ReceiptTaxDetailTaxCurrencyCode = "ARS"
	ReceiptTaxDetailTaxCurrencyCodeAUD       ReceiptTaxDetailTaxCurrencyCode = "AUD"
	ReceiptTaxDetailTaxCurrencyCodeAWG       ReceiptTaxDetailTaxCurrencyCode = "AWG"
	ReceiptTaxDetailTaxCurrencyCodeAZN       ReceiptTaxDetailTaxCurrencyCode = "AZN"
	ReceiptTaxDetailTaxCurrencyCodeBAM       ReceiptTaxDetailTaxCurrencyCode = "BAM"
	ReceiptTaxDetailTaxCurrencyCodeBBD       ReceiptTaxDetailTaxCurrencyCode = "BBD"
	ReceiptTaxDetailTaxCurrencyCodeBDT       ReceiptTaxDetailTaxCurrencyCode = "BDT"
	ReceiptTaxDetailTaxCurrencyCodeBGN       ReceiptTaxDetailTaxCurrencyCode = "BGN"
	ReceiptTaxDetailTaxCurrencyCodeBHD       ReceiptTaxDetailTaxCurrencyCode = "BHD"
	ReceiptTaxDetailTaxCurrencyCodeBIF       ReceiptTaxDetailTaxCurrencyCode = "BIF"
	ReceiptTaxDetailTaxCurrencyCodeBMD       ReceiptTaxDetailTaxCurrencyCode = "BMD"
	ReceiptTaxDetailTaxCurrencyCodeBND       ReceiptTaxDetailTaxCurrencyCode = "BND"
	ReceiptTaxDetailTaxCurrencyCodeBOB       ReceiptTaxDetailTaxCurrencyCode = "BOB"
	ReceiptTaxDetailTaxCurrencyCodeBOV       ReceiptTaxDetailTaxCurrencyCode = "BOV"
	ReceiptTaxDetailTaxCurrencyCodeBRL       ReceiptTaxDetailTaxCurrencyCode = "BRL"
	ReceiptTaxDetailTaxCurrencyCodeBSD       ReceiptTaxDetailTaxCurrencyCode = "BSD"
	ReceiptTaxDetailTaxCurrencyCodeBTN       ReceiptTaxDetailTaxCurrencyCode = "BTN"
	ReceiptTaxDetailTaxCurrencyCodeBWP       ReceiptTaxDetailTaxCurrencyCode = "BWP"
	ReceiptTaxDetailTaxCurrencyCodeBYN       ReceiptTaxDetailTaxCurrencyCode = "BYN"
	ReceiptTaxDetailTaxCurrencyCodeBYR       ReceiptTaxDetailTaxCurrencyCode = "BYR"
	ReceiptTaxDetailTaxCurrencyCodeBZD       ReceiptTaxDetailTaxCurrencyCode = "BZD"
	ReceiptTaxDetailTaxCurrencyCodeCAD       ReceiptTaxDetailTaxCurrencyCode = "CAD"
	ReceiptTaxDetailTaxCurrencyCodeCDF       ReceiptTaxDetailTaxCurrencyCode = "CDF"
	ReceiptTaxDetailTaxCurrencyCodeCHE       ReceiptTaxDetailTaxCurrencyCode = "CHE"
	ReceiptTaxDetailTaxCurrencyCodeCHF       ReceiptTaxDetailTaxCurrencyCode = "CHF"
	ReceiptTaxDetailTaxCurrencyCodeCHW       ReceiptTaxDetailTaxCurrencyCode = "CHW"
	ReceiptTaxDetailTaxCurrencyCodeCLF       ReceiptTaxDetailTaxCurrencyCode = "CLF"
	ReceiptTaxDetailTaxCurrencyCodeCLP       ReceiptTaxDetailTaxCurrencyCode = "CLP"
	ReceiptTaxDetailTaxCurrencyCodeCNY       ReceiptTaxDetailTaxCurrencyCode = "CNY"
	ReceiptTaxDetailTaxCurrencyCodeCOP       ReceiptTaxDetailTaxCurrencyCode = "COP"
	ReceiptTaxDetailTaxCurrencyCodeCOU       ReceiptTaxDetailTaxCurrencyCode = "COU"
	ReceiptTaxDetailTaxCurrencyCodeCRC       ReceiptTaxDetailTaxCurrencyCode = "CRC"
	ReceiptTaxDetailTaxCurrencyCodeCUC       ReceiptTaxDetailTaxCurrencyCode = "CUC"
	ReceiptTaxDetailTaxCurrencyCodeCUP       ReceiptTaxDetailTaxCurrencyCode = "CUP"
	ReceiptTaxDetailTaxCurrencyCodeCVE       ReceiptTaxDetailTaxCurrencyCode = "CVE"
	ReceiptTaxDetailTaxCurrencyCodeCZK       ReceiptTaxDetailTaxCurrencyCode = "CZK"
	ReceiptTaxDetailTaxCurrencyCodeDJF       ReceiptTaxDetailTaxCurrencyCode = "DJF"
	ReceiptTaxDetailTaxCurrencyCodeDKK       ReceiptTaxDetailTaxCurrencyCode = "DKK"
	ReceiptTaxDetailTaxCurrencyCodeDOP       ReceiptTaxDetailTaxCurrencyCode = "DOP"
	ReceiptTaxDetailTaxCurrencyCodeDZD       ReceiptTaxDetailTaxCurrencyCode = "DZD"
	ReceiptTaxDetailTaxCurrencyCodeEGP       ReceiptTaxDetailTaxCurrencyCode = "EGP"
	ReceiptTaxDetailTaxCurrencyCodeERN       ReceiptTaxDetailTaxCurrencyCode = "ERN"
	ReceiptTaxDetailTaxCurrencyCodeETB       ReceiptTaxDetailTaxCurrencyCode = "ETB"
	ReceiptTaxDetailTaxCurrencyCodeEUR       ReceiptTaxDetailTaxCurrencyCode = "EUR"
	ReceiptTaxDetailTaxCurrencyCodeFJD       ReceiptTaxDetailTaxCurrencyCode = "FJD"
	ReceiptTaxDetailTaxCurrencyCodeFKP       ReceiptTaxDetailTaxCurrencyCode = "FKP"
	ReceiptTaxDetailTaxCurrencyCodeGBP       ReceiptTaxDetailTaxCurrencyCode = "GBP"
	ReceiptTaxDetailTaxCurrencyCodeGEL       ReceiptTaxDetailTaxCurrencyCode = "GEL"
	ReceiptTaxDetailTaxCurrencyCodeGHS       ReceiptTaxDetailTaxCurrencyCode = "GHS"
	ReceiptTaxDetailTaxCurrencyCodeGIP       ReceiptTaxDetailTaxCurrencyCode = "GIP"
	ReceiptTaxDetailTaxCurrencyCodeGMD       ReceiptTaxDetailTaxCurrencyCode = "GMD"
	ReceiptTaxDetailTaxCurrencyCodeGNF       ReceiptTaxDetailTaxCurrencyCode = "GNF"
	ReceiptTaxDetailTaxCurrencyCodeGTQ       ReceiptTaxDetailTaxCurrencyCode = "GTQ"
	ReceiptTaxDetailTaxCurrencyCodeGYD       ReceiptTaxDetailTaxCurrencyCode = "GYD"
	ReceiptTaxDetailTaxCurrencyCodeHKD       ReceiptTaxDetailTaxCurrencyCode = "HKD"
	ReceiptTaxDetailTaxCurrencyCodeHNL       ReceiptTaxDetailTaxCurrencyCode = "HNL"
	ReceiptTaxDetailTaxCurrencyCodeHRK       ReceiptTaxDetailTaxCurrencyCode = "HRK"
	ReceiptTaxDetailTaxCurrencyCodeHTG       ReceiptTaxDetailTaxCurrencyCode = "HTG"
	ReceiptTaxDetailTaxCurrencyCodeHUF       ReceiptTaxDetailTaxCurrencyCode = "HUF"
	ReceiptTaxDetailTaxCurrencyCodeIDR       ReceiptTaxDetailTaxCurrencyCode = "IDR"
	ReceiptTaxDetailTaxCurrencyCodeILS       ReceiptTaxDetailTaxCurrencyCode = "ILS"
	ReceiptTaxDetailTaxCurrencyCodeINR       ReceiptTaxDetailTaxCurrencyCode = "INR"
	ReceiptTaxDetailTaxCurrencyCodeIQD       ReceiptTaxDetailTaxCurrencyCode = "IQD"
	ReceiptTaxDetailTaxCurrencyCodeIRR       ReceiptTaxDetailTaxCurrencyCode = "IRR"
	ReceiptTaxDetailTaxCurrencyCodeISK       ReceiptTaxDetailTaxCurrencyCode = "ISK"
	ReceiptTaxDetailTaxCurrencyCodeJMD       ReceiptTaxDetailTaxCurrencyCode = "JMD"
	ReceiptTaxDetailTaxCurrencyCodeJOD       ReceiptTaxDetailTaxCurrencyCode = "JOD"
	ReceiptTaxDetailTaxCurrencyCodeJPY       ReceiptTaxDetailTaxCurrencyCode = "JPY"
	ReceiptTaxDetailTaxCurrencyCodeKES       ReceiptTaxDetailTaxCurrencyCode = "KES"
	ReceiptTaxDetailTaxCurrencyCodeKGS       ReceiptTaxDetailTaxCurrencyCode = "KGS"
	ReceiptTaxDetailTaxCurrencyCodeKHR       ReceiptTaxDetailTaxCurrencyCode = "KHR"
	ReceiptTaxDetailTaxCurrencyCodeKMF       ReceiptTaxDetailTaxCurrencyCode = "KMF"
	ReceiptTaxDetailTaxCurrencyCodeKPW       ReceiptTaxDetailTaxCurrencyCode = "KPW"
	ReceiptTaxDetailTaxCurrencyCodeKRW       ReceiptTaxDetailTaxCurrencyCode = "KRW"
	ReceiptTaxDetailTaxCurrencyCodeKWD       ReceiptTaxDetailTaxCurrencyCode = "KWD"
	ReceiptTaxDetailTaxCurrencyCodeKYD       ReceiptTaxDetailTaxCurrencyCode = "KYD"
	ReceiptTaxDetailTaxCurrencyCodeKZT       ReceiptTaxDetailTaxCurrencyCode = "KZT"
	ReceiptTaxDetailTaxCurrencyCodeLAK       ReceiptTaxDetailTaxCurrencyCode = "LAK"
	ReceiptTaxDetailTaxCurrencyCodeLBP       ReceiptTaxDetailTaxCurrencyCode = "LBP"
	ReceiptTaxDetailTaxCurrencyCodeLKR       ReceiptTaxDetailTaxCurrencyCode = "LKR"
	ReceiptTaxDetailTaxCurrencyCodeLRD       ReceiptTaxDetailTaxCurrencyCode = "LRD"
	ReceiptTaxDetailTaxCurrencyCodeLSL       ReceiptTaxDetailTaxCurrencyCode = "LSL"
	ReceiptTaxDetailTaxCurrencyCodeLTL       ReceiptTaxDetailTaxCurrencyCode = "LTL"
	ReceiptTaxDetailTaxCurrencyCodeLYD       ReceiptTaxDetailTaxCurrencyCode = "LYD"
	ReceiptTaxDetailTaxCurrencyCodeMAD       ReceiptTaxDetailTaxCurrencyCode = "MAD"
	ReceiptTaxDetailTaxCurrencyCodeMDL       ReceiptTaxDetailTaxCurrencyCode = "MDL"
	ReceiptTaxDetailTaxCurrencyCodeMGA       ReceiptTaxDetailTaxCurrencyCode = "MGA"
	ReceiptTaxDetailTaxCurrencyCodeMKD       ReceiptTaxDetailTaxCurrencyCode = "MKD"
	ReceiptTaxDetailTaxCurrencyCodeMMK       ReceiptTaxDetailTaxCurrencyCode = "MMK"
	ReceiptTaxDetailTaxCurrencyCodeMNT       ReceiptTaxDetailTaxCurrencyCode = "MNT"
	ReceiptTaxDetailTaxCurrencyCodeMOP       ReceiptTaxDetailTaxCurrencyCode = "MOP"
	ReceiptTaxDetailTaxCurrencyCodeMRO       ReceiptTaxDetailTaxCurrencyCode = "MRO"
	ReceiptTaxDetailTaxCurrencyCodeMRU       ReceiptTaxDetailTaxCurrencyCode = "MRU"
	ReceiptTaxDetailTaxCurrencyCodeMUR       ReceiptTaxDetailTaxCurrencyCode = "MUR"
	ReceiptTaxDetailTaxCurrencyCodeMVR       ReceiptTaxDetailTaxCurrencyCode = "MVR"
	ReceiptTaxDetailTaxCurrencyCodeMWK       ReceiptTaxDetailTaxCurrencyCode = "MWK"
	ReceiptTaxDetailTaxCurrencyCodeMXN       ReceiptTaxDetailTaxCurrencyCode = "MXN"
	ReceiptTaxDetailTaxCurrencyCodeMXV       ReceiptTaxDetailTaxCurrencyCode = "MXV"
	ReceiptTaxDetailTaxCurrencyCodeMYR       ReceiptTaxDetailTaxCurrencyCode = "MYR"
	ReceiptTaxDetailTaxCurrencyCodeMZN       ReceiptTaxDetailTaxCurrencyCode = "MZN"
	ReceiptTaxDetailTaxCurrencyCodeNAD       ReceiptTaxDetailTaxCurrencyCode = "NAD"
	ReceiptTaxDetailTaxCurrencyCodeNGN       ReceiptTaxDetailTaxCurrencyCode = "NGN"
	ReceiptTaxDetailTaxCurrencyCodeNIO       ReceiptTaxDetailTaxCurrencyCode = "NIO"
	ReceiptTaxDetailTaxCurrencyCodeNOK       ReceiptTaxDetailTaxCurrencyCode = "NOK"
	ReceiptTaxDetailTaxCurrencyCodeNPR       ReceiptTaxDetailTaxCurrencyCode = "NPR"
	ReceiptTaxDetailTaxCurrencyCodeNZD       ReceiptTaxDetailTaxCurrencyCode = "NZD"
	ReceiptTaxDetailTaxCurrencyCodeOMR       ReceiptTaxDetailTaxCurrencyCode = "OMR"
	ReceiptTaxDetailTaxCurrencyCodePAB       ReceiptTaxDetailTaxCurrencyCode = "PAB"
	ReceiptTaxDetailTaxCurrencyCodePEN       ReceiptTaxDetailTaxCurrencyCode = "PEN"
	ReceiptTaxDetailTaxCurrencyCodePGK       ReceiptTaxDetailTaxCurrencyCode = "PGK"
	ReceiptTaxDetailTaxCurrencyCodePHP       ReceiptTaxDetailTaxCurrencyCode = "PHP"
	ReceiptTaxDetailTaxCurrencyCodePKR       ReceiptTaxDetailTaxCurrencyCode = "PKR"
	ReceiptTaxDetailTaxCurrencyCodePLN       ReceiptTaxDetailTaxCurrencyCode = "PLN"
	ReceiptTaxDetailTaxCurrencyCodePYG       ReceiptTaxDetailTaxCurrencyCode = "PYG"
	ReceiptTaxDetailTaxCurrencyCodeQAR       ReceiptTaxDetailTaxCurrencyCode = "QAR"
	ReceiptTaxDetailTaxCurrencyCodeRON       ReceiptTaxDetailTaxCurrencyCode = "RON"
	ReceiptTaxDetailTaxCurrencyCodeRSD       ReceiptTaxDetailTaxCurrencyCode = "RSD"
	ReceiptTaxDetailTaxCurrencyCodeRUB       ReceiptTaxDetailTaxCurrencyCode = "RUB"
	ReceiptTaxDetailTaxCurrencyCodeRUR       ReceiptTaxDetailTaxCurrencyCode = "RUR"
	ReceiptTaxDetailTaxCurrencyCodeRWF       ReceiptTaxDetailTaxCurrencyCode = "RWF"
	ReceiptTaxDetailTaxCurrencyCodeSAR       ReceiptTaxDetailTaxCurrencyCode = "SAR"
	ReceiptTaxDetailTaxCurrencyCodeSBD       ReceiptTaxDetailTaxCurrencyCode = "SBD"
	ReceiptTaxDetailTaxCurrencyCodeSCR       ReceiptTaxDetailTaxCurrencyCode = "SCR"
	ReceiptTaxDetailTaxCurrencyCodeSDG       ReceiptTaxDetailTaxCurrencyCode = "SDG"
	ReceiptTaxDetailTaxCurrencyCodeSEK       ReceiptTaxDetailTaxCurrencyCode = "SEK"
	ReceiptTaxDetailTaxCurrencyCodeSGD       ReceiptTaxDetailTaxCurrencyCode = "SGD"
	ReceiptTaxDetailTaxCurrencyCodeSHP       ReceiptTaxDetailTaxCurrencyCode = "SHP"
	ReceiptTaxDetailTaxCurrencyCodeSLE       ReceiptTaxDetailTaxCurrencyCode = "SLE"
	ReceiptTaxDetailTaxCurrencyCodeSLL       ReceiptTaxDetailTaxCurrencyCode = "SLL"
	ReceiptTaxDetailTaxCurrencyCodeSOS       ReceiptTaxDetailTaxCurrencyCode = "SOS"
	ReceiptTaxDetailTaxCurrencyCodeSRD       ReceiptTaxDetailTaxCurrencyCode = "SRD"
	ReceiptTaxDetailTaxCurrencyCodeSSP       ReceiptTaxDetailTaxCurrencyCode = "SSP"
	ReceiptTaxDetailTaxCurrencyCodeSTD       ReceiptTaxDetailTaxCurrencyCode = "STD"
	ReceiptTaxDetailTaxCurrencyCodeSTN       ReceiptTaxDetailTaxCurrencyCode = "STN"
	ReceiptTaxDetailTaxCurrencyCodeSVC       ReceiptTaxDetailTaxCurrencyCode = "SVC"
	ReceiptTaxDetailTaxCurrencyCodeSYP       ReceiptTaxDetailTaxCurrencyCode = "SYP"
	ReceiptTaxDetailTaxCurrencyCodeSZL       ReceiptTaxDetailTaxCurrencyCode = "SZL"
	ReceiptTaxDetailTaxCurrencyCodeTHB       ReceiptTaxDetailTaxCurrencyCode = "THB"
	ReceiptTaxDetailTaxCurrencyCodeTJS       ReceiptTaxDetailTaxCurrencyCode = "TJS"
	ReceiptTaxDetailTaxCurrencyCodeTMT       ReceiptTaxDetailTaxCurrencyCode = "TMT"
	ReceiptTaxDetailTaxCurrencyCodeTND       ReceiptTaxDetailTaxCurrencyCode = "TND"
	ReceiptTaxDetailTaxCurrencyCodeTOP       ReceiptTaxDetailTaxCurrencyCode = "TOP"
	ReceiptTaxDetailTaxCurrencyCodeTRY       ReceiptTaxDetailTaxCurrencyCode = "TRY"
	ReceiptTaxDetailTaxCurrencyCodeTTD       ReceiptTaxDetailTaxCurrencyCode = "TTD"
	ReceiptTaxDetailTaxCurrencyCodeTWD       ReceiptTaxDetailTaxCurrencyCode = "TWD"
	ReceiptTaxDetailTaxCurrencyCodeTZS       ReceiptTaxDetailTaxCurrencyCode = "TZS"
	ReceiptTaxDetailTaxCurrencyCodeUAH       ReceiptTaxDetailTaxCurrencyCode = "UAH"
	ReceiptTaxDetailTaxCurrencyCodeUGX       ReceiptTaxDetailTaxCurrencyCode = "UGX"
	ReceiptTaxDetailTaxCurrencyCodeUNDEFINED ReceiptTaxDetailTaxCurrencyCode = "UNDEFINED"
	ReceiptTaxDetailTaxCurrencyCodeUSD       ReceiptTaxDetailTaxCurrencyCode = "USD"
	ReceiptTaxDetailTaxCurrencyCodeUSN       ReceiptTaxDetailTaxCurrencyCode = "USN"
	ReceiptTaxDetailTaxCurrencyCodeUSS       ReceiptTaxDetailTaxCurrencyCode = "USS"
	ReceiptTaxDetailTaxCurrencyCodeUYI       ReceiptTaxDetailTaxCurrencyCode = "UYI"
	ReceiptTaxDetailTaxCurrencyCodeUYU       ReceiptTaxDetailTaxCurrencyCode = "UYU"
	ReceiptTaxDetailTaxCurrencyCodeUZS       ReceiptTaxDetailTaxCurrencyCode = "UZS"
	ReceiptTaxDetailTaxCurrencyCodeVEF       ReceiptTaxDetailTaxCurrencyCode = "VEF"
	ReceiptTaxDetailTaxCurrencyCodeVES       ReceiptTaxDetailTaxCurrencyCode = "VES"
	ReceiptTaxDetailTaxCurrencyCodeVND       ReceiptTaxDetailTaxCurrencyCode = "VND"
	ReceiptTaxDetailTaxCurrencyCodeVUV       ReceiptTaxDetailTaxCurrencyCode = "VUV"
	ReceiptTaxDetailTaxCurrencyCodeWST       ReceiptTaxDetailTaxCurrencyCode = "WST"
	ReceiptTaxDetailTaxCurrencyCodeXAF       ReceiptTaxDetailTaxCurrencyCode = "XAF"
	ReceiptTaxDetailTaxCurrencyCodeXAG       ReceiptTaxDetailTaxCurrencyCode = "XAG"
	ReceiptTaxDetailTaxCurrencyCodeXAU       ReceiptTaxDetailTaxCurrencyCode = "XAU"
	ReceiptTaxDetailTaxCurrencyCodeXBA       ReceiptTaxDetailTaxCurrencyCode = "XBA"
	ReceiptTaxDetailTaxCurrencyCodeXBB       ReceiptTaxDetailTaxCurrencyCode = "XBB"
	ReceiptTaxDetailTaxCurrencyCodeXBC       ReceiptTaxDetailTaxCurrencyCode = "XBC"
	ReceiptTaxDetailTaxCurrencyCodeXBD       ReceiptTaxDetailTaxCurrencyCode = "XBD"
	ReceiptTaxDetailTaxCurrencyCodeXCD       ReceiptTaxDetailTaxCurrencyCode = "XCD"
	ReceiptTaxDetailTaxCurrencyCodeXDR       ReceiptTaxDetailTaxCurrencyCode = "XDR"
	ReceiptTaxDetailTaxCurrencyCodeXOF       ReceiptTaxDetailTaxCurrencyCode = "XOF"
	ReceiptTaxDetailTaxCurrencyCodeXPD       ReceiptTaxDetailTaxCurrencyCode = "XPD"
	ReceiptTaxDetailTaxCurrencyCodeXPF       ReceiptTaxDetailTaxCurrencyCode = "XPF"
	ReceiptTaxDetailTaxCurrencyCodeXPT       ReceiptTaxDetailTaxCurrencyCode = "XPT"
	ReceiptTaxDetailTaxCurrencyCodeXSU       ReceiptTaxDetailTaxCurrencyCode = "XSU"
	ReceiptTaxDetailTaxCurrencyCodeXTS       ReceiptTaxDetailTaxCurrencyCode = "XTS"
	ReceiptTaxDetailTaxCurrencyCodeXUA       ReceiptTaxDetailTaxCurrencyCode = "XUA"
	ReceiptTaxDetailTaxCurrencyCodeXXX       ReceiptTaxDetailTaxCurrencyCode = "XXX"
	ReceiptTaxDetailTaxCurrencyCodeYER       ReceiptTaxDetailTaxCurrencyCode = "YER"
	ReceiptTaxDetailTaxCurrencyCodeZAR       ReceiptTaxDetailTaxCurrencyCode = "ZAR"
	ReceiptTaxDetailTaxCurrencyCodeZMW       ReceiptTaxDetailTaxCurrencyCode = "ZMW"
	ReceiptTaxDetailTaxCurrencyCodeZWL       ReceiptTaxDetailTaxCurrencyCode = "ZWL"
)

// Defines values for RecurrenceRuleDays.
const (
	RecurrenceRuleDaysFRIDAY    RecurrenceRuleDays = "FRIDAY"
	RecurrenceRuleDaysMONDAY    RecurrenceRuleDays = "MONDAY"
	RecurrenceRuleDaysSATURDAY  RecurrenceRuleDays = "SATURDAY"
	RecurrenceRuleDaysSUNDAY    RecurrenceRuleDays = "SUNDAY"
	RecurrenceRuleDaysTHURSDAY  RecurrenceRuleDays = "THURSDAY"
	RecurrenceRuleDaysTUESDAY   RecurrenceRuleDays = "TUESDAY"
	RecurrenceRuleDaysWEDNESDAY RecurrenceRuleDays = "WEDNESDAY"
)

// Defines values for RecurrenceRuleFrequency.
const (
	RecurrenceRuleFrequencyDAILY             RecurrenceRuleFrequency = "DAILY"
	RecurrenceRuleFrequencyENGLISHQUARTERLY  RecurrenceRuleFrequency = "ENGLISH_QUARTERLY"
	RecurrenceRuleFrequencyHOURLY            RecurrenceRuleFrequency = "HOURLY"
	RecurrenceRuleFrequencyMILLENNIALY       RecurrenceRuleFrequency = "MILLENNIALY"
	RecurrenceRuleFrequencyMINUTELY          RecurrenceRuleFrequency = "MINUTELY"
	RecurrenceRuleFrequencyMONTHLY           RecurrenceRuleFrequency = "MONTHLY"
	RecurrenceRuleFrequencyRECEIVEDQUARTERLY RecurrenceRuleFrequency = "RECEIVED_QUARTERLY"
	RecurrenceRuleFrequencySCOTTISHQUARTERLY RecurrenceRuleFrequency = "SCOTTISH_QUARTERLY"
	RecurrenceRuleFrequencySECONDLY          RecurrenceRuleFrequency = "SECONDLY"
	RecurrenceRuleFrequencyWEEKLY            RecurrenceRuleFrequency = "WEEKLY"
	RecurrenceRuleFrequencyWORKINGDAILY      RecurrenceRuleFrequency = "WORKING_DAILY"
	RecurrenceRuleFrequencyYEARLY            RecurrenceRuleFrequency = "YEARLY"
)

// Defines values for RecurrenceRuleWeekStart.
const (
	RecurrenceRuleWeekStartFRIDAY    RecurrenceRuleWeekStart = "FRIDAY"
	RecurrenceRuleWeekStartMONDAY    RecurrenceRuleWeekStart = "MONDAY"
	RecurrenceRuleWeekStartSATURDAY  RecurrenceRuleWeekStart = "SATURDAY"
	RecurrenceRuleWeekStartSUNDAY    RecurrenceRuleWeekStart = "SUNDAY"
	RecurrenceRuleWeekStartTHURSDAY  RecurrenceRuleWeekStart = "THURSDAY"
	RecurrenceRuleWeekStartTUESDAY   RecurrenceRuleWeekStart = "TUESDAY"
	RecurrenceRuleWeekStartWEDNESDAY RecurrenceRuleWeekStart = "WEDNESDAY"
)

// Defines values for RecurrenceRuleV2Days.
const (
	FRIDAY    RecurrenceRuleV2Days = "FRIDAY"
	MONDAY    RecurrenceRuleV2Days = "MONDAY"
	SATURDAY  RecurrenceRuleV2Days = "SATURDAY"
	SUNDAY    RecurrenceRuleV2Days = "SUNDAY"
	THURSDAY  RecurrenceRuleV2Days = "THURSDAY"
	TUESDAY   RecurrenceRuleV2Days = "TUESDAY"
	WEDNESDAY RecurrenceRuleV2Days = "WEDNESDAY"
)

// Defines values for RecurrenceRuleV2Frequency.
const (
	RecurrenceRuleV2FrequencyDAILY   RecurrenceRuleV2Frequency = "DAILY"
	RecurrenceRuleV2FrequencyMONTHLY RecurrenceRuleV2Frequency = "MONTHLY"
	RecurrenceRuleV2FrequencyWEEKLY  RecurrenceRuleV2Frequency = "WEEKLY"
	RecurrenceRuleV2FrequencyYEARLY  RecurrenceRuleV2Frequency = "YEARLY"
)

// Defines values for RecurringCardPaymentStatus.
const (
	RecurringCardPaymentStatusACTIVE       RecurringCardPaymentStatus = "ACTIVE"
	RecurringCardPaymentStatusCANCELLED    RecurringCardPaymentStatus = "CANCELLED"
	RecurringCardPaymentStatusMARKEDHIDDEN RecurringCardPaymentStatus = "MARKED_HIDDEN"
)

// Defines values for SavingsGoalOrderedState.
const (
	SavingsGoalOrderedStateACTIVE    SavingsGoalOrderedState = "ACTIVE"
	SavingsGoalOrderedStateARCHIVED  SavingsGoalOrderedState = "ARCHIVED"
	SavingsGoalOrderedStateARCHIVING SavingsGoalOrderedState = "ARCHIVING"
	SavingsGoalOrderedStateCREATING  SavingsGoalOrderedState = "CREATING"
	SavingsGoalOrderedStatePENDING   SavingsGoalOrderedState = "PENDING"
	SavingsGoalOrderedStateRESTORING SavingsGoalOrderedState = "RESTORING"
)

// Defines values for SavingsGoalV2State.
const (
	SavingsGoalV2StateACTIVE    SavingsGoalV2State = "ACTIVE"
	SavingsGoalV2StateARCHIVED  SavingsGoalV2State = "ARCHIVED"
	SavingsGoalV2StateARCHIVING SavingsGoalV2State = "ARCHIVING"
	SavingsGoalV2StateCREATING  SavingsGoalV2State = "CREATING"
	SavingsGoalV2StatePENDING   SavingsGoalV2State = "PENDING"
	SavingsGoalV2StateRESTORING SavingsGoalV2State = "RESTORING"
)

// Defines values for ScheduledPaymentPaymentType.
const (
	DIRECTDEBIT      ScheduledPaymentPaymentType = "DIRECT_DEBIT"
	INTERNALTRANSFER ScheduledPaymentPaymentType = "INTERNAL_TRANSFER"
	STANDINGORDER    ScheduledPaymentPaymentType = "STANDING_ORDER"
)

// Defines values for ScheduledPaymentSpendingCategory.
const (
	ScheduledPaymentSpendingCategoryADMIN                 ScheduledPaymentSpendingCategory = "ADMIN"
	ScheduledPaymentSpendingCategoryBANKCHARGES           ScheduledPaymentSpendingCategory = "BANK_CHARGES"
	ScheduledPaymentSpendingCategoryBIKE                  ScheduledPaymentSpendingCategory = "BIKE"
	ScheduledPaymentSpendingCategoryBILLSANDSERVICES      ScheduledPaymentSpendingCategory = "BILLS_AND_SERVICES"
	ScheduledPaymentSpendingCategoryBUCKETLIST            ScheduledPaymentSpendingCategory = "BUCKET_LIST"
	ScheduledPaymentSpendingCategoryBUSINESSENTERTAINMENT ScheduledPaymentSpendingCategory = "BUSINESS_ENTERTAINMENT"
	ScheduledPaymentSpendingCategoryCAR                   ScheduledPaymentSpendingCategory = "CAR"
	ScheduledPaymentSpendingCategoryCASH                  ScheduledPaymentSpendingCategory = "CASH"
	ScheduledPaymentSpendingCategoryCELEBRATION           ScheduledPaymentSpendingCategory = "CELEBRATION"
	ScheduledPaymentSpendingCategoryCHARITY               ScheduledPaymentSpendingCategory = "CHARITY"
	ScheduledPaymentSpendingCategoryCHILDREN              ScheduledPaymentSpendingCategory = "CHILDREN"
	ScheduledPaymentSpendingCategoryCLIENTREFUNDS         ScheduledPaymentSpendingCategory = "CLIENT_REFUNDS"
	ScheduledPaymentSpendingCategoryCLOTHES               ScheduledPaymentSpendingCategory = "CLOTHES"
	ScheduledPaymentSpendingCategoryCOFFEE                ScheduledPaymentSpendingCategory = "COFFEE"
	ScheduledPaymentSpendingCategoryCORPORATIONTAX        ScheduledPaymentSpendingCategory = "CORPORATION_TAX"
	ScheduledPaymentSpendingCategoryDEBTREPAYMENT         ScheduledPaymentSpendingCategory = "DEBT_REPAYMENT"
	ScheduledPaymentSpendingCategoryDIRECTORSWAGES        ScheduledPaymentSpendingCategory = "DIRECTORS_WAGES"
	ScheduledPaymentSpendingCategoryDIVIDENDS             ScheduledPaymentSpendingCategory = "DIVIDENDS"
	ScheduledPaymentSpendingCategoryDIY                   ScheduledPaymentSpendingCategory = "DIY"
	ScheduledPaymentSpendingCategoryDRINKS                ScheduledPaymentSpendingCategory = "DRINKS"
	ScheduledPaymentSpendingCategoryEATINGOUT             ScheduledPaymentSpendingCategory = "EATING_OUT"
	ScheduledPaymentSpendingCategoryEDUCATION             ScheduledPaymentSpendingCategory = "EDUCATION"
	ScheduledPaymentSpendingCategoryEMERGENCY             ScheduledPaymentSpendingCategory = "EMERGENCY"
	ScheduledPaymentSpendingCategoryENTERTAINMENT         ScheduledPaymentSpendingCategory = "ENTERTAINMENT"
	ScheduledPaymentSpendingCategoryEQUIPMENT             ScheduledPaymentSpendingCategory = "EQUIPMENT"
	ScheduledPaymentSpendingCategoryESSENTIALSPEND        ScheduledPaymentSpendingCategory = "ESSENTIAL_SPEND"
	ScheduledPaymentSpendingCategoryEXPENSES              ScheduledPaymentSpendingCategory = "EXPENSES"
	ScheduledPaymentSpendingCategoryFAMILY                ScheduledPaymentSpendingCategory = "FAMILY"
	ScheduledPaymentSpendingCategoryFITNESS               ScheduledPaymentSpendingCategory = "FITNESS"
	ScheduledPaymentSpendingCategoryFOODANDDRINK          ScheduledPaymentSpendingCategory = "FOOD_AND_DRINK"
	ScheduledPaymentSpendingCategoryFUEL                  ScheduledPaymentSpendingCategory = "FUEL"
	ScheduledPaymentSpendingCategoryGAMBLING              ScheduledPaymentSpendingCategory = "GAMBLING"
	ScheduledPaymentSpendingCategoryGAMING                ScheduledPaymentSpendingCategory = "GAMING"
	ScheduledPaymentSpendingCategoryGARDEN                ScheduledPaymentSpendingCategory = "GARDEN"
	ScheduledPaymentSpendingCategoryGENERAL               ScheduledPaymentSpendingCategory = "GENERAL"
	ScheduledPaymentSpendingCategoryGIFTS                 ScheduledPaymentSpendingCategory = "GIFTS"
	ScheduledPaymentSpendingCategoryGROCERIES             ScheduledPaymentSpendingCategory = "GROCERIES"
	ScheduledPaymentSpendingCategoryHOBBY                 ScheduledPaymentSpendingCategory = "HOBBY"
	ScheduledPaymentSpendingCategoryHOLIDAYS              ScheduledPaymentSpendingCategory = "HOLIDAYS"
	ScheduledPaymentSpendingCategoryHOME                  ScheduledPaymentSpendingCategory = "HOME"
	ScheduledPaymentSpendingCategoryIMPULSEBUY            ScheduledPaymentSpendingCategory = "IMPULSE_BUY"
	ScheduledPaymentSpendingCategoryINCOME                ScheduledPaymentSpendingCategory = "INCOME"
	ScheduledPaymentSpendingCategoryINSURANCE             ScheduledPaymentSpendingCategory = "INSURANCE"
	ScheduledPaymentSpendingCategoryINTERESTPAYMENTS      ScheduledPaymentSpendingCategory = "INTEREST_PAYMENTS"
	ScheduledPaymentSpendingCategoryINVENTORY             ScheduledPaymentSpendingCategory = "INVENTORY"
	ScheduledPaymentSpendingCategoryINVESTMENTCAPITAL     ScheduledPaymentSpendingCategory = "INVESTMENT_CAPITAL"
	ScheduledPaymentSpendingCategoryINVESTMENTS           ScheduledPaymentSpendingCategory = "INVESTMENTS"
	ScheduledPaymentSpendingCategoryLIFESTYLE             ScheduledPaymentSpendingCategory = "LIFESTYLE"
	ScheduledPaymentSpendingCategoryLOANPRINCIPAL         ScheduledPaymentSpendingCategory = "LOAN_PRINCIPAL"
	ScheduledPaymentSpendingCategoryMAINTENANCEANDREPAIRS ScheduledPaymentSpendingCategory = "MAINTENANCE_AND_REPAIRS"
	ScheduledPaymentSpendingCategoryMARKETING             ScheduledPaymentSpendingCategory = "MARKETING"
	ScheduledPaymentSpendingCategoryMEDICAL               ScheduledPaymentSpendingCategory = "MEDICAL"
	ScheduledPaymentSpendingCategoryMORTGAGE              ScheduledPaymentSpendingCategory = "MORTGAGE"
	ScheduledPaymentSpendingCategoryNONE                  ScheduledPaymentSpendingCategory = "NONE"
	ScheduledPaymentSpendingCategoryNONESSENTIALSPEND     ScheduledPaymentSpendingCategory = "NON_ESSENTIAL_SPEND"
	ScheduledPaymentSpendingCategoryOTHER                 ScheduledPaymentSpendingCategory = "OTHER"
	ScheduledPaymentSpendingCategoryOTHERINCOME           ScheduledPaymentSpendingCategory = "OTHER_INCOME"
	ScheduledPaymentSpendingCategoryPAYMENTS              ScheduledPaymentSpendingCategory = "PAYMENTS"
	ScheduledPaymentSpendingCategoryPERSONAL              ScheduledPaymentSpendingCategory = "PERSONAL"
	ScheduledPaymentSpendingCategoryPERSONALCARE          ScheduledPaymentSpendingCategory = "PERSONAL_CARE"
	ScheduledPaymentSpendingCategoryPERSONALTRANSFERS     ScheduledPaymentSpendingCategory = "PERSONAL_TRANSFERS"
	ScheduledPaymentSpendingCategoryPETS                  ScheduledPaymentSpendingCategory = "PETS"
	ScheduledPaymentSpendingCategoryPHONEANDINTERNET      ScheduledPaymentSpendingCategory = "PHONE_AND_INTERNET"
	ScheduledPaymentSpendingCategoryPROFESSIONALSERVICES  ScheduledPaymentSpendingCategory = "PROFESSIONAL_SERVICES"
	ScheduledPaymentSpendingCategoryPROJECTS              ScheduledPaymentSpendingCategory = "PROJECTS"
	ScheduledPaymentSpendingCategoryRELATIONSHIPS         ScheduledPaymentSpendingCategory = "RELATIONSHIPS"
	ScheduledPaymentSpendingCategoryRENT                  ScheduledPaymentSpendingCategory = "RENT"
	ScheduledPaymentSpendingCategoryREPAIRSANDMAINTENANCE ScheduledPaymentSpendingCategory = "REPAIRS_AND_MAINTENANCE"
	ScheduledPaymentSpendingCategoryREVENUE               ScheduledPaymentSpendingCategory = "REVENUE"
	ScheduledPaymentSpendingCategorySAVING                ScheduledPaymentSpendingCategory = "SAVING"
	ScheduledPaymentSpendingCategorySELFASSESSMENTTAX     ScheduledPaymentSpendingCategory = "SELF_ASSESSMENT_TAX"
	ScheduledPaymentSpendingCategorySHOPPING              ScheduledPaymentSpendingCategory = "SHOPPING"
	ScheduledPaymentSpendingCategorySTAFF                 ScheduledPaymentSpendingCategory = "STAFF"
	ScheduledPaymentSpendingCategorySUBSCRIPTIONS         ScheduledPaymentSpendingCategory = "SUBSCRIPTIONS"
	ScheduledPaymentSpendingCategoryTAKEAWAY              ScheduledPaymentSpendingCategory = "TAKEAWAY"
	ScheduledPaymentSpendingCategoryTAXI                  ScheduledPaymentSpendingCategory = "TAXI"
	ScheduledPaymentSpendingCategoryTRANSFERS             ScheduledPaymentSpendingCategory = "TRANSFERS"
	ScheduledPaymentSpendingCategoryTRANSPORT             ScheduledPaymentSpendingCategory = "TRANSPORT"
	ScheduledPaymentSpendingCategoryTRAVEL                ScheduledPaymentSpendingCategory = "TRAVEL"
	ScheduledPaymentSpendingCategoryTREATS                ScheduledPaymentSpendingCategory = "TREATS"
	ScheduledPaymentSpendingCategoryVAT                   ScheduledPaymentSpendingCategory = "VAT"
	ScheduledPaymentSpendingCategoryVEHICLES              ScheduledPaymentSpendingCategory = "VEHICLES"
	ScheduledPaymentSpendingCategoryWEDDING               ScheduledPaymentSpendingCategory = "WEDDING"
	ScheduledPaymentSpendingCategoryWELLBEING             ScheduledPaymentSpendingCategory = "WELLBEING"
	ScheduledPaymentSpendingCategoryWORKPLACE             ScheduledPaymentSpendingCategory = "WORKPLACE"
)

// Defines values for SettleUpProfileStatus.
const (
	SettleUpProfileStatusACTIVE   SettleUpProfileStatus = "ACTIVE"
	SettleUpProfileStatusCLOSED   SettleUpProfileStatus = "CLOSED"
	SettleUpProfileStatusINACTIVE SettleUpProfileStatus = "INACTIVE"
)

// Defines values for SoleTraderBusinessCategory.
const (
	SoleTraderBusinessCategoryARTSCRAFTSANDCOLLECTIBLES        SoleTraderBusinessCategory = "ARTS_CRAFTS_AND_COLLECTIBLES"
	SoleTraderBusinessCategoryBABY                             SoleTraderBusinessCategory = "BABY"
	SoleTraderBusinessCategoryBEAUTYANDFRAGRANCES              SoleTraderBusinessCategory = "BEAUTY_AND_FRAGRANCES"
	SoleTraderBusinessCategoryBOOKSANDMAGAZINES                SoleTraderBusinessCategory = "BOOKS_AND_MAGAZINES"
	SoleTraderBusinessCategoryBUSINESSTOBUSINESS               SoleTraderBusinessCategory = "BUSINESS_TO_BUSINESS"
	SoleTraderBusinessCategoryCLOTHINGACCESSORIESANDSHOES      SoleTraderBusinessCategory = "CLOTHING_ACCESSORIES_AND_SHOES"
	SoleTraderBusinessCategoryCOMPUTERSACCESSORIESANDSERVICES  SoleTraderBusinessCategory = "COMPUTERS_ACCESSORIES_AND_SERVICES"
	SoleTraderBusinessCategoryCONSTRUCTIONTRADESANDCLEANING    SoleTraderBusinessCategory = "CONSTRUCTION_TRADES_AND_CLEANING"
	SoleTraderBusinessCategoryEDUCATION                        SoleTraderBusinessCategory = "EDUCATION"
	SoleTraderBusinessCategoryEDUCATIONANDSKILLS               SoleTraderBusinessCategory = "EDUCATION_AND_SKILLS"
	SoleTraderBusinessCategoryELECTRONICSANDTELECOM            SoleTraderBusinessCategory = "ELECTRONICS_AND_TELECOM"
	SoleTraderBusinessCategoryENTERTAINMENTANDMEDIA            SoleTraderBusinessCategory = "ENTERTAINMENT_AND_MEDIA"
	SoleTraderBusinessCategoryENTERTAINMENTANDTRAVEL           SoleTraderBusinessCategory = "ENTERTAINMENT_AND_TRAVEL"
	SoleTraderBusinessCategoryEXERCISEANDFITNESS               SoleTraderBusinessCategory = "EXERCISE_AND_FITNESS"
	SoleTraderBusinessCategoryFINANCIALSERVICESANDPRODUCTS     SoleTraderBusinessCategory = "FINANCIAL_SERVICES_AND_PRODUCTS"
	SoleTraderBusinessCategoryFOODRETAILANDSERVICE             SoleTraderBusinessCategory = "FOOD_RETAIL_AND_SERVICE"
	SoleTraderBusinessCategoryGIFTSANDFLOWERS                  SoleTraderBusinessCategory = "GIFTS_AND_FLOWERS"
	SoleTraderBusinessCategoryHEALTHANDPERSONALCARE            SoleTraderBusinessCategory = "HEALTH_AND_PERSONAL_CARE"
	SoleTraderBusinessCategoryHEALTHANDSOCIALCARE              SoleTraderBusinessCategory = "HEALTH_AND_SOCIAL_CARE"
	SoleTraderBusinessCategoryHOMEANDGARDEN                    SoleTraderBusinessCategory = "HOME_AND_GARDEN"
	SoleTraderBusinessCategoryMANUFACTURINGRNDANDAGRICULTURE   SoleTraderBusinessCategory = "MANUFACTURING_RND_AND_AGRICULTURE"
	SoleTraderBusinessCategoryNONPROFIT                        SoleTraderBusinessCategory = "NONPROFIT"
	SoleTraderBusinessCategoryNONPROFIT1                       SoleTraderBusinessCategory = "NON_PROFIT"
	SoleTraderBusinessCategoryNOTPROVIDED                      SoleTraderBusinessCategory = "NOT_PROVIDED"
	SoleTraderBusinessCategoryPETSANDANIMALS                   SoleTraderBusinessCategory = "PETS_AND_ANIMALS"
	SoleTraderBusinessCategoryPROFESSIONALSERVICES             SoleTraderBusinessCategory = "PROFESSIONAL_SERVICES"
	SoleTraderBusinessCategoryPROPERTY                         SoleTraderBusinessCategory = "PROPERTY"
	SoleTraderBusinessCategoryRELIGIONANDSPIRITUALITYFORPROFIT SoleTraderBusinessCategory = "RELIGION_AND_SPIRITUALITY_FOR_PROFIT"
	SoleTraderBusinessCategoryRETAILBARSANDRESTAURANTS         SoleTraderBusinessCategory = "RETAIL_BARS_AND_RESTAURANTS"
	SoleTraderBusinessCategoryRETAILNOTELSEWHERECLASSIFIED     SoleTraderBusinessCategory = "RETAIL_NOT_ELSEWHERE_CLASSIFIED"
	SoleTraderBusinessCategorySERVICESOTHER                    SoleTraderBusinessCategory = "SERVICES_OTHER"
	SoleTraderBusinessCategorySPORTSANDOUTDOORS                SoleTraderBusinessCategory = "SPORTS_AND_OUTDOORS"
	SoleTraderBusinessCategoryTOYSANDHOBBIES                   SoleTraderBusinessCategory = "TOYS_AND_HOBBIES"
	SoleTraderBusinessCategoryTRANSPORTANDVEHICLES             SoleTraderBusinessCategory = "TRANSPORT_AND_VEHICLES"
	SoleTraderBusinessCategoryTRAVEL                           SoleTraderBusinessCategory = "TRAVEL"
	SoleTraderBusinessCategoryVEHICLESERVICEANDACCESSORIES     SoleTraderBusinessCategory = "VEHICLE_SERVICE_AND_ACCESSORIES"
)

// Defines values for SoleTraderBusinessSubCategory.
const (
	SoleTraderBusinessSubCategoryACCESSORIES                                  SoleTraderBusinessSubCategory = "ACCESSORIES"
	SoleTraderBusinessSubCategoryACCOUNTANCYANDBOOKKEEPING                    SoleTraderBusinessSubCategory = "ACCOUNTANCY_AND_BOOKKEEPING"
	SoleTraderBusinessSubCategoryACCOUNTING                                   SoleTraderBusinessSubCategory = "ACCOUNTING"
	SoleTraderBusinessSubCategoryADULTINDUSTRY                                SoleTraderBusinessSubCategory = "ADULT_INDUSTRY"
	SoleTraderBusinessSubCategoryADVERTISING                                  SoleTraderBusinessSubCategory = "ADVERTISING"
	SoleTraderBusinessSubCategoryAGRICULTURAL                                 SoleTraderBusinessSubCategory = "AGRICULTURAL"
	SoleTraderBusinessSubCategoryAIRLINE                                      SoleTraderBusinessSubCategory = "AIRLINE"
	SoleTraderBusinessSubCategoryALCOHOLICBEVERAGES                           SoleTraderBusinessSubCategory = "ALCOHOLIC_BEVERAGES"
	SoleTraderBusinessSubCategoryANIMALCARE                                   SoleTraderBusinessSubCategory = "ANIMAL_CARE"
	SoleTraderBusinessSubCategoryANIMALS                                      SoleTraderBusinessSubCategory = "ANIMALS"
	SoleTraderBusinessSubCategoryANTIQUEARTDEALER                             SoleTraderBusinessSubCategory = "ANTIQUE_ART_DEALER"
	SoleTraderBusinessSubCategoryAPPLIANCES                                   SoleTraderBusinessSubCategory = "APPLIANCES"
	SoleTraderBusinessSubCategoryARCHITECTSTRUCTURALENGINEERORSURVEYOR        SoleTraderBusinessSubCategory = "ARCHITECT_STRUCTURAL_ENGINEER_OR_SURVEYOR"
	SoleTraderBusinessSubCategoryARCHITECTURALENGINEERINGANDSURVEYINGSERVICES SoleTraderBusinessSubCategory = "ARCHITECTURAL_ENGINEERING_AND_SURVEYING_SERVICES"
	SoleTraderBusinessSubCategoryARMSMANUFACTURER                             SoleTraderBusinessSubCategory = "ARMS_MANUFACTURER"
	SoleTraderBusinessSubCategoryARTANDCRAFTSUPPLIES                          SoleTraderBusinessSubCategory = "ART_AND_CRAFT_SUPPLIES"
	SoleTraderBusinessSubCategoryARTDEALERSANDGALLERIES                       SoleTraderBusinessSubCategory = "ART_DEALERS_AND_GALLERIES"
	SoleTraderBusinessSubCategoryARTSANDCRAFTS                                SoleTraderBusinessSubCategory = "ARTS_AND_CRAFTS"
	SoleTraderBusinessSubCategoryARTSCULTUREANDHUMANITIES                     SoleTraderBusinessSubCategory = "ARTS_CULTURE_AND_HUMANITIES"
	SoleTraderBusinessSubCategoryASSETFINANCE                                 SoleTraderBusinessSubCategory = "ASSET_FINANCE"
	SoleTraderBusinessSubCategoryASSETMANAGEMENT                              SoleTraderBusinessSubCategory = "ASSET_MANAGEMENT"
	SoleTraderBusinessSubCategoryATHLETICSHOES                                SoleTraderBusinessSubCategory = "ATHLETIC_SHOES"
	SoleTraderBusinessSubCategoryATHOMESERVICES                               SoleTraderBusinessSubCategory = "AT_HOME_SERVICES"
	SoleTraderBusinessSubCategoryAUCTIONHOUSE                                 SoleTraderBusinessSubCategory = "AUCTION_HOUSE"
	SoleTraderBusinessSubCategoryAUDIOANDVIDEO                                SoleTraderBusinessSubCategory = "AUDIO_AND_VIDEO"
	SoleTraderBusinessSubCategoryAUDIOBOOKS                                   SoleTraderBusinessSubCategory = "AUDIO_BOOKS"
	SoleTraderBusinessSubCategoryAUTOBODYREPAIRANDPAINT                       SoleTraderBusinessSubCategory = "AUTO_BODY_REPAIR_AND_PAINT"
	SoleTraderBusinessSubCategoryAUTOMOTIVETIRESUPPLYANDSERVICE               SoleTraderBusinessSubCategory = "AUTOMOTIVE_TIRE_SUPPLY_AND_SERVICE"
	SoleTraderBusinessSubCategoryAUTORENTAL                                   SoleTraderBusinessSubCategory = "AUTO_RENTAL"
	SoleTraderBusinessSubCategoryAUTOSERVICE                                  SoleTraderBusinessSubCategory = "AUTO_SERVICE"
	SoleTraderBusinessSubCategoryBABYPRODUCTSOTHER                            SoleTraderBusinessSubCategory = "BABY_PRODUCTS_OTHER"
	SoleTraderBusinessSubCategoryBATHANDBODY                                  SoleTraderBusinessSubCategory = "BATH_AND_BODY"
	SoleTraderBusinessSubCategoryBEARERSHARES                                 SoleTraderBusinessSubCategory = "BEARER_SHARES"
	SoleTraderBusinessSubCategoryBEDANDBATH                                   SoleTraderBusinessSubCategory = "BED_AND_BATH"
	SoleTraderBusinessSubCategoryBICYCLESHOPS                                 SoleTraderBusinessSubCategory = "BICYCLE_SHOPS"
	SoleTraderBusinessSubCategoryBICYCLESHOPSERVICEANDREPAIR                  SoleTraderBusinessSubCategory = "BICYCLE_SHOP_SERVICE_AND_REPAIR"
	SoleTraderBusinessSubCategoryBOATINGSAILINGANDACCESSORIES                 SoleTraderBusinessSubCategory = "BOATING_SAILING_AND_ACCESSORIES"
	SoleTraderBusinessSubCategoryBOATRENTALANDLEASES                          SoleTraderBusinessSubCategory = "BOAT_RENTAL_AND_LEASES"
	SoleTraderBusinessSubCategoryBOOKSPUBLISHINGANDPRINTING                   SoleTraderBusinessSubCategory = "BOOKS_PUBLISHING_AND_PRINTING"
	SoleTraderBusinessSubCategoryBUSINESSANDSECRETARIALSCHOOLS                SoleTraderBusinessSubCategory = "BUSINESS_AND_SECRETARIAL_SCHOOLS"
	SoleTraderBusinessSubCategoryBUSINESSSERVICES                             SoleTraderBusinessSubCategory = "BUSINESS_SERVICES"
	SoleTraderBusinessSubCategoryBUSLINE                                      SoleTraderBusinessSubCategory = "BUS_LINE"
	SoleTraderBusinessSubCategoryBUYNOWPAYLATER                               SoleTraderBusinessSubCategory = "BUY_NOW_PAY_LATER"
	SoleTraderBusinessSubCategoryCABLESATELLITEANDOTHERPAYTVANDRADIO          SoleTraderBusinessSubCategory = "CABLE_SATELLITE_AND_OTHER_PAY_TV_AND_RADIO"
	SoleTraderBusinessSubCategoryCAMERAANDPHOTOGRAPHICSUPPLIES                SoleTraderBusinessSubCategory = "CAMERA_AND_PHOTOGRAPHIC_SUPPLIES"
	SoleTraderBusinessSubCategoryCAMERASCAMCORDERSANDEQUIPMENT                SoleTraderBusinessSubCategory = "CAMERAS_CAMCORDERS_AND_EQUIPMENT"
	SoleTraderBusinessSubCategoryCAMPINGANDOUTDOORS                           SoleTraderBusinessSubCategory = "CAMPING_AND_OUTDOORS"
	SoleTraderBusinessSubCategoryCAREERSERVICES                               SoleTraderBusinessSubCategory = "CAREER_SERVICES"
	SoleTraderBusinessSubCategoryCARPENTRY                                    SoleTraderBusinessSubCategory = "CARPENTRY"
	SoleTraderBusinessSubCategoryCARPENTRYTRADE                               SoleTraderBusinessSubCategory = "CARPENTRY_TRADE"
	SoleTraderBusinessSubCategoryCARWASH                                      SoleTraderBusinessSubCategory = "CAR_WASH"
	SoleTraderBusinessSubCategoryCARWASHING                                   SoleTraderBusinessSubCategory = "CAR_WASHING"
	SoleTraderBusinessSubCategoryCATERING                                     SoleTraderBusinessSubCategory = "CATERING"
	SoleTraderBusinessSubCategoryCATERINGSERVICES                             SoleTraderBusinessSubCategory = "CATERING_SERVICES"
	SoleTraderBusinessSubCategoryCELLPHONESPDASANDPAGERS                      SoleTraderBusinessSubCategory = "CELL_PHONES_PDAS_AND_PAGERS"
	SoleTraderBusinessSubCategoryCHARITY                                      SoleTraderBusinessSubCategory = "CHARITY"
	SoleTraderBusinessSubCategoryCHEMICALSANDALLIEDPRODUCTS                   SoleTraderBusinessSubCategory = "CHEMICALS_AND_ALLIED_PRODUCTS"
	SoleTraderBusinessSubCategoryCHILDCARESERVICES                            SoleTraderBusinessSubCategory = "CHILD_CARE_SERVICES"
	SoleTraderBusinessSubCategoryCHILDDAYCARESERVICES                         SoleTraderBusinessSubCategory = "CHILD_DAYCARE_SERVICES"
	SoleTraderBusinessSubCategoryCHILDMINDER                                  SoleTraderBusinessSubCategory = "CHILDMINDER"
	SoleTraderBusinessSubCategoryCHILDRENSACTIVITIES                          SoleTraderBusinessSubCategory = "CHILDRENS_ACTIVITIES"
	SoleTraderBusinessSubCategoryCHILDRENSCLOTHING                            SoleTraderBusinessSubCategory = "CHILDRENS_CLOTHING"
	SoleTraderBusinessSubCategoryCHILDRENYOUTHANDFAMILY                       SoleTraderBusinessSubCategory = "CHILDREN_YOUTH_AND_FAMILY"
	SoleTraderBusinessSubCategoryCHIROPRACTOROROSTEOPATH                      SoleTraderBusinessSubCategory = "CHIROPRACTOR_OR_OSTEOPATH"
	SoleTraderBusinessSubCategoryCLAIMSMANAGEMENT                             SoleTraderBusinessSubCategory = "CLAIMS_MANAGEMENT"
	SoleTraderBusinessSubCategoryCLASSINSTRUCTOR                              SoleTraderBusinessSubCategory = "CLASS_INSTRUCTOR"
	SoleTraderBusinessSubCategoryCLEANING                                     SoleTraderBusinessSubCategory = "CLEANING"
	SoleTraderBusinessSubCategoryCLEANINGANDMAINTENANCE                       SoleTraderBusinessSubCategory = "CLEANING_AND_MAINTENANCE"
	SoleTraderBusinessSubCategoryCLOTHING                                     SoleTraderBusinessSubCategory = "CLOTHING"
	SoleTraderBusinessSubCategoryCOAL                                         SoleTraderBusinessSubCategory = "COAL"
	SoleTraderBusinessSubCategoryCOFFEEANDTEA                                 SoleTraderBusinessSubCategory = "COFFEE_AND_TEA"
	SoleTraderBusinessSubCategoryCOMMERCIALFISHING                            SoleTraderBusinessSubCategory = "COMMERCIAL_FISHING"
	SoleTraderBusinessSubCategoryCOMMERCIALPHOTOGRAPHY                        SoleTraderBusinessSubCategory = "COMMERCIAL_PHOTOGRAPHY"
	SoleTraderBusinessSubCategoryCOMMERCIALPHOTOGRAPHYARTANDGRAPHICS          SoleTraderBusinessSubCategory = "COMMERCIAL_PHOTOGRAPHY_ART_AND_GRAPHICS"
	SoleTraderBusinessSubCategoryCOMMODITYEXCHANGE                            SoleTraderBusinessSubCategory = "COMMODITY_EXCHANGE"
	SoleTraderBusinessSubCategoryCOMMUNITYDEVELOPMENT                         SoleTraderBusinessSubCategory = "COMMUNITY_DEVELOPMENT"
	SoleTraderBusinessSubCategoryCOMPLIMENTARYANDALTERNATIVEMEDICINE          SoleTraderBusinessSubCategory = "COMPLIMENTARY_AND_ALTERNATIVE_MEDICINE"
	SoleTraderBusinessSubCategoryCOMPUTERANDDATAPROCESSINGSERVICES            SoleTraderBusinessSubCategory = "COMPUTER_AND_DATA_PROCESSING_SERVICES"
	SoleTraderBusinessSubCategoryCOMPUTERDIGITALCONTENT                       SoleTraderBusinessSubCategory = "COMPUTER_DIGITAL_CONTENT"
	SoleTraderBusinessSubCategoryCOMPUTERNETWORKSERVICES                      SoleTraderBusinessSubCategory = "COMPUTER_NETWORK_SERVICES"
	SoleTraderBusinessSubCategoryCONCERTTICKETS                               SoleTraderBusinessSubCategory = "CONCERT_TICKETS"
	SoleTraderBusinessSubCategoryCONSTRUCTION                                 SoleTraderBusinessSubCategory = "CONSTRUCTION"
	SoleTraderBusinessSubCategoryCONSTRUCTIONMATERIAL                         SoleTraderBusinessSubCategory = "CONSTRUCTION_MATERIAL"
	SoleTraderBusinessSubCategoryCONSTRUCTIONSUPPLIER                         SoleTraderBusinessSubCategory = "CONSTRUCTION_SUPPLIER"
	SoleTraderBusinessSubCategoryCONSTRUCTIONTRADESANDCLEANINGOTHER           SoleTraderBusinessSubCategory = "CONSTRUCTION_TRADES_AND_CLEANING_OTHER"
	SoleTraderBusinessSubCategoryCONSULTINGSERVICES                           SoleTraderBusinessSubCategory = "CONSULTING_SERVICES"
	SoleTraderBusinessSubCategoryCOUNSELINGSERVICES                           SoleTraderBusinessSubCategory = "COUNSELING_SERVICES"
	SoleTraderBusinessSubCategoryCOURIERSERVICES                              SoleTraderBusinessSubCategory = "COURIER_SERVICES"
	SoleTraderBusinessSubCategoryCREDITCARDS                                  SoleTraderBusinessSubCategory = "CREDIT_CARDS"
	SoleTraderBusinessSubCategoryCREDITREFERENCEAGENCY                        SoleTraderBusinessSubCategory = "CREDIT_REFERENCE_AGENCY"
	SoleTraderBusinessSubCategoryCROPFARMING                                  SoleTraderBusinessSubCategory = "CROP_FARMING"
	SoleTraderBusinessSubCategoryCRUISES                                      SoleTraderBusinessSubCategory = "CRUISES"
	SoleTraderBusinessSubCategoryCRYPTOEXCHANGE                               SoleTraderBusinessSubCategory = "CRYPTO_EXCHANGE"
	SoleTraderBusinessSubCategoryCURRENCYEXCHANGE                             SoleTraderBusinessSubCategory = "CURRENCY_EXCHANGE"
	SoleTraderBusinessSubCategoryDANCEHALLSSTUDIOSANDSCHOOLS                  SoleTraderBusinessSubCategory = "DANCE_HALLS_STUDIOS_AND_SCHOOLS"
	SoleTraderBusinessSubCategoryDATINGESCORTSERVICES                         SoleTraderBusinessSubCategory = "DATING_ESCORT_SERVICES"
	SoleTraderBusinessSubCategoryDEBTCOLLECTOR                                SoleTraderBusinessSubCategory = "DEBT_COLLECTOR"
	SoleTraderBusinessSubCategoryDEBTCOUNSELINGSERVICE                        SoleTraderBusinessSubCategory = "DEBT_COUNSELING_SERVICE"
	SoleTraderBusinessSubCategoryDEBTMANAGEMENT                               SoleTraderBusinessSubCategory = "DEBT_MANAGEMENT"
	SoleTraderBusinessSubCategoryDECORATING                                   SoleTraderBusinessSubCategory = "DECORATING"
	SoleTraderBusinessSubCategoryDENTAL                                       SoleTraderBusinessSubCategory = "DENTAL"
	SoleTraderBusinessSubCategoryDENTALCARE                                   SoleTraderBusinessSubCategory = "DENTAL_CARE"
	SoleTraderBusinessSubCategoryDEPARTMENTSTORE                              SoleTraderBusinessSubCategory = "DEPARTMENT_STORE"
	SoleTraderBusinessSubCategoryDERIVATIVESTRADING                           SoleTraderBusinessSubCategory = "DERIVATIVES_TRADING"
	SoleTraderBusinessSubCategoryDESKTOPSLAPTOPSANDNOTEBOOKS                  SoleTraderBusinessSubCategory = "DESKTOPS_LAPTOPS_AND_NOTEBOOKS"
	SoleTraderBusinessSubCategoryDIGITALART                                   SoleTraderBusinessSubCategory = "DIGITAL_ART"
	SoleTraderBusinessSubCategoryDIGITALCONTENT                               SoleTraderBusinessSubCategory = "DIGITAL_CONTENT"
	SoleTraderBusinessSubCategoryDIGITALCONTENTORGAMES                        SoleTraderBusinessSubCategory = "DIGITAL_CONTENT_OR_GAMES"
	SoleTraderBusinessSubCategoryDISCOUNTSTORE                                SoleTraderBusinessSubCategory = "DISCOUNT_STORE"
	SoleTraderBusinessSubCategoryDOCTORNURSEORMIDWIFE                         SoleTraderBusinessSubCategory = "DOCTOR_NURSE_OR_MIDWIFE"
	SoleTraderBusinessSubCategoryDRAPERYWINDOWCOVERINGANDUPHOLSTERY           SoleTraderBusinessSubCategory = "DRAPERY_WINDOW_COVERING_AND_UPHOLSTERY"
	SoleTraderBusinessSubCategoryDROPSHIPPING                                 SoleTraderBusinessSubCategory = "DROPSHIPPING"
	SoleTraderBusinessSubCategoryDURABLEGOODS                                 SoleTraderBusinessSubCategory = "DURABLE_GOODS"
	SoleTraderBusinessSubCategoryECOMMERCESERVICES                            SoleTraderBusinessSubCategory = "ECOMMERCE_SERVICES"
	SoleTraderBusinessSubCategoryEDUCATION                                    SoleTraderBusinessSubCategory = "EDUCATION"
	SoleTraderBusinessSubCategoryEDUCATIONAL                                  SoleTraderBusinessSubCategory = "EDUCATIONAL"
	SoleTraderBusinessSubCategoryEDUCATIONALANDTEXTBOOKS                      SoleTraderBusinessSubCategory = "EDUCATIONAL_AND_TEXTBOOKS"
	SoleTraderBusinessSubCategoryEDUCATIONALSERVICES                          SoleTraderBusinessSubCategory = "EDUCATIONAL_SERVICES"
	SoleTraderBusinessSubCategoryEDUCATIONANDSKILLSOTHER                      SoleTraderBusinessSubCategory = "EDUCATION_AND_SKILLS_OTHER"
	SoleTraderBusinessSubCategoryELECTRICALANDSMALLAPPLIANCEREPAIR            SoleTraderBusinessSubCategory = "ELECTRICAL_AND_SMALL_APPLIANCE_REPAIR"
	SoleTraderBusinessSubCategoryELECTRICIAN                                  SoleTraderBusinessSubCategory = "ELECTRICIAN"
	SoleTraderBusinessSubCategoryEMONEYPREPAID                                SoleTraderBusinessSubCategory = "EMONEY_PREPAID"
	SoleTraderBusinessSubCategoryENTERTAINERS                                 SoleTraderBusinessSubCategory = "ENTERTAINERS"
	SoleTraderBusinessSubCategoryENTERTAINERSANDDJS                           SoleTraderBusinessSubCategory = "ENTERTAINERS_AND_DJS"
	SoleTraderBusinessSubCategoryENTERTAINMENT                                SoleTraderBusinessSubCategory = "ENTERTAINMENT"
	SoleTraderBusinessSubCategoryENTERTAINMENTANDTRAVELOTHER                  SoleTraderBusinessSubCategory = "ENTERTAINMENT_AND_TRAVEL_OTHER"
	SoleTraderBusinessSubCategoryENTERTAINMENTDIGITALCONTENT                  SoleTraderBusinessSubCategory = "ENTERTAINMENT_DIGITAL_CONTENT"
	SoleTraderBusinessSubCategoryENTERTAINMENTMEMORABILIA                     SoleTraderBusinessSubCategory = "ENTERTAINMENT_MEMORABILIA"
	SoleTraderBusinessSubCategoryENVIRONMENT                                  SoleTraderBusinessSubCategory = "ENVIRONMENT"
	SoleTraderBusinessSubCategoryEQUESTRIAN                                   SoleTraderBusinessSubCategory = "EQUESTRIAN"
	SoleTraderBusinessSubCategoryEQUIPMENTRENTALANDLEASINGSERVICES            SoleTraderBusinessSubCategory = "EQUIPMENT_RENTAL_AND_LEASING_SERVICES"
	SoleTraderBusinessSubCategoryEQUIPMENTRENTALSANDLEASINGSERVICES           SoleTraderBusinessSubCategory = "EQUIPMENT_RENTALS_AND_LEASING_SERVICES"
	SoleTraderBusinessSubCategoryEQUIPMENTREPAIRSERVICES                      SoleTraderBusinessSubCategory = "EQUIPMENT_REPAIR_SERVICES"
	SoleTraderBusinessSubCategoryEQUITIESTRADING                              SoleTraderBusinessSubCategory = "EQUITIES_TRADING"
	SoleTraderBusinessSubCategoryESTATEAGENT                                  SoleTraderBusinessSubCategory = "ESTATE_AGENT"
	SoleTraderBusinessSubCategoryEVENTANDWEDDINGPLANNING                      SoleTraderBusinessSubCategory = "EVENT_AND_WEDDING_PLANNING"
	SoleTraderBusinessSubCategoryEVENTSANDWEDDINGS                            SoleTraderBusinessSubCategory = "EVENTS_AND_WEDDINGS"
	SoleTraderBusinessSubCategoryEVENTSPRODUCTS                               SoleTraderBusinessSubCategory = "EVENTS_PRODUCTS"
	SoleTraderBusinessSubCategoryEVENTSSTAFFINGANDSERVICES                    SoleTraderBusinessSubCategory = "EVENTS_STAFFING_AND_SERVICES"
	SoleTraderBusinessSubCategoryEXERCISEANDFITNESS                           SoleTraderBusinessSubCategory = "EXERCISE_AND_FITNESS"
	SoleTraderBusinessSubCategoryEXERCISEANDFITNESSOTHER                      SoleTraderBusinessSubCategory = "EXERCISE_AND_FITNESS_OTHER"
	SoleTraderBusinessSubCategoryEXTERMINATINGANDDISINFECTINGSERVICES         SoleTraderBusinessSubCategory = "EXTERMINATING_AND_DISINFECTING_SERVICES"
	SoleTraderBusinessSubCategoryFANGEARANDMEMORABILIA                        SoleTraderBusinessSubCategory = "FAN_GEAR_AND_MEMORABILIA"
	SoleTraderBusinessSubCategoryFASHIONJEWELLERY                             SoleTraderBusinessSubCategory = "FASHION_JEWELLERY"
	SoleTraderBusinessSubCategoryFICTIONANDNONFICTION                         SoleTraderBusinessSubCategory = "FICTION_AND_NONFICTION"
	SoleTraderBusinessSubCategoryFINANCIALACCOUNTING                          SoleTraderBusinessSubCategory = "FINANCIAL_ACCOUNTING"
	SoleTraderBusinessSubCategoryFINANCIALANDINVESTMENTADVICE                 SoleTraderBusinessSubCategory = "FINANCIAL_AND_INVESTMENT_ADVICE"
	SoleTraderBusinessSubCategoryFINANCIALORINVESTMENTADVICE                  SoleTraderBusinessSubCategory = "FINANCIAL_OR_INVESTMENT_ADVICE"
	SoleTraderBusinessSubCategoryFIREARMSMILITARYGOODS                        SoleTraderBusinessSubCategory = "FIREARMS_MILITARY_GOODS"
	SoleTraderBusinessSubCategoryFIREPLACEANDFIREPLACESCREENS                 SoleTraderBusinessSubCategory = "FIREPLACE_AND_FIREPLACE_SCREENS"
	SoleTraderBusinessSubCategoryFLORIST                                      SoleTraderBusinessSubCategory = "FLORIST"
	SoleTraderBusinessSubCategoryFOODORDRINKPRODUCTION                        SoleTraderBusinessSubCategory = "FOOD_OR_DRINK_PRODUCTION"
	SoleTraderBusinessSubCategoryFORESTRY                                     SoleTraderBusinessSubCategory = "FORESTRY"
	SoleTraderBusinessSubCategoryFRAGRANCESANDPERFUMES                        SoleTraderBusinessSubCategory = "FRAGRANCES_AND_PERFUMES"
	SoleTraderBusinessSubCategoryFUNDMANAGEMENT                               SoleTraderBusinessSubCategory = "FUND_MANAGEMENT"
	SoleTraderBusinessSubCategoryFUNDMANAGER                                  SoleTraderBusinessSubCategory = "FUND_MANAGER"
	SoleTraderBusinessSubCategoryFURNITURE                                    SoleTraderBusinessSubCategory = "FURNITURE"
	SoleTraderBusinessSubCategoryFXTRADING                                    SoleTraderBusinessSubCategory = "FX_TRADING"
	SoleTraderBusinessSubCategoryGAMBLINGBETTING                              SoleTraderBusinessSubCategory = "GAMBLING_BETTING"
	SoleTraderBusinessSubCategoryGARDENINGANDTREESURGERY                      SoleTraderBusinessSubCategory = "GARDENING_AND_TREE_SURGERY"
	SoleTraderBusinessSubCategoryGARDENSUPPLIES                               SoleTraderBusinessSubCategory = "GARDEN_SUPPLIES"
	SoleTraderBusinessSubCategoryGASANDHEATING                                SoleTraderBusinessSubCategory = "GAS_AND_HEATING"
	SoleTraderBusinessSubCategoryGENERALCONTRACTOR                            SoleTraderBusinessSubCategory = "GENERAL_CONTRACTOR"
	SoleTraderBusinessSubCategoryGENERALCONTRACTORS                           SoleTraderBusinessSubCategory = "GENERAL_CONTRACTORS"
	SoleTraderBusinessSubCategoryGENERALELECTRONICACCESSORIES                 SoleTraderBusinessSubCategory = "GENERAL_ELECTRONIC_ACCESSORIES"
	SoleTraderBusinessSubCategoryGIFTCARDNOVELTYANDSOUVENIRSHOPS              SoleTraderBusinessSubCategory = "GIFT_CARD_NOVELTY_AND_SOUVENIR_SHOPS"
	SoleTraderBusinessSubCategoryGIFTSGOURMETFOODS                            SoleTraderBusinessSubCategory = "GIFTS_GOURMET_FOODS"
	SoleTraderBusinessSubCategoryGLASSPAINTANDWALLPAPER                       SoleTraderBusinessSubCategory = "GLASS_PAINT_AND_WALLPAPER"
	SoleTraderBusinessSubCategoryGOURMETFOODS                                 SoleTraderBusinessSubCategory = "GOURMET_FOODS"
	SoleTraderBusinessSubCategoryGRAPHICANDCOMMERCIALDESIGN                   SoleTraderBusinessSubCategory = "GRAPHIC_AND_COMMERCIAL_DESIGN"
	SoleTraderBusinessSubCategoryGRAPHICDESIGNANDILLUSTRATION                 SoleTraderBusinessSubCategory = "GRAPHIC_DESIGN_AND_ILLUSTRATION"
	SoleTraderBusinessSubCategoryGYMOPERATOR                                  SoleTraderBusinessSubCategory = "GYM_OPERATOR"
	SoleTraderBusinessSubCategoryHARDWAREANDTOOLS                             SoleTraderBusinessSubCategory = "HARDWARE_AND_TOOLS"
	SoleTraderBusinessSubCategoryHAULAGEFIRMS                                 SoleTraderBusinessSubCategory = "HAULAGE_FIRMS"
	SoleTraderBusinessSubCategoryHEALTHANDBEAUTYSPAS                          SoleTraderBusinessSubCategory = "HEALTH_AND_BEAUTY_SPAS"
	SoleTraderBusinessSubCategoryHEALTHANDDISEASE                             SoleTraderBusinessSubCategory = "HEALTH_AND_DISEASE"
	SoleTraderBusinessSubCategoryHEALTHANDSOCIALCAREOTHER                     SoleTraderBusinessSubCategory = "HEALTH_AND_SOCIAL_CARE_OTHER"
	SoleTraderBusinessSubCategoryHEALTHVITAMINSANDSUPPLEMENTS                 SoleTraderBusinessSubCategory = "HEALTH_VITAMINS_AND_SUPPLEMENTS"
	SoleTraderBusinessSubCategoryHGVORBUSORCOACHDRIVER                        SoleTraderBusinessSubCategory = "HGV_OR_BUS_OR_COACH_DRIVER"
	SoleTraderBusinessSubCategoryHIRINGSERVICES                               SoleTraderBusinessSubCategory = "HIRING_SERVICES"
	SoleTraderBusinessSubCategoryHOBBIESCAMERAANDPHOTOGRAPHICSUPPLIES         SoleTraderBusinessSubCategory = "HOBBIES_CAMERA_AND_PHOTOGRAPHIC_SUPPLIES"
	SoleTraderBusinessSubCategoryHOBBIESMEMORABILIA                           SoleTraderBusinessSubCategory = "HOBBIES_MEMORABILIA"
	SoleTraderBusinessSubCategoryHOBBIESSTAMPANDCOIN                          SoleTraderBusinessSubCategory = "HOBBIES_STAMP_AND_COIN"
	SoleTraderBusinessSubCategoryHOBBIESSTATIONARYPRINTINGANDWRITINGPAPER     SoleTraderBusinessSubCategory = "HOBBIES_STATIONARY_PRINTING_AND_WRITING_PAPER"
	SoleTraderBusinessSubCategoryHOBBIESVIDEOGAMESANDSYSTEMS                  SoleTraderBusinessSubCategory = "HOBBIES_VIDEO_GAMES_AND_SYSTEMS"
	SoleTraderBusinessSubCategoryHOBBIESVINTAGEANDCOLLECTIBLES                SoleTraderBusinessSubCategory = "HOBBIES_VINTAGE_AND_COLLECTIBLES"
	SoleTraderBusinessSubCategoryHOBBYTOYANDGAMESHOPS                         SoleTraderBusinessSubCategory = "HOBBY_TOY_AND_GAME_SHOPS"
	SoleTraderBusinessSubCategoryHOLIDAYORSHORTTERMLETS                       SoleTraderBusinessSubCategory = "HOLIDAY_OR_SHORT_TERM_LETS"
	SoleTraderBusinessSubCategoryHOMEARTDEALERSANDGALLERIES                   SoleTraderBusinessSubCategory = "HOME_ART_DEALERS_AND_GALLERIES"
	SoleTraderBusinessSubCategoryHOMEAUDIO                                    SoleTraderBusinessSubCategory = "HOME_AUDIO"
	SoleTraderBusinessSubCategoryHOMEDECOR                                    SoleTraderBusinessSubCategory = "HOME_DECOR"
	SoleTraderBusinessSubCategoryHOMEDELIVERYANDCOURIERFIRMS                  SoleTraderBusinessSubCategory = "HOME_DELIVERY_AND_COURIER_FIRMS"
	SoleTraderBusinessSubCategoryHOMEELECTRONICS                              SoleTraderBusinessSubCategory = "HOME_ELECTRONICS"
	SoleTraderBusinessSubCategoryHOMEFURNITURE                                SoleTraderBusinessSubCategory = "HOME_FURNITURE"
	SoleTraderBusinessSubCategoryHOMELESSNESS                                 SoleTraderBusinessSubCategory = "HOMELESSNESS"
	SoleTraderBusinessSubCategoryHORTICULTUREORPLANTNURSERY                   SoleTraderBusinessSubCategory = "HORTICULTURE_OR_PLANT_NURSERY"
	SoleTraderBusinessSubCategoryHOUSEWARES                                   SoleTraderBusinessSubCategory = "HOUSEWARES"
	SoleTraderBusinessSubCategoryHUMANANDCIVILRIGHTS                          SoleTraderBusinessSubCategory = "HUMAN_AND_CIVIL_RIGHTS"
	SoleTraderBusinessSubCategoryHUNTING                                      SoleTraderBusinessSubCategory = "HUNTING"
	SoleTraderBusinessSubCategoryIDSLICENSESANDPASSPORTS                      SoleTraderBusinessSubCategory = "IDS_LICENSES_AND_PASSPORTS"
	SoleTraderBusinessSubCategoryILLEGALORUNLICENSEDDRUGS                     SoleTraderBusinessSubCategory = "ILLEGAL_OR_UNLICENSED_DRUGS"
	SoleTraderBusinessSubCategoryIMPORTEXPORT                                 SoleTraderBusinessSubCategory = "IMPORT_EXPORT"
	SoleTraderBusinessSubCategoryIMPORTINGANDEXPORTING                        SoleTraderBusinessSubCategory = "IMPORTING_AND_EXPORTING"
	SoleTraderBusinessSubCategoryINDUSTRIALANDMANUFACTURINGSUPPLIES           SoleTraderBusinessSubCategory = "INDUSTRIAL_AND_MANUFACTURING_SUPPLIES"
	SoleTraderBusinessSubCategoryINDUSTRIALENGINEER                           SoleTraderBusinessSubCategory = "INDUSTRIAL_ENGINEER"
	SoleTraderBusinessSubCategoryINFLUENCER                                   SoleTraderBusinessSubCategory = "INFLUENCER"
	SoleTraderBusinessSubCategoryINFORMATIONRETRIEVALSERVICES                 SoleTraderBusinessSubCategory = "INFORMATION_RETRIEVAL_SERVICES"
	SoleTraderBusinessSubCategoryINSOLVENCYPRACTITIONER                       SoleTraderBusinessSubCategory = "INSOLVENCY_PRACTITIONER"
	SoleTraderBusinessSubCategoryINSURANCE                                    SoleTraderBusinessSubCategory = "INSURANCE"
	SoleTraderBusinessSubCategoryINTERIORDESIGN                               SoleTraderBusinessSubCategory = "INTERIOR_DESIGN"
	SoleTraderBusinessSubCategoryINTERNATIONAL                                SoleTraderBusinessSubCategory = "INTERNATIONAL"
	SoleTraderBusinessSubCategoryINTERNATIONALFINANCE                         SoleTraderBusinessSubCategory = "INTERNATIONAL_FINANCE"
	SoleTraderBusinessSubCategoryINVESTMENTBANK                               SoleTraderBusinessSubCategory = "INVESTMENT_BANK"
	SoleTraderBusinessSubCategoryINVESTMENTDEALARRANGEMENTS                   SoleTraderBusinessSubCategory = "INVESTMENT_DEAL_ARRANGEMENTS"
	SoleTraderBusinessSubCategoryINVESTMENTMANAGEMENT                         SoleTraderBusinessSubCategory = "INVESTMENT_MANAGEMENT"
	SoleTraderBusinessSubCategoryJEWELLERYPRECIOUSSTONESORMETALS              SoleTraderBusinessSubCategory = "JEWELLERY_PRECIOUS_STONES_OR_METALS"
	SoleTraderBusinessSubCategoryKITCHENWARE                                  SoleTraderBusinessSubCategory = "KITCHENWARE"
	SoleTraderBusinessSubCategoryLANDSCAPING                                  SoleTraderBusinessSubCategory = "LANDSCAPING"
	SoleTraderBusinessSubCategoryLANDSCAPINGANDHORTICULTURAL                  SoleTraderBusinessSubCategory = "LANDSCAPING_AND_HORTICULTURAL"
	SoleTraderBusinessSubCategoryLEASEHOLDORFREEHOLD                          SoleTraderBusinessSubCategory = "LEASEHOLD_OR_FREEHOLD"
	SoleTraderBusinessSubCategoryLEGAL                                        SoleTraderBusinessSubCategory = "LEGAL"
	SoleTraderBusinessSubCategoryLEGALSERVICESANDATTORNEYS                    SoleTraderBusinessSubCategory = "LEGAL_SERVICES_AND_ATTORNEYS"
	SoleTraderBusinessSubCategoryLICENSEDFOODVENUE                            SoleTraderBusinessSubCategory = "LICENSED_FOOD_VENUE"
	SoleTraderBusinessSubCategoryLICENSEDRETAIL                               SoleTraderBusinessSubCategory = "LICENSED_RETAIL"
	SoleTraderBusinessSubCategoryLIVESTOCKFARMING                             SoleTraderBusinessSubCategory = "LIVESTOCK_FARMING"
	SoleTraderBusinessSubCategoryLOCALDELIVERYSERVICE                         SoleTraderBusinessSubCategory = "LOCAL_DELIVERY_SERVICE"
	SoleTraderBusinessSubCategoryLODGINGANDACCOMMODATION                      SoleTraderBusinessSubCategory = "LODGING_AND_ACCOMMODATION"
	SoleTraderBusinessSubCategoryLODGINGANDACCOMMODATIONS                     SoleTraderBusinessSubCategory = "LODGING_AND_ACCOMMODATIONS"
	SoleTraderBusinessSubCategoryLUGGAGEANDLEATHERGOODS                       SoleTraderBusinessSubCategory = "LUGGAGE_AND_LEATHER_GOODS"
	SoleTraderBusinessSubCategoryMAGAZINES                                    SoleTraderBusinessSubCategory = "MAGAZINES"
	SoleTraderBusinessSubCategoryMAILINGLISTS                                 SoleTraderBusinessSubCategory = "MAILING_LISTS"
	SoleTraderBusinessSubCategoryMAINTENANCEANDREPAIRSERVICES                 SoleTraderBusinessSubCategory = "MAINTENANCE_AND_REPAIR_SERVICES"
	SoleTraderBusinessSubCategoryMAKEUPANDCOSMETICS                           SoleTraderBusinessSubCategory = "MAKEUP_AND_COSMETICS"
	SoleTraderBusinessSubCategoryMANAGEMENTCONSULTANCY                        SoleTraderBusinessSubCategory = "MANAGEMENT_CONSULTANCY"
	SoleTraderBusinessSubCategoryMANUFACTURING                                SoleTraderBusinessSubCategory = "MANUFACTURING"
	SoleTraderBusinessSubCategoryMANUFACTURINGRNDANDAGRICULTUREOTHER          SoleTraderBusinessSubCategory = "MANUFACTURING_RND_AND_AGRICULTURE_OTHER"
	SoleTraderBusinessSubCategoryMARKETING                                    SoleTraderBusinessSubCategory = "MARKETING"
	SoleTraderBusinessSubCategoryMARKETINGADVERTISINGANDDESIGN                SoleTraderBusinessSubCategory = "MARKETING_ADVERTISING_AND_DESIGN"
	SoleTraderBusinessSubCategoryMARKETMAKER                                  SoleTraderBusinessSubCategory = "MARKET_MAKER"
	SoleTraderBusinessSubCategoryMARTIALARTSWEAPONS                           SoleTraderBusinessSubCategory = "MARTIAL_ARTS_WEAPONS"
	SoleTraderBusinessSubCategoryMEDICALCARE                                  SoleTraderBusinessSubCategory = "MEDICAL_CARE"
	SoleTraderBusinessSubCategoryMEDICALEQUIPMENTANDSUPPLIERS                 SoleTraderBusinessSubCategory = "MEDICAL_EQUIPMENT_AND_SUPPLIERS"
	SoleTraderBusinessSubCategoryMEDICALEQUIPMENTANDSUPPLIES                  SoleTraderBusinessSubCategory = "MEDICAL_EQUIPMENT_AND_SUPPLIES"
	SoleTraderBusinessSubCategoryMEDICATIONANDSUPPLEMENTS                     SoleTraderBusinessSubCategory = "MEDICATION_AND_SUPPLEMENTS"
	SoleTraderBusinessSubCategoryMEMBERSHIPCLUBSANDORGANIZATIONS              SoleTraderBusinessSubCategory = "MEMBERSHIP_CLUBS_AND_ORGANIZATIONS"
	SoleTraderBusinessSubCategoryMEMBERSHIPSERVICES                           SoleTraderBusinessSubCategory = "MEMBERSHIP_SERVICES"
	SoleTraderBusinessSubCategoryMEMORABILIA                                  SoleTraderBusinessSubCategory = "MEMORABILIA"
	SoleTraderBusinessSubCategoryMENSCLOTHING                                 SoleTraderBusinessSubCategory = "MENS_CLOTHING"
	SoleTraderBusinessSubCategoryMENTALHEALTHANDCOUNSELLING                   SoleTraderBusinessSubCategory = "MENTAL_HEALTH_AND_COUNSELLING"
	SoleTraderBusinessSubCategoryMERCHANDISE                                  SoleTraderBusinessSubCategory = "MERCHANDISE"
	SoleTraderBusinessSubCategoryMERCHANTBANKING                              SoleTraderBusinessSubCategory = "MERCHANT_BANKING"
	SoleTraderBusinessSubCategoryMILITARYANDCIVILSERVICEUNIFORMS              SoleTraderBusinessSubCategory = "MILITARY_AND_CIVIL_SERVICE_UNIFORMS"
	SoleTraderBusinessSubCategoryMINIBUSORCOACHOPERATOR                       SoleTraderBusinessSubCategory = "MINIBUS_OR_COACH_OPERATOR"
	SoleTraderBusinessSubCategoryMINING                                       SoleTraderBusinessSubCategory = "MINING"
	SoleTraderBusinessSubCategoryMOBILEPHONESALES                             SoleTraderBusinessSubCategory = "MOBILE_PHONE_SALES"
	SoleTraderBusinessSubCategoryMONEYTRANSFER                                SoleTraderBusinessSubCategory = "MONEY_TRANSFER"
	SoleTraderBusinessSubCategoryMONITORSANDPROJECTORS                        SoleTraderBusinessSubCategory = "MONITORS_AND_PROJECTORS"
	SoleTraderBusinessSubCategoryMORTGAGEBROKERS                              SoleTraderBusinessSubCategory = "MORTGAGE_BROKERS"
	SoleTraderBusinessSubCategoryMORTGAGELENDER                               SoleTraderBusinessSubCategory = "MORTGAGE_LENDER"
	SoleTraderBusinessSubCategoryMOTORHOMEANDRECREATIONALVEHICLERENTAL        SoleTraderBusinessSubCategory = "MOTOR_HOME_AND_RECREATIONAL_VEHICLE_RENTAL"
	SoleTraderBusinessSubCategoryMOVIESDVDSVIDEOTAPES                         SoleTraderBusinessSubCategory = "MOVIES_DVDS_VIDEOTAPES"
	SoleTraderBusinessSubCategoryMOVIETICKETS                                 SoleTraderBusinessSubCategory = "MOVIE_TICKETS"
	SoleTraderBusinessSubCategoryMOVINGANDSTORAGE                             SoleTraderBusinessSubCategory = "MOVING_AND_STORAGE"
	SoleTraderBusinessSubCategoryMULTILEVELMARKETING                          SoleTraderBusinessSubCategory = "MULTILEVEL_MARKETING"
	SoleTraderBusinessSubCategoryMUSICCDSCASSETTESANDALBUMS                   SoleTraderBusinessSubCategory = "MUSIC_CDS_CASSETTES_AND_ALBUMS"
	SoleTraderBusinessSubCategoryMUSICIANORGROUPS                             SoleTraderBusinessSubCategory = "MUSICIAN_OR_GROUPS"
	SoleTraderBusinessSubCategoryMUSICSTOREINSTRUMENTSANDSHEETMUSIC           SoleTraderBusinessSubCategory = "MUSIC_STORE_INSTRUMENTS_AND_SHEET_MUSIC"
	SoleTraderBusinessSubCategoryMUSICSTOREINSTRUMENTSANDSHEETMUSIC1          SoleTraderBusinessSubCategory = "MUSIC_STORE__INSTRUMENTS_AND_SHEET_MUSIC"
	SoleTraderBusinessSubCategoryMUSICTEACHERS                                SoleTraderBusinessSubCategory = "MUSIC_TEACHERS"
	SoleTraderBusinessSubCategoryNAILPARLOUR                                  SoleTraderBusinessSubCategory = "NAIL_PARLOUR"
	SoleTraderBusinessSubCategoryNANNYORAUPAIR                                SoleTraderBusinessSubCategory = "NANNY_OR_AU_PAIR"
	SoleTraderBusinessSubCategoryNETWORKING                                   SoleTraderBusinessSubCategory = "NETWORKING"
	SoleTraderBusinessSubCategoryNEWCARSORVEHICLESALES                        SoleTraderBusinessSubCategory = "NEW_CARS_OR_VEHICLE_SALES"
	SoleTraderBusinessSubCategoryNEWPARTSANDSUPPLIESMOTORVEHICLE              SoleTraderBusinessSubCategory = "NEW_PARTS_AND_SUPPLIES__MOTOR_VEHICLE"
	SoleTraderBusinessSubCategoryNEWSAGENTSCONVENIENCESTORES                  SoleTraderBusinessSubCategory = "NEWSAGENTS_CONVENIENCE_STORES"
	SoleTraderBusinessSubCategoryNONDURABLEGOODS                              SoleTraderBusinessSubCategory = "NONDURABLE_GOODS"
	SoleTraderBusinessSubCategoryNONPROFITOTHER                               SoleTraderBusinessSubCategory = "NON_PROFIT_OTHER"
	SoleTraderBusinessSubCategoryNOTPROVIDED                                  SoleTraderBusinessSubCategory = "NOT_PROVIDED"
	SoleTraderBusinessSubCategoryNURSERY                                      SoleTraderBusinessSubCategory = "NURSERY"
	SoleTraderBusinessSubCategoryNURSERYPLANTSANDFLOWERS                      SoleTraderBusinessSubCategory = "NURSERY_PLANTS_AND_FLOWERS"
	SoleTraderBusinessSubCategoryNUTRITIONANDDIET                             SoleTraderBusinessSubCategory = "NUTRITION_AND_DIET"
	SoleTraderBusinessSubCategoryOFFICEANDCOMMERCIALFURNITURE                 SoleTraderBusinessSubCategory = "OFFICE_AND_COMMERCIAL_FURNITURE"
	SoleTraderBusinessSubCategoryOFFICESUPPLIESANDEQUIPMENT                   SoleTraderBusinessSubCategory = "OFFICE_SUPPLIES_AND_EQUIPMENT"
	SoleTraderBusinessSubCategoryOILANDGAS                                    SoleTraderBusinessSubCategory = "OIL_AND_GAS"
	SoleTraderBusinessSubCategoryONLINEGAMES                                  SoleTraderBusinessSubCategory = "ONLINE_GAMES"
	SoleTraderBusinessSubCategoryONLINEGAMING                                 SoleTraderBusinessSubCategory = "ONLINE_GAMING"
	SoleTraderBusinessSubCategoryOPTICIAN                                     SoleTraderBusinessSubCategory = "OPTICIAN"
	SoleTraderBusinessSubCategoryOTHER                                        SoleTraderBusinessSubCategory = "OTHER"
	SoleTraderBusinessSubCategoryOTHERMEDICALTHERAPY                          SoleTraderBusinessSubCategory = "OTHER_MEDICAL_THERAPY"
	SoleTraderBusinessSubCategoryOTHERPROFESSIONALDRIVER                      SoleTraderBusinessSubCategory = "OTHER_PROFESSIONAL_DRIVER"
	SoleTraderBusinessSubCategoryPARTSANDACCESSORIES                          SoleTraderBusinessSubCategory = "PARTS_AND_ACCESSORIES"
	SoleTraderBusinessSubCategoryPARTYSUPPLIES                                SoleTraderBusinessSubCategory = "PARTY_SUPPLIES"
	SoleTraderBusinessSubCategoryPAWNBROKER                                   SoleTraderBusinessSubCategory = "PAWN_BROKER"
	SoleTraderBusinessSubCategoryPAYDAYLENDER                                 SoleTraderBusinessSubCategory = "PAY_DAY_LENDER"
	SoleTraderBusinessSubCategoryPAYROLLPROVIDER                              SoleTraderBusinessSubCategory = "PAYROLL_PROVIDER"
	SoleTraderBusinessSubCategoryPEERTOPEERLENDING                            SoleTraderBusinessSubCategory = "PEER_TO_PEER_LENDING"
	SoleTraderBusinessSubCategoryPENSIONPROVIDER                              SoleTraderBusinessSubCategory = "PENSION_PROVIDER"
	SoleTraderBusinessSubCategoryPERIPHERALS                                  SoleTraderBusinessSubCategory = "PERIPHERALS"
	SoleTraderBusinessSubCategoryPERSONAL                                     SoleTraderBusinessSubCategory = "PERSONAL"
	SoleTraderBusinessSubCategoryPERSONALANDSOCIALCARE                        SoleTraderBusinessSubCategory = "PERSONAL_AND_SOCIAL_CARE"
	SoleTraderBusinessSubCategoryPERSONALTRAINER                              SoleTraderBusinessSubCategory = "PERSONAL_TRAINER"
	SoleTraderBusinessSubCategoryPERSONALTUTOR                                SoleTraderBusinessSubCategory = "PERSONAL_TUTOR"
	SoleTraderBusinessSubCategoryPESTCONTROL                                  SoleTraderBusinessSubCategory = "PEST_CONTROL"
	SoleTraderBusinessSubCategoryPETSHOPSPETFOODANDSUPPLIES                   SoleTraderBusinessSubCategory = "PET_SHOPS_PET_FOOD_AND_SUPPLIES"
	SoleTraderBusinessSubCategoryPHARMACY                                     SoleTraderBusinessSubCategory = "PHARMACY"
	SoleTraderBusinessSubCategoryPHOTOFINISHING                               SoleTraderBusinessSubCategory = "PHOTOFINISHING"
	SoleTraderBusinessSubCategoryPHOTOGRAPHICSTUDIOSPORTRAITS                 SoleTraderBusinessSubCategory = "PHOTOGRAPHIC_STUDIOS__PORTRAITS"
	SoleTraderBusinessSubCategoryPHOTOGRAPHY                                  SoleTraderBusinessSubCategory = "PHOTOGRAPHY"
	SoleTraderBusinessSubCategoryPHYSIOTHERAPIST                              SoleTraderBusinessSubCategory = "PHYSIOTHERAPIST"
	SoleTraderBusinessSubCategoryPLUMBER                                      SoleTraderBusinessSubCategory = "PLUMBER"
	SoleTraderBusinessSubCategoryPODIATRIST                                   SoleTraderBusinessSubCategory = "PODIATRIST"
	SoleTraderBusinessSubCategoryPOLITICAL                                    SoleTraderBusinessSubCategory = "POLITICAL"
	SoleTraderBusinessSubCategoryPOLITICALPARTY                               SoleTraderBusinessSubCategory = "POLITICAL_PARTY"
	SoleTraderBusinessSubCategoryPROBATEESTATEMANAGEMENT                      SoleTraderBusinessSubCategory = "PROBATE_ESTATE_MANAGEMENT"
	SoleTraderBusinessSubCategoryPROFESSIONALSERVICESOTHER                    SoleTraderBusinessSubCategory = "PROFESSIONAL_SERVICES_OTHER"
	SoleTraderBusinessSubCategoryPROFESSIONALTRAINER                          SoleTraderBusinessSubCategory = "PROFESSIONAL_TRAINER"
	SoleTraderBusinessSubCategoryPROJECTMANAGEMENT                            SoleTraderBusinessSubCategory = "PROJECT_MANAGEMENT"
	SoleTraderBusinessSubCategoryPROMOTIONANDPUBLISHING                       SoleTraderBusinessSubCategory = "PROMOTION_AND_PUBLISHING"
	SoleTraderBusinessSubCategoryPROPERTYINVESTMENTFUND                       SoleTraderBusinessSubCategory = "PROPERTY_INVESTMENT_FUND"
	SoleTraderBusinessSubCategoryPROPERTYINVESTOR                             SoleTraderBusinessSubCategory = "PROPERTY_INVESTOR"
	SoleTraderBusinessSubCategoryPROPERTYMANAGEMENT                           SoleTraderBusinessSubCategory = "PROPERTY_MANAGEMENT"
	SoleTraderBusinessSubCategoryPROPERTYOTHER                                SoleTraderBusinessSubCategory = "PROPERTY_OTHER"
	SoleTraderBusinessSubCategoryPROPERTYOWNER                                SoleTraderBusinessSubCategory = "PROPERTY_OWNER"
	SoleTraderBusinessSubCategoryPROPERTYREDEVELOPMENT                        SoleTraderBusinessSubCategory = "PROPERTY_REDEVELOPMENT"
	SoleTraderBusinessSubCategoryPROTECTIVEANDSECURITYSERVICES                SoleTraderBusinessSubCategory = "PROTECTIVE_AND_SECURITY_SERVICES"
	SoleTraderBusinessSubCategoryPUBLICSPEAKING                               SoleTraderBusinessSubCategory = "PUBLIC_SPEAKING"
	SoleTraderBusinessSubCategoryPUBLISHINGANDPRINTING                        SoleTraderBusinessSubCategory = "PUBLISHING_AND_PRINTING"
	SoleTraderBusinessSubCategoryQUICKCOPYANDREPRODUCTIONSERVICES             SoleTraderBusinessSubCategory = "QUICK_COPY_AND_REPRODUCTION_SERVICES"
	SoleTraderBusinessSubCategoryRADIOTELEVISIONANDSTEREOREPAIR               SoleTraderBusinessSubCategory = "RADIO_TELEVISION_AND_STEREO_REPAIR"
	SoleTraderBusinessSubCategoryRAREANDUSEDBOOKS                             SoleTraderBusinessSubCategory = "RARE_AND_USED_BOOKS"
	SoleTraderBusinessSubCategoryREALESTATEAGENT                              SoleTraderBusinessSubCategory = "REAL_ESTATE_AGENT"
	SoleTraderBusinessSubCategoryREALESTATEAGENT1                             SoleTraderBusinessSubCategory = "REAL_ESTATE_AGENT_"
	SoleTraderBusinessSubCategoryRECREATIONALSERVICES                         SoleTraderBusinessSubCategory = "RECREATIONAL_SERVICES"
	SoleTraderBusinessSubCategoryRECRUITMENTANDHIRING                         SoleTraderBusinessSubCategory = "RECRUITMENT_AND_HIRING"
	SoleTraderBusinessSubCategoryRELIGION                                     SoleTraderBusinessSubCategory = "RELIGION"
	SoleTraderBusinessSubCategoryRELIGIOUS                                    SoleTraderBusinessSubCategory = "RELIGIOUS"
	SoleTraderBusinessSubCategoryRENTALPROPERTYMANAGEMENT                     SoleTraderBusinessSubCategory = "RENTAL_PROPERTY_MANAGEMENT"
	SoleTraderBusinessSubCategoryRESEARCHANDDEVELOPMENT                       SoleTraderBusinessSubCategory = "RESEARCH_AND_DEVELOPMENT"
	SoleTraderBusinessSubCategoryRESEARCHANDPUBLICPOLICY                      SoleTraderBusinessSubCategory = "RESEARCH_AND_PUBLIC_POLICY"
	SoleTraderBusinessSubCategoryRESIDENTSASSOCIATION                         SoleTraderBusinessSubCategory = "RESIDENTS_ASSOCIATION"
	SoleTraderBusinessSubCategoryRESTAURANT                                   SoleTraderBusinessSubCategory = "RESTAURANT"
	SoleTraderBusinessSubCategoryRESTAURANTORCAFE                             SoleTraderBusinessSubCategory = "RESTAURANT_OR_CAFE"
	SoleTraderBusinessSubCategoryRETAIL                                       SoleTraderBusinessSubCategory = "RETAIL"
	SoleTraderBusinessSubCategoryRETAILBARSANDRESTAURANTSOTHER                SoleTraderBusinessSubCategory = "RETAIL_BARS_AND_RESTAURANTS_OTHER"
	SoleTraderBusinessSubCategoryRETAILCHEMICALSANDALLIEDPRODUCTS             SoleTraderBusinessSubCategory = "RETAIL_CHEMICALS_AND_ALLIED_PRODUCTS"
	SoleTraderBusinessSubCategoryRETAILDEPOSITTAKER                           SoleTraderBusinessSubCategory = "RETAIL_DEPOSIT_TAKER"
	SoleTraderBusinessSubCategoryRETAILFINEJEWELRYANDWATCHES                  SoleTraderBusinessSubCategory = "RETAIL_FINE_JEWELRY_AND_WATCHES"
	SoleTraderBusinessSubCategoryREUPHOLSTERYANDFURNITUREREPAIR               SoleTraderBusinessSubCategory = "REUPHOLSTERY_AND_FURNITURE_REPAIR"
	SoleTraderBusinessSubCategoryROOFING                                      SoleTraderBusinessSubCategory = "ROOFING"
	SoleTraderBusinessSubCategoryRUGSANDCARPETS                               SoleTraderBusinessSubCategory = "RUGS_AND_CARPETS"
	SoleTraderBusinessSubCategorySAFETYANDHEALTH                              SoleTraderBusinessSubCategory = "SAFETY_AND_HEALTH"
	SoleTraderBusinessSubCategorySALONS                                       SoleTraderBusinessSubCategory = "SALONS"
	SoleTraderBusinessSubCategorySCHOOLSCOLLEGESANDTRAINING                   SoleTraderBusinessSubCategory = "SCHOOLS_COLLEGES_AND_TRAINING"
	SoleTraderBusinessSubCategorySCRAPMETAL                                   SoleTraderBusinessSubCategory = "SCRAP_METAL"
	SoleTraderBusinessSubCategorySECURITY                                     SoleTraderBusinessSubCategory = "SECURITY"
	SoleTraderBusinessSubCategorySECURITYANDSURVEILLANCE                      SoleTraderBusinessSubCategory = "SECURITY_AND_SURVEILLANCE"
	SoleTraderBusinessSubCategorySECURITYANDSURVEILLANCEEQUIPMENT             SoleTraderBusinessSubCategory = "SECURITY_AND_SURVEILLANCE_EQUIPMENT"
	SoleTraderBusinessSubCategorySERVICESADVERTISING                          SoleTraderBusinessSubCategory = "SERVICES_ADVERTISING"
	SoleTraderBusinessSubCategorySERVICESAUTORENTAL                           SoleTraderBusinessSubCategory = "SERVICES_AUTO_RENTAL"
	SoleTraderBusinessSubCategorySERVICESCOMPUTERANDDATAPROCESSINGSERVICES    SoleTraderBusinessSubCategory = "SERVICES_COMPUTER_AND_DATA_PROCESSING_SERVICES"
	SoleTraderBusinessSubCategorySERVICESCONSULTINGSERVICES                   SoleTraderBusinessSubCategory = "SERVICES_CONSULTING_SERVICES"
	SoleTraderBusinessSubCategorySERVICESDENTALCARE                           SoleTraderBusinessSubCategory = "SERVICES_DENTAL_CARE"
	SoleTraderBusinessSubCategorySERVICESECOMMERCESERVICES                    SoleTraderBusinessSubCategory = "SERVICES_ECOMMERCE_SERVICES"
	SoleTraderBusinessSubCategorySERVICESMEDICALCARE                          SoleTraderBusinessSubCategory = "SERVICES_MEDICAL_CARE"
	SoleTraderBusinessSubCategorySERVICESMISCPUBLISHINGANDPRINTING            SoleTraderBusinessSubCategory = "SERVICES_MISC_PUBLISHING_AND_PRINTING"
	SoleTraderBusinessSubCategorySERVICESNOTELSEWHERECLASSIFIED               SoleTraderBusinessSubCategory = "SERVICES_NOT_ELSEWHERE_CLASSIFIED"
	SoleTraderBusinessSubCategorySERVICESQUICKCOPYANDREPRODUCTIONSERVICES     SoleTraderBusinessSubCategory = "SERVICES_QUICK_COPY_AND_REPRODUCTION_SERVICES"
	SoleTraderBusinessSubCategorySERVICESRENTALPROPERTYMANAGEMENT             SoleTraderBusinessSubCategory = "SERVICES_RENTAL_PROPERTY_MANAGEMENT"
	SoleTraderBusinessSubCategorySERVICESSERVICESNOTELSEWHERECLASSIFIED       SoleTraderBusinessSubCategory = "SERVICES_SERVICES_NOT_ELSEWHERE_CLASSIFIED"
	SoleTraderBusinessSubCategorySERVICESSHIPPINGANDPACKING                   SoleTraderBusinessSubCategory = "SERVICES_SHIPPING_AND_PACKING"
	SoleTraderBusinessSubCategorySERVICESVISIONCARE                           SoleTraderBusinessSubCategory = "SERVICES_VISION_CARE"
	SoleTraderBusinessSubCategorySEWINGNEEDLEWORKANDFABRICS                   SoleTraderBusinessSubCategory = "SEWING_NEEDLEWORK_AND_FABRICS"
	SoleTraderBusinessSubCategorySHARETRADING                                 SoleTraderBusinessSubCategory = "SHARE_TRADING"
	SoleTraderBusinessSubCategorySHIPPINGANDPACKING                           SoleTraderBusinessSubCategory = "SHIPPING_AND_PACKING"
	SoleTraderBusinessSubCategorySHOES                                        SoleTraderBusinessSubCategory = "SHOES"
	SoleTraderBusinessSubCategorySHOPPINGSERVICESANDBUYINGCLUBS               SoleTraderBusinessSubCategory = "SHOPPING_SERVICES_AND_BUYING_CLUBS"
	SoleTraderBusinessSubCategorySITEANDBUILDINGMANAGEMENT                    SoleTraderBusinessSubCategory = "SITE_AND_BUILDING_MANAGEMENT"
	SoleTraderBusinessSubCategorySOFTWARE                                     SoleTraderBusinessSubCategory = "SOFTWARE"
	SoleTraderBusinessSubCategorySOFTWAREANDIT                                SoleTraderBusinessSubCategory = "SOFTWARE_AND_IT"
	SoleTraderBusinessSubCategorySPECIALTYANDMISCELLANEOUSFOODSTORES          SoleTraderBusinessSubCategory = "SPECIALTY_AND_MISCELLANEOUS_FOOD_STORES"
	SoleTraderBusinessSubCategorySPECIALTYORRAREPETS                          SoleTraderBusinessSubCategory = "SPECIALTY_OR_RARE_PETS"
	SoleTraderBusinessSubCategorySPORTGAMESANDTOYS                            SoleTraderBusinessSubCategory = "SPORT_GAMES_AND_TOYS"
	SoleTraderBusinessSubCategorySPORTINGANDRECREATIONCAMPS                   SoleTraderBusinessSubCategory = "SPORTING_AND_RECREATION_CAMPS"
	SoleTraderBusinessSubCategorySPORTINGEQUIPMENT                            SoleTraderBusinessSubCategory = "SPORTING_EQUIPMENT"
	SoleTraderBusinessSubCategorySPORTSANDFITNESSVENUE                        SoleTraderBusinessSubCategory = "SPORTS_AND_FITNESS_VENUE"
	SoleTraderBusinessSubCategorySPORTSCLUB                                   SoleTraderBusinessSubCategory = "SPORTS_CLUB"
	SoleTraderBusinessSubCategorySPORTSCOACH                                  SoleTraderBusinessSubCategory = "SPORTS_COACH"
	SoleTraderBusinessSubCategorySPORTSDANCEHALLSSTUDIOSANDSCHOOLS            SoleTraderBusinessSubCategory = "SPORTS_DANCE_HALLS_STUDIOS_AND_SCHOOLS"
	SoleTraderBusinessSubCategorySPORTSSWIMMINGPOOLSANDSPAS                   SoleTraderBusinessSubCategory = "SPORTS_SWIMMING_POOLS_AND_SPAS"
	SoleTraderBusinessSubCategorySTAMPANDCOIN                                 SoleTraderBusinessSubCategory = "STAMP_AND_COIN"
	SoleTraderBusinessSubCategorySTATIONARYPRINTINGANDWRITINGPAPER            SoleTraderBusinessSubCategory = "STATIONARY_PRINTING_AND_WRITING_PAPER"
	SoleTraderBusinessSubCategorySTENOGRAPHICANDSECRETARIALSUPPORTSERVICES    SoleTraderBusinessSubCategory = "STENOGRAPHIC_AND_SECRETARIAL_SUPPORT_SERVICES"
	SoleTraderBusinessSubCategorySTORAGE                                      SoleTraderBusinessSubCategory = "STORAGE"
	SoleTraderBusinessSubCategorySTREETFOODORMARKETSTALL                      SoleTraderBusinessSubCategory = "STREET_FOOD_OR_MARKET_STALL"
	SoleTraderBusinessSubCategorySTUDENTRECRUITMENT                           SoleTraderBusinessSubCategory = "STUDENT_RECRUITMENT"
	SoleTraderBusinessSubCategorySTUDENTSUPPORT                               SoleTraderBusinessSubCategory = "STUDENT_SUPPORT"
	SoleTraderBusinessSubCategorySUPPLIERTOAGRICULTUREORINDUSTRY              SoleTraderBusinessSubCategory = "SUPPLIER_TO_AGRICULTURE_OR_INDUSTRY"
	SoleTraderBusinessSubCategorySWIMMINGPOOLSANDSPAS                         SoleTraderBusinessSubCategory = "SWIMMING_POOLS_AND_SPAS"
	SoleTraderBusinessSubCategorySWIMMINGPOOLSERVICES                         SoleTraderBusinessSubCategory = "SWIMMING_POOL_SERVICES"
	SoleTraderBusinessSubCategoryTAILORSANDALTERATIONS                        SoleTraderBusinessSubCategory = "TAILORS_AND_ALTERATIONS"
	SoleTraderBusinessSubCategoryTAKEAWAY                                     SoleTraderBusinessSubCategory = "TAKEAWAY"
	SoleTraderBusinessSubCategoryTATTOOPARLOUR                                SoleTraderBusinessSubCategory = "TATTOO_PARLOUR"
	SoleTraderBusinessSubCategoryTAXICABSANDLIMOUSINES                        SoleTraderBusinessSubCategory = "TAXICABS_AND_LIMOUSINES"
	SoleTraderBusinessSubCategoryTAXIORPRIVATEHIREDRIVER                      SoleTraderBusinessSubCategory = "TAXI_OR_PRIVATE_HIRE_DRIVER"
	SoleTraderBusinessSubCategoryTAXIORPRIVATEHIREOPERATOR                    SoleTraderBusinessSubCategory = "TAXI_OR_PRIVATE_HIRE_OPERATOR"
	SoleTraderBusinessSubCategoryTELECOMMUNICATIONEQUIPMENTANDSALES           SoleTraderBusinessSubCategory = "TELECOMMUNICATION_EQUIPMENT_AND_SALES"
	SoleTraderBusinessSubCategoryTELECOMMUNICATIONSERVICE                     SoleTraderBusinessSubCategory = "TELECOMMUNICATION_SERVICE"
	SoleTraderBusinessSubCategoryTELECOMMUNICATIONSERVICES                    SoleTraderBusinessSubCategory = "TELECOMMUNICATION_SERVICES"
	SoleTraderBusinessSubCategoryTELEPHONECARDS                               SoleTraderBusinessSubCategory = "TELEPHONE_CARDS"
	SoleTraderBusinessSubCategoryTERMLOANS                                    SoleTraderBusinessSubCategory = "TERM_LOANS"
	SoleTraderBusinessSubCategoryTHEATERTICKETS                               SoleTraderBusinessSubCategory = "THEATER_TICKETS"
	SoleTraderBusinessSubCategoryTIMESHARES                                   SoleTraderBusinessSubCategory = "TIMESHARES"
	SoleTraderBusinessSubCategoryTOBACCO                                      SoleTraderBusinessSubCategory = "TOBACCO"
	SoleTraderBusinessSubCategoryTOOLSANDEQUIPMENT                            SoleTraderBusinessSubCategory = "TOOLS_AND_EQUIPMENT"
	SoleTraderBusinessSubCategoryTOURGUIDE                                    SoleTraderBusinessSubCategory = "TOUR_GUIDE"
	SoleTraderBusinessSubCategoryTOURS                                        SoleTraderBusinessSubCategory = "TOURS"
	SoleTraderBusinessSubCategoryTOWINGSERVICE                                SoleTraderBusinessSubCategory = "TOWING_SERVICE"
	SoleTraderBusinessSubCategoryTOYSANDGAMES                                 SoleTraderBusinessSubCategory = "TOYS_AND_GAMES"
	SoleTraderBusinessSubCategoryTRAILERPARKSORCAMPGROUNDS                    SoleTraderBusinessSubCategory = "TRAILER_PARKS_OR_CAMPGROUNDS"
	SoleTraderBusinessSubCategoryTRAINDRIVER                                  SoleTraderBusinessSubCategory = "TRAIN_DRIVER"
	SoleTraderBusinessSubCategoryTRAININGSERVICES                             SoleTraderBusinessSubCategory = "TRAINING_SERVICES"
	SoleTraderBusinessSubCategoryTRANSPORTANDVEHICLESOTHER                    SoleTraderBusinessSubCategory = "TRANSPORT_AND_VEHICLES_OTHER"
	SoleTraderBusinessSubCategoryTRANSPORTATIONSERVICESOTHER                  SoleTraderBusinessSubCategory = "TRANSPORTATION_SERVICES__OTHER"
	SoleTraderBusinessSubCategoryTRAVELAGENCY                                 SoleTraderBusinessSubCategory = "TRAVEL_AGENCY"
	SoleTraderBusinessSubCategoryTRAVELAGENT                                  SoleTraderBusinessSubCategory = "TRAVEL_AGENT"
	SoleTraderBusinessSubCategoryTRUCKANDUTILITYTRAILERRENTAL                 SoleTraderBusinessSubCategory = "TRUCK_AND_UTILITY_TRAILER_RENTAL"
	SoleTraderBusinessSubCategoryTRUSTANDCOMPANYSERVICE                       SoleTraderBusinessSubCategory = "TRUST_AND_COMPANY_SERVICE"
	SoleTraderBusinessSubCategoryTVANDRADIO                                   SoleTraderBusinessSubCategory = "TV_AND_RADIO"
	SoleTraderBusinessSubCategoryUSEDANDSECONDHANDSTORE                       SoleTraderBusinessSubCategory = "USED_AND_SECONDHAND_STORE"
	SoleTraderBusinessSubCategoryUSEDCARORVEHICLESALES                        SoleTraderBusinessSubCategory = "USED_CAR_OR_VEHICLE_SALES"
	SoleTraderBusinessSubCategoryUSEDPARTSMOTORVEHICLE                        SoleTraderBusinessSubCategory = "USED_PARTS__MOTOR_VEHICLE"
	SoleTraderBusinessSubCategoryUTILITIES                                    SoleTraderBusinessSubCategory = "UTILITIES"
	SoleTraderBusinessSubCategoryVARIETYSTORE                                 SoleTraderBusinessSubCategory = "VARIETY_STORE"
	SoleTraderBusinessSubCategoryVEHICLEACCESSORIES                           SoleTraderBusinessSubCategory = "VEHICLE_ACCESSORIES"
	SoleTraderBusinessSubCategoryVEHICLEPARTS                                 SoleTraderBusinessSubCategory = "VEHICLE_PARTS"
	SoleTraderBusinessSubCategoryVEHICLERENTAL                                SoleTraderBusinessSubCategory = "VEHICLE_RENTAL"
	SoleTraderBusinessSubCategoryVEHICLEREPAIRANDMAINTENANCE                  SoleTraderBusinessSubCategory = "VEHICLE_REPAIR_AND_MAINTENANCE"
	SoleTraderBusinessSubCategoryVETERINARY                                   SoleTraderBusinessSubCategory = "VETERINARY"
	SoleTraderBusinessSubCategoryVETERINARYSERVICES                           SoleTraderBusinessSubCategory = "VETERINARY_SERVICES"
	SoleTraderBusinessSubCategoryVIDEOGAMESANDSYSTEMS                         SoleTraderBusinessSubCategory = "VIDEO_GAMES_AND_SYSTEMS"
	SoleTraderBusinessSubCategoryVIDEOPRODUCTION                              SoleTraderBusinessSubCategory = "VIDEO_PRODUCTION"
	SoleTraderBusinessSubCategoryVINTAGEANDCOLLECTIBLES                       SoleTraderBusinessSubCategory = "VINTAGE_AND_COLLECTIBLES"
	SoleTraderBusinessSubCategoryVISIONCARE                                   SoleTraderBusinessSubCategory = "VISION_CARE"
	SoleTraderBusinessSubCategoryVITAMINSANDSUPPLEMENTS                       SoleTraderBusinessSubCategory = "VITAMINS_AND_SUPPLEMENTS"
	SoleTraderBusinessSubCategoryVOCATIONALANDTRADESCHOOLS                    SoleTraderBusinessSubCategory = "VOCATIONAL_AND_TRADE_SCHOOLS"
	SoleTraderBusinessSubCategoryWASTEANDRECYCLING                            SoleTraderBusinessSubCategory = "WASTE_AND_RECYCLING"
	SoleTraderBusinessSubCategoryWATCHCLOCKANDJEWELRYREPAIR                   SoleTraderBusinessSubCategory = "WATCH_CLOCK_AND_JEWELRY_REPAIR"
	SoleTraderBusinessSubCategoryWEBHOSTINGANDDESIGN                          SoleTraderBusinessSubCategory = "WEB_HOSTING_AND_DESIGN"
	SoleTraderBusinessSubCategoryWEBSITEDEVELOPMENT                           SoleTraderBusinessSubCategory = "WEBSITE_DEVELOPMENT"
	SoleTraderBusinessSubCategoryWHOLESALE                                    SoleTraderBusinessSubCategory = "WHOLESALE"
	SoleTraderBusinessSubCategoryWHOLESALEPRECIOUSSTONESANDMETALS             SoleTraderBusinessSubCategory = "WHOLESALE_PRECIOUS_STONES_AND_METALS"
	SoleTraderBusinessSubCategoryWHOLESALING                                  SoleTraderBusinessSubCategory = "WHOLESALING"
	SoleTraderBusinessSubCategoryWOMENSCLOTHING                               SoleTraderBusinessSubCategory = "WOMENS_CLOTHING"
)

// Defines values for SpendingCategoryBreakdownCurrency.
const (
	SpendingCategoryBreakdownCurrencyAED       SpendingCategoryBreakdownCurrency = "AED"
	SpendingCategoryBreakdownCurrencyAFN       SpendingCategoryBreakdownCurrency = "AFN"
	SpendingCategoryBreakdownCurrencyALL       SpendingCategoryBreakdownCurrency = "ALL"
	SpendingCategoryBreakdownCurrencyAMD       SpendingCategoryBreakdownCurrency = "AMD"
	SpendingCategoryBreakdownCurrencyANG       SpendingCategoryBreakdownCurrency = "ANG"
	SpendingCategoryBreakdownCurrencyAOA       SpendingCategoryBreakdownCurrency = "AOA"
	SpendingCategoryBreakdownCurrencyARS       SpendingCategoryBreakdownCurrency = "ARS"
	SpendingCategoryBreakdownCurrencyAUD       SpendingCategoryBreakdownCurrency = "AUD"
	SpendingCategoryBreakdownCurrencyAWG       SpendingCategoryBreakdownCurrency = "AWG"
	SpendingCategoryBreakdownCurrencyAZN       SpendingCategoryBreakdownCurrency = "AZN"
	SpendingCategoryBreakdownCurrencyBAM       SpendingCategoryBreakdownCurrency = "BAM"
	SpendingCategoryBreakdownCurrencyBBD       SpendingCategoryBreakdownCurrency = "BBD"
	SpendingCategoryBreakdownCurrencyBDT       SpendingCategoryBreakdownCurrency = "BDT"
	SpendingCategoryBreakdownCurrencyBGN       SpendingCategoryBreakdownCurrency = "BGN"
	SpendingCategoryBreakdownCurrencyBHD       SpendingCategoryBreakdownCurrency = "BHD"
	SpendingCategoryBreakdownCurrencyBIF       SpendingCategoryBreakdownCurrency = "BIF"
	SpendingCategoryBreakdownCurrencyBMD       SpendingCategoryBreakdownCurrency = "BMD"
	SpendingCategoryBreakdownCurrencyBND       SpendingCategoryBreakdownCurrency = "BND"
	SpendingCategoryBreakdownCurrencyBOB       SpendingCategoryBreakdownCurrency = "BOB"
	SpendingCategoryBreakdownCurrencyBOV       SpendingCategoryBreakdownCurrency = "BOV"
	SpendingCategoryBreakdownCurrencyBRL       SpendingCategoryBreakdownCurrency = "BRL"
	SpendingCategoryBreakdownCurrencyBSD       SpendingCategoryBreakdownCurrency = "BSD"
	SpendingCategoryBreakdownCurrencyBTN       SpendingCategoryBreakdownCurrency = "BTN"
	SpendingCategoryBreakdownCurrencyBWP       SpendingCategoryBreakdownCurrency = "BWP"
	SpendingCategoryBreakdownCurrencyBYN       SpendingCategoryBreakdownCurrency = "BYN"
	SpendingCategoryBreakdownCurrencyBYR       SpendingCategoryBreakdownCurrency = "BYR"
	SpendingCategoryBreakdownCurrencyBZD       SpendingCategoryBreakdownCurrency = "BZD"
	SpendingCategoryBreakdownCurrencyCAD       SpendingCategoryBreakdownCurrency = "CAD"
	SpendingCategoryBreakdownCurrencyCDF       SpendingCategoryBreakdownCurrency = "CDF"
	SpendingCategoryBreakdownCurrencyCHE       SpendingCategoryBreakdownCurrency = "CHE"
	SpendingCategoryBreakdownCurrencyCHF       SpendingCategoryBreakdownCurrency = "CHF"
	SpendingCategoryBreakdownCurrencyCHW       SpendingCategoryBreakdownCurrency = "CHW"
	SpendingCategoryBreakdownCurrencyCLF       SpendingCategoryBreakdownCurrency = "CLF"
	SpendingCategoryBreakdownCurrencyCLP       SpendingCategoryBreakdownCurrency = "CLP"
	SpendingCategoryBreakdownCurrencyCNY       SpendingCategoryBreakdownCurrency = "CNY"
	SpendingCategoryBreakdownCurrencyCOP       SpendingCategoryBreakdownCurrency = "COP"
	SpendingCategoryBreakdownCurrencyCOU       SpendingCategoryBreakdownCurrency = "COU"
	SpendingCategoryBreakdownCurrencyCRC       SpendingCategoryBreakdownCurrency = "CRC"
	SpendingCategoryBreakdownCurrencyCUC       SpendingCategoryBreakdownCurrency = "CUC"
	SpendingCategoryBreakdownCurrencyCUP       SpendingCategoryBreakdownCurrency = "CUP"
	SpendingCategoryBreakdownCurrencyCVE       SpendingCategoryBreakdownCurrency = "CVE"
	SpendingCategoryBreakdownCurrencyCZK       SpendingCategoryBreakdownCurrency = "CZK"
	SpendingCategoryBreakdownCurrencyDJF       SpendingCategoryBreakdownCurrency = "DJF"
	SpendingCategoryBreakdownCurrencyDKK       SpendingCategoryBreakdownCurrency = "DKK"
	SpendingCategoryBreakdownCurrencyDOP       SpendingCategoryBreakdownCurrency = "DOP"
	SpendingCategoryBreakdownCurrencyDZD       SpendingCategoryBreakdownCurrency = "DZD"
	SpendingCategoryBreakdownCurrencyEGP       SpendingCategoryBreakdownCurrency = "EGP"
	SpendingCategoryBreakdownCurrencyERN       SpendingCategoryBreakdownCurrency = "ERN"
	SpendingCategoryBreakdownCurrencyETB       SpendingCategoryBreakdownCurrency = "ETB"
	SpendingCategoryBreakdownCurrencyEUR       SpendingCategoryBreakdownCurrency = "EUR"
	SpendingCategoryBreakdownCurrencyFJD       SpendingCategoryBreakdownCurrency = "FJD"
	SpendingCategoryBreakdownCurrencyFKP       SpendingCategoryBreakdownCurrency = "FKP"
	SpendingCategoryBreakdownCurrencyGBP       SpendingCategoryBreakdownCurrency = "GBP"
	SpendingCategoryBreakdownCurrencyGEL       SpendingCategoryBreakdownCurrency = "GEL"
	SpendingCategoryBreakdownCurrencyGHS       SpendingCategoryBreakdownCurrency = "GHS"
	SpendingCategoryBreakdownCurrencyGIP       SpendingCategoryBreakdownCurrency = "GIP"
	SpendingCategoryBreakdownCurrencyGMD       SpendingCategoryBreakdownCurrency = "GMD"
	SpendingCategoryBreakdownCurrencyGNF       SpendingCategoryBreakdownCurrency = "GNF"
	SpendingCategoryBreakdownCurrencyGTQ       SpendingCategoryBreakdownCurrency = "GTQ"
	SpendingCategoryBreakdownCurrencyGYD       SpendingCategoryBreakdownCurrency = "GYD"
	SpendingCategoryBreakdownCurrencyHKD       SpendingCategoryBreakdownCurrency = "HKD"
	SpendingCategoryBreakdownCurrencyHNL       SpendingCategoryBreakdownCurrency = "HNL"
	SpendingCategoryBreakdownCurrencyHRK       SpendingCategoryBreakdownCurrency = "HRK"
	SpendingCategoryBreakdownCurrencyHTG       SpendingCategoryBreakdownCurrency = "HTG"
	SpendingCategoryBreakdownCurrencyHUF       SpendingCategoryBreakdownCurrency = "HUF"
	SpendingCategoryBreakdownCurrencyIDR       SpendingCategoryBreakdownCurrency = "IDR"
	SpendingCategoryBreakdownCurrencyILS       SpendingCategoryBreakdownCurrency = "ILS"
	SpendingCategoryBreakdownCurrencyINR       SpendingCategoryBreakdownCurrency = "INR"
	SpendingCategoryBreakdownCurrencyIQD       SpendingCategoryBreakdownCurrency = "IQD"
	SpendingCategoryBreakdownCurrencyIRR       SpendingCategoryBreakdownCurrency = "IRR"
	SpendingCategoryBreakdownCurrencyISK       SpendingCategoryBreakdownCurrency = "ISK"
	SpendingCategoryBreakdownCurrencyJMD       SpendingCategoryBreakdownCurrency = "JMD"
	SpendingCategoryBreakdownCurrencyJOD       SpendingCategoryBreakdownCurrency = "JOD"
	SpendingCategoryBreakdownCurrencyJPY       SpendingCategoryBreakdownCurrency = "JPY"
	SpendingCategoryBreakdownCurrencyKES       SpendingCategoryBreakdownCurrency = "KES"
	SpendingCategoryBreakdownCurrencyKGS       SpendingCategoryBreakdownCurrency = "KGS"
	SpendingCategoryBreakdownCurrencyKHR       SpendingCategoryBreakdownCurrency = "KHR"
	SpendingCategoryBreakdownCurrencyKMF       SpendingCategoryBreakdownCurrency = "KMF"
	SpendingCategoryBreakdownCurrencyKPW       SpendingCategoryBreakdownCurrency = "KPW"
	SpendingCategoryBreakdownCurrencyKRW       SpendingCategoryBreakdownCurrency = "KRW"
	SpendingCategoryBreakdownCurrencyKWD       SpendingCategoryBreakdownCurrency = "KWD"
	SpendingCategoryBreakdownCurrencyKYD       SpendingCategoryBreakdownCurrency = "KYD"
	SpendingCategoryBreakdownCurrencyKZT       SpendingCategoryBreakdownCurrency = "KZT"
	SpendingCategoryBreakdownCurrencyLAK       SpendingCategoryBreakdownCurrency = "LAK"
	SpendingCategoryBreakdownCurrencyLBP       SpendingCategoryBreakdownCurrency = "LBP"
	SpendingCategoryBreakdownCurrencyLKR       SpendingCategoryBreakdownCurrency = "LKR"
	SpendingCategoryBreakdownCurrencyLRD       SpendingCategoryBreakdownCurrency = "LRD"
	SpendingCategoryBreakdownCurrencyLSL       SpendingCategoryBreakdownCurrency = "LSL"
	SpendingCategoryBreakdownCurrencyLTL       SpendingCategoryBreakdownCurrency = "LTL"
	SpendingCategoryBreakdownCurrencyLYD       SpendingCategoryBreakdownCurrency = "LYD"
	SpendingCategoryBreakdownCurrencyMAD       SpendingCategoryBreakdownCurrency = "MAD"
	SpendingCategoryBreakdownCurrencyMDL       SpendingCategoryBreakdownCurrency = "MDL"
	SpendingCategoryBreakdownCurrencyMGA       SpendingCategoryBreakdownCurrency = "MGA"
	SpendingCategoryBreakdownCurrencyMKD       SpendingCategoryBreakdownCurrency = "MKD"
	SpendingCategoryBreakdownCurrencyMMK       SpendingCategoryBreakdownCurrency = "MMK"
	SpendingCategoryBreakdownCurrencyMNT       SpendingCategoryBreakdownCurrency = "MNT"
	SpendingCategoryBreakdownCurrencyMOP       SpendingCategoryBreakdownCurrency = "MOP"
	SpendingCategoryBreakdownCurrencyMRO       SpendingCategoryBreakdownCurrency = "MRO"
	SpendingCategoryBreakdownCurrencyMRU       SpendingCategoryBreakdownCurrency = "MRU"
	SpendingCategoryBreakdownCurrencyMUR       SpendingCategoryBreakdownCurrency = "MUR"
	SpendingCategoryBreakdownCurrencyMVR       SpendingCategoryBreakdownCurrency = "MVR"
	SpendingCategoryBreakdownCurrencyMWK       SpendingCategoryBreakdownCurrency = "MWK"
	SpendingCategoryBreakdownCurrencyMXN       SpendingCategoryBreakdownCurrency = "MXN"
	SpendingCategoryBreakdownCurrencyMXV       SpendingCategoryBreakdownCurrency = "MXV"
	SpendingCategoryBreakdownCurrencyMYR       SpendingCategoryBreakdownCurrency = "MYR"
	SpendingCategoryBreakdownCurrencyMZN       SpendingCategoryBreakdownCurrency = "MZN"
	SpendingCategoryBreakdownCurrencyNAD       SpendingCategoryBreakdownCurrency = "NAD"
	SpendingCategoryBreakdownCurrencyNGN       SpendingCategoryBreakdownCurrency = "NGN"
	SpendingCategoryBreakdownCurrencyNIO       SpendingCategoryBreakdownCurrency = "NIO"
	SpendingCategoryBreakdownCurrencyNOK       SpendingCategoryBreakdownCurrency = "NOK"
	SpendingCategoryBreakdownCurrencyNPR       SpendingCategoryBreakdownCurrency = "NPR"
	SpendingCategoryBreakdownCurrencyNZD       SpendingCategoryBreakdownCurrency = "NZD"
	SpendingCategoryBreakdownCurrencyOMR       SpendingCategoryBreakdownCurrency = "OMR"
	SpendingCategoryBreakdownCurrencyPAB       SpendingCategoryBreakdownCurrency = "PAB"
	SpendingCategoryBreakdownCurrencyPEN       SpendingCategoryBreakdownCurrency = "PEN"
	SpendingCategoryBreakdownCurrencyPGK       SpendingCategoryBreakdownCurrency = "PGK"
	SpendingCategoryBreakdownCurrencyPHP       SpendingCategoryBreakdownCurrency = "PHP"
	SpendingCategoryBreakdownCurrencyPKR       SpendingCategoryBreakdownCurrency = "PKR"
	SpendingCategoryBreakdownCurrencyPLN       SpendingCategoryBreakdownCurrency = "PLN"
	SpendingCategoryBreakdownCurrencyPYG       SpendingCategoryBreakdownCurrency = "PYG"
	SpendingCategoryBreakdownCurrencyQAR       SpendingCategoryBreakdownCurrency = "QAR"
	SpendingCategoryBreakdownCurrencyRON       SpendingCategoryBreakdownCurrency = "RON"
	SpendingCategoryBreakdownCurrencyRSD       SpendingCategoryBreakdownCurrency = "RSD"
	SpendingCategoryBreakdownCurrencyRUB       SpendingCategoryBreakdownCurrency = "RUB"
	SpendingCategoryBreakdownCurrencyRUR       SpendingCategoryBreakdownCurrency = "RUR"
	SpendingCategoryBreakdownCurrencyRWF       SpendingCategoryBreakdownCurrency = "RWF"
	SpendingCategoryBreakdownCurrencySAR       SpendingCategoryBreakdownCurrency = "SAR"
	SpendingCategoryBreakdownCurrencySBD       SpendingCategoryBreakdownCurrency = "SBD"
	SpendingCategoryBreakdownCurrencySCR       SpendingCategoryBreakdownCurrency = "SCR"
	SpendingCategoryBreakdownCurrencySDG       SpendingCategoryBreakdownCurrency = "SDG"
	SpendingCategoryBreakdownCurrencySEK       SpendingCategoryBreakdownCurrency = "SEK"
	SpendingCategoryBreakdownCurrencySGD       SpendingCategoryBreakdownCurrency = "SGD"
	SpendingCategoryBreakdownCurrencySHP       SpendingCategoryBreakdownCurrency = "SHP"
	SpendingCategoryBreakdownCurrencySLE       SpendingCategoryBreakdownCurrency = "SLE"
	SpendingCategoryBreakdownCurrencySLL       SpendingCategoryBreakdownCurrency = "SLL"
	SpendingCategoryBreakdownCurrencySOS       SpendingCategoryBreakdownCurrency = "SOS"
	SpendingCategoryBreakdownCurrencySRD       SpendingCategoryBreakdownCurrency = "SRD"
	SpendingCategoryBreakdownCurrencySSP       SpendingCategoryBreakdownCurrency = "SSP"
	SpendingCategoryBreakdownCurrencySTD       SpendingCategoryBreakdownCurrency = "STD"
	SpendingCategoryBreakdownCurrencySTN       SpendingCategoryBreakdownCurrency = "STN"
	SpendingCategoryBreakdownCurrencySVC       SpendingCategoryBreakdownCurrency = "SVC"
	SpendingCategoryBreakdownCurrencySYP       SpendingCategoryBreakdownCurrency = "SYP"
	SpendingCategoryBreakdownCurrencySZL       SpendingCategoryBreakdownCurrency = "SZL"
	SpendingCategoryBreakdownCurrencyTHB       SpendingCategoryBreakdownCurrency = "THB"
	SpendingCategoryBreakdownCurrencyTJS       SpendingCategoryBreakdownCurrency = "TJS"
	SpendingCategoryBreakdownCurrencyTMT       SpendingCategoryBreakdownCurrency = "TMT"
	SpendingCategoryBreakdownCurrencyTND       SpendingCategoryBreakdownCurrency = "TND"
	SpendingCategoryBreakdownCurrencyTOP       SpendingCategoryBreakdownCurrency = "TOP"
	SpendingCategoryBreakdownCurrencyTRY       SpendingCategoryBreakdownCurrency = "TRY"
	SpendingCategoryBreakdownCurrencyTTD       SpendingCategoryBreakdownCurrency = "TTD"
	SpendingCategoryBreakdownCurrencyTWD       SpendingCategoryBreakdownCurrency = "TWD"
	SpendingCategoryBreakdownCurrencyTZS       SpendingCategoryBreakdownCurrency = "TZS"
	SpendingCategoryBreakdownCurrencyUAH       SpendingCategoryBreakdownCurrency = "UAH"
	SpendingCategoryBreakdownCurrencyUGX       SpendingCategoryBreakdownCurrency = "UGX"
	SpendingCategoryBreakdownCurrencyUNDEFINED SpendingCategoryBreakdownCurrency = "UNDEFINED"
	SpendingCategoryBreakdownCurrencyUSD       SpendingCategoryBreakdownCurrency = "USD"
	SpendingCategoryBreakdownCurrencyUSN       SpendingCategoryBreakdownCurrency = "USN"
	SpendingCategoryBreakdownCurrencyUSS       SpendingCategoryBreakdownCurrency = "USS"
	SpendingCategoryBreakdownCurrencyUYI       SpendingCategoryBreakdownCurrency = "UYI"
	SpendingCategoryBreakdownCurrencyUYU       SpendingCategoryBreakdownCurrency = "UYU"
	SpendingCategoryBreakdownCurrencyUZS       SpendingCategoryBreakdownCurrency = "UZS"
	SpendingCategoryBreakdownCurrencyVEF       SpendingCategoryBreakdownCurrency = "VEF"
	SpendingCategoryBreakdownCurrencyVES       SpendingCategoryBreakdownCurrency = "VES"
	SpendingCategoryBreakdownCurrencyVND       SpendingCategoryBreakdownCurrency = "VND"
	SpendingCategoryBreakdownCurrencyVUV       SpendingCategoryBreakdownCurrency = "VUV"
	SpendingCategoryBreakdownCurrencyWST       SpendingCategoryBreakdownCurrency = "WST"
	SpendingCategoryBreakdownCurrencyXAF       SpendingCategoryBreakdownCurrency = "XAF"
	SpendingCategoryBreakdownCurrencyXAG       SpendingCategoryBreakdownCurrency = "XAG"
	SpendingCategoryBreakdownCurrencyXAU       SpendingCategoryBreakdownCurrency = "XAU"
	SpendingCategoryBreakdownCurrencyXBA       SpendingCategoryBreakdownCurrency = "XBA"
	SpendingCategoryBreakdownCurrencyXBB       SpendingCategoryBreakdownCurrency = "XBB"
	SpendingCategoryBreakdownCurrencyXBC       SpendingCategoryBreakdownCurrency = "XBC"
	SpendingCategoryBreakdownCurrencyXBD       SpendingCategoryBreakdownCurrency = "XBD"
	SpendingCategoryBreakdownCurrencyXCD       SpendingCategoryBreakdownCurrency = "XCD"
	SpendingCategoryBreakdownCurrencyXDR       SpendingCategoryBreakdownCurrency = "XDR"
	SpendingCategoryBreakdownCurrencyXOF       SpendingCategoryBreakdownCurrency = "XOF"
	SpendingCategoryBreakdownCurrencyXPD       SpendingCategoryBreakdownCurrency = "XPD"
	SpendingCategoryBreakdownCurrencyXPF       SpendingCategoryBreakdownCurrency = "XPF"
	SpendingCategoryBreakdownCurrencyXPT       SpendingCategoryBreakdownCurrency = "XPT"
	SpendingCategoryBreakdownCurrencyXSU       SpendingCategoryBreakdownCurrency = "XSU"
	SpendingCategoryBreakdownCurrencyXTS       SpendingCategoryBreakdownCurrency = "XTS"
	SpendingCategoryBreakdownCurrencyXUA       SpendingCategoryBreakdownCurrency = "XUA"
	SpendingCategoryBreakdownCurrencyXXX       SpendingCategoryBreakdownCurrency = "XXX"
	SpendingCategoryBreakdownCurrencyYER       SpendingCategoryBreakdownCurrency = "YER"
	SpendingCategoryBreakdownCurrencyZAR       SpendingCategoryBreakdownCurrency = "ZAR"
	SpendingCategoryBreakdownCurrencyZMW       SpendingCategoryBreakdownCurrency = "ZMW"
	SpendingCategoryBreakdownCurrencyZWL       SpendingCategoryBreakdownCurrency = "ZWL"
)

// Defines values for SpendingCategoryBreakdownNetDirection.
const (
	SpendingCategoryBreakdownNetDirectionIN  SpendingCategoryBreakdownNetDirection = "IN"
	SpendingCategoryBreakdownNetDirectionOUT SpendingCategoryBreakdownNetDirection = "OUT"
)

// Defines values for SpendingCategoryBreakdownSpendingCategory.
const (
	SpendingCategoryBreakdownSpendingCategoryADMIN                 SpendingCategoryBreakdownSpendingCategory = "ADMIN"
	SpendingCategoryBreakdownSpendingCategoryBANKCHARGES           SpendingCategoryBreakdownSpendingCategory = "BANK_CHARGES"
	SpendingCategoryBreakdownSpendingCategoryBIKE                  SpendingCategoryBreakdownSpendingCategory = "BIKE"
	SpendingCategoryBreakdownSpendingCategoryBILLSANDSERVICES      SpendingCategoryBreakdownSpendingCategory = "BILLS_AND_SERVICES"
	SpendingCategoryBreakdownSpendingCategoryBUCKETLIST            SpendingCategoryBreakdownSpendingCategory = "BUCKET_LIST"
	SpendingCategoryBreakdownSpendingCategoryBUSINESSENTERTAINMENT SpendingCategoryBreakdownSpendingCategory = "BUSINESS_ENTERTAINMENT"
	SpendingCategoryBreakdownSpendingCategoryCAR                   SpendingCategoryBreakdownSpendingCategory = "CAR"
	SpendingCategoryBreakdownSpendingCategoryCASH                  SpendingCategoryBreakdownSpendingCategory = "CASH"
	SpendingCategoryBreakdownSpendingCategoryCELEBRATION           SpendingCategoryBreakdownSpendingCategory = "CELEBRATION"
	SpendingCategoryBreakdownSpendingCategoryCHARITY               SpendingCategoryBreakdownSpendingCategory = "CHARITY"
	SpendingCategoryBreakdownSpendingCategoryCHILDREN              SpendingCategoryBreakdownSpendingCategory = "CHILDREN"
	SpendingCategoryBreakdownSpendingCategoryCLIENTREFUNDS         SpendingCategoryBreakdownSpendingCategory = "CLIENT_REFUNDS"
	SpendingCategoryBreakdownSpendingCategoryCLOTHES               SpendingCategoryBreakdownSpendingCategory = "CLOTHES"
	SpendingCategoryBreakdownSpendingCategoryCOFFEE                SpendingCategoryBreakdownSpendingCategory = "COFFEE"
	SpendingCategoryBreakdownSpendingCategoryCORPORATIONTAX        SpendingCategoryBreakdownSpendingCategory = "CORPORATION_TAX"
	SpendingCategoryBreakdownSpendingCategoryDEBTREPAYMENT         SpendingCategoryBreakdownSpendingCategory = "DEBT_REPAYMENT"
	SpendingCategoryBreakdownSpendingCategoryDIRECTORSWAGES        SpendingCategoryBreakdownSpendingCategory = "DIRECTORS_WAGES"
	SpendingCategoryBreakdownSpendingCategoryDIVIDENDS             SpendingCategoryBreakdownSpendingCategory = "DIVIDENDS"
	SpendingCategoryBreakdownSpendingCategoryDIY                   SpendingCategoryBreakdownSpendingCategory = "DIY"
	SpendingCategoryBreakdownSpendingCategoryDRINKS                SpendingCategoryBreakdownSpendingCategory = "DRINKS"
	SpendingCategoryBreakdownSpendingCategoryEATINGOUT             SpendingCategoryBreakdownSpendingCategory = "EATING_OUT"
	SpendingCategoryBreakdownSpendingCategoryEDUCATION             SpendingCategoryBreakdownSpendingCategory = "EDUCATION"
	SpendingCategoryBreakdownSpendingCategoryEMERGENCY             SpendingCategoryBreakdownSpendingCategory = "EMERGENCY"
	SpendingCategoryBreakdownSpendingCategoryENTERTAINMENT         SpendingCategoryBreakdownSpendingCategory = "ENTERTAINMENT"
	SpendingCategoryBreakdownSpendingCategoryEQUIPMENT             SpendingCategoryBreakdownSpendingCategory = "EQUIPMENT"
	SpendingCategoryBreakdownSpendingCategoryESSENTIALSPEND        SpendingCategoryBreakdownSpendingCategory = "ESSENTIAL_SPEND"
	SpendingCategoryBreakdownSpendingCategoryEXPENSES              SpendingCategoryBreakdownSpendingCategory = "EXPENSES"
	SpendingCategoryBreakdownSpendingCategoryFAMILY                SpendingCategoryBreakdownSpendingCategory = "FAMILY"
	SpendingCategoryBreakdownSpendingCategoryFITNESS               SpendingCategoryBreakdownSpendingCategory = "FITNESS"
	SpendingCategoryBreakdownSpendingCategoryFOODANDDRINK          SpendingCategoryBreakdownSpendingCategory = "FOOD_AND_DRINK"
	SpendingCategoryBreakdownSpendingCategoryFUEL                  SpendingCategoryBreakdownSpendingCategory = "FUEL"
	SpendingCategoryBreakdownSpendingCategoryGAMBLING              SpendingCategoryBreakdownSpendingCategory = "GAMBLING"
	SpendingCategoryBreakdownSpendingCategoryGAMING                SpendingCategoryBreakdownSpendingCategory = "GAMING"
	SpendingCategoryBreakdownSpendingCategoryGARDEN                SpendingCategoryBreakdownSpendingCategory = "GARDEN"
	SpendingCategoryBreakdownSpendingCategoryGENERAL               SpendingCategoryBreakdownSpendingCategory = "GENERAL"
	SpendingCategoryBreakdownSpendingCategoryGIFTS                 SpendingCategoryBreakdownSpendingCategory = "GIFTS"
	SpendingCategoryBreakdownSpendingCategoryGROCERIES             SpendingCategoryBreakdownSpendingCategory = "GROCERIES"
	SpendingCategoryBreakdownSpendingCategoryHOBBY                 SpendingCategoryBreakdownSpendingCategory = "HOBBY"
	SpendingCategoryBreakdownSpendingCategoryHOLIDAYS              SpendingCategoryBreakdownSpendingCategory = "HOLIDAYS"
	SpendingCategoryBreakdownSpendingCategoryHOME                  SpendingCategoryBreakdownSpendingCategory = "HOME"
	SpendingCategoryBreakdownSpendingCategoryIMPULSEBUY            SpendingCategoryBreakdownSpendingCategory = "IMPULSE_BUY"
	SpendingCategoryBreakdownSpendingCategoryINCOME                SpendingCategoryBreakdownSpendingCategory = "INCOME"
	SpendingCategoryBreakdownSpendingCategoryINSURANCE             SpendingCategoryBreakdownSpendingCategory = "INSURANCE"
	SpendingCategoryBreakdownSpendingCategoryINTERESTPAYMENTS      SpendingCategoryBreakdownSpendingCategory = "INTEREST_PAYMENTS"
	SpendingCategoryBreakdownSpendingCategoryINVENTORY             SpendingCategoryBreakdownSpendingCategory = "INVENTORY"
	SpendingCategoryBreakdownSpendingCategoryINVESTMENTCAPITAL     SpendingCategoryBreakdownSpendingCategory = "INVESTMENT_CAPITAL"
	SpendingCategoryBreakdownSpendingCategoryINVESTMENTS           SpendingCategoryBreakdownSpendingCategory = "INVESTMENTS"
	SpendingCategoryBreakdownSpendingCategoryLIFESTYLE             SpendingCategoryBreakdownSpendingCategory = "LIFESTYLE"
	SpendingCategoryBreakdownSpendingCategoryLOANPRINCIPAL         SpendingCategoryBreakdownSpendingCategory = "LOAN_PRINCIPAL"
	SpendingCategoryBreakdownSpendingCategoryMAINTENANCEANDREPAIRS SpendingCategoryBreakdownSpendingCategory = "MAINTENANCE_AND_REPAIRS"
	SpendingCategoryBreakdownSpendingCategoryMARKETING             SpendingCategoryBreakdownSpendingCategory = "MARKETING"
	SpendingCategoryBreakdownSpendingCategoryMEDICAL               SpendingCategoryBreakdownSpendingCategory = "MEDICAL"
	SpendingCategoryBreakdownSpendingCategoryMORTGAGE              SpendingCategoryBreakdownSpendingCategory = "MORTGAGE"
	SpendingCategoryBreakdownSpendingCategoryNONE                  SpendingCategoryBreakdownSpendingCategory = "NONE"
	SpendingCategoryBreakdownSpendingCategoryNONESSENTIALSPEND     SpendingCategoryBreakdownSpendingCategory = "NON_ESSENTIAL_SPEND"
	SpendingCategoryBreakdownSpendingCategoryOTHER                 SpendingCategoryBreakdownSpendingCategory = "OTHER"
	SpendingCategoryBreakdownSpendingCategoryOTHERINCOME           SpendingCategoryBreakdownSpendingCategory = "OTHER_INCOME"
	SpendingCategoryBreakdownSpendingCategoryPAYMENTS              SpendingCategoryBreakdownSpendingCategory = "PAYMENTS"
	SpendingCategoryBreakdownSpendingCategoryPERSONAL              SpendingCategoryBreakdownSpendingCategory = "PERSONAL"
	SpendingCategoryBreakdownSpendingCategoryPERSONALCARE          SpendingCategoryBreakdownSpendingCategory = "PERSONAL_CARE"
	SpendingCategoryBreakdownSpendingCategoryPERSONALTRANSFERS     SpendingCategoryBreakdownSpendingCategory = "PERSONAL_TRANSFERS"
	SpendingCategoryBreakdownSpendingCategoryPETS                  SpendingCategoryBreakdownSpendingCategory = "PETS"
	SpendingCategoryBreakdownSpendingCategoryPHONEANDINTERNET      SpendingCategoryBreakdownSpendingCategory = "PHONE_AND_INTERNET"
	SpendingCategoryBreakdownSpendingCategoryPROFESSIONALSERVICES  SpendingCategoryBreakdownSpendingCategory = "PROFESSIONAL_SERVICES"
	SpendingCategoryBreakdownSpendingCategoryPROJECTS              SpendingCategoryBreakdownSpendingCategory = "PROJECTS"
	SpendingCategoryBreakdownSpendingCategoryRELATIONSHIPS         SpendingCategoryBreakdownSpendingCategory = "RELATIONSHIPS"
	SpendingCategoryBreakdownSpendingCategoryRENT                  SpendingCategoryBreakdownSpendingCategory = "RENT"
	SpendingCategoryBreakdownSpendingCategoryREPAIRSANDMAINTENANCE SpendingCategoryBreakdownSpendingCategory = "REPAIRS_AND_MAINTENANCE"
	SpendingCategoryBreakdownSpendingCategoryREVENUE               SpendingCategoryBreakdownSpendingCategory = "REVENUE"
	SpendingCategoryBreakdownSpendingCategorySAVING                SpendingCategoryBreakdownSpendingCategory = "SAVING"
	SpendingCategoryBreakdownSpendingCategorySELFASSESSMENTTAX     SpendingCategoryBreakdownSpendingCategory = "SELF_ASSESSMENT_TAX"
	SpendingCategoryBreakdownSpendingCategorySHOPPING              SpendingCategoryBreakdownSpendingCategory = "SHOPPING"
	SpendingCategoryBreakdownSpendingCategorySTAFF                 SpendingCategoryBreakdownSpendingCategory = "STAFF"
	SpendingCategoryBreakdownSpendingCategorySUBSCRIPTIONS         SpendingCategoryBreakdownSpendingCategory = "SUBSCRIPTIONS"
	SpendingCategoryBreakdownSpendingCategoryTAKEAWAY              SpendingCategoryBreakdownSpendingCategory = "TAKEAWAY"
	SpendingCategoryBreakdownSpendingCategoryTAXI                  SpendingCategoryBreakdownSpendingCategory = "TAXI"
	SpendingCategoryBreakdownSpendingCategoryTRANSFERS             SpendingCategoryBreakdownSpendingCategory = "TRANSFERS"
	SpendingCategoryBreakdownSpendingCategoryTRANSPORT             SpendingCategoryBreakdownSpendingCategory = "TRANSPORT"
	SpendingCategoryBreakdownSpendingCategoryTRAVEL                SpendingCategoryBreakdownSpendingCategory = "TRAVEL"
	SpendingCategoryBreakdownSpendingCategoryTREATS                SpendingCategoryBreakdownSpendingCategory = "TREATS"
	SpendingCategoryBreakdownSpendingCategoryVAT                   SpendingCategoryBreakdownSpendingCategory = "VAT"
	SpendingCategoryBreakdownSpendingCategoryVEHICLES              SpendingCategoryBreakdownSpendingCategory = "VEHICLES"
	SpendingCategoryBreakdownSpendingCategoryWEDDING               SpendingCategoryBreakdownSpendingCategory = "WEDDING"
	SpendingCategoryBreakdownSpendingCategoryWELLBEING             SpendingCategoryBreakdownSpendingCategory = "WELLBEING"
	SpendingCategoryBreakdownSpendingCategoryWORKPLACE             SpendingCategoryBreakdownSpendingCategory = "WORKPLACE"
)

// Defines values for SpendingCategorySummaryCurrency.
const (
	SpendingCategorySummaryCurrencyAED       SpendingCategorySummaryCurrency = "AED"
	SpendingCategorySummaryCurrencyAFN       SpendingCategorySummaryCurrency = "AFN"
	SpendingCategorySummaryCurrencyALL       SpendingCategorySummaryCurrency = "ALL"
	SpendingCategorySummaryCurrencyAMD       SpendingCategorySummaryCurrency = "AMD"
	SpendingCategorySummaryCurrencyANG       SpendingCategorySummaryCurrency = "ANG"
	SpendingCategorySummaryCurrencyAOA       SpendingCategorySummaryCurrency = "AOA"
	SpendingCategorySummaryCurrencyARS       SpendingCategorySummaryCurrency = "ARS"
	SpendingCategorySummaryCurrencyAUD       SpendingCategorySummaryCurrency = "AUD"
	SpendingCategorySummaryCurrencyAWG       SpendingCategorySummaryCurrency = "AWG"
	SpendingCategorySummaryCurrencyAZN       SpendingCategorySummaryCurrency = "AZN"
	SpendingCategorySummaryCurrencyBAM       SpendingCategorySummaryCurrency = "BAM"
	SpendingCategorySummaryCurrencyBBD       SpendingCategorySummaryCurrency = "BBD"
	SpendingCategorySummaryCurrencyBDT       SpendingCategorySummaryCurrency = "BDT"
	SpendingCategorySummaryCurrencyBGN       SpendingCategorySummaryCurrency = "BGN"
	SpendingCategorySummaryCurrencyBHD       SpendingCategorySummaryCurrency = "BHD"
	SpendingCategorySummaryCurrencyBIF       SpendingCategorySummaryCurrency = "BIF"
	SpendingCategorySummaryCurrencyBMD       SpendingCategorySummaryCurrency = "BMD"
	SpendingCategorySummaryCurrencyBND       SpendingCategorySummaryCurrency = "BND"
	SpendingCategorySummaryCurrencyBOB       SpendingCategorySummaryCurrency = "BOB"
	SpendingCategorySummaryCurrencyBOV       SpendingCategorySummaryCurrency = "BOV"
	SpendingCategorySummaryCurrencyBRL       SpendingCategorySummaryCurrency = "BRL"
	SpendingCategorySummaryCurrencyBSD       SpendingCategorySummaryCurrency = "BSD"
	SpendingCategorySummaryCurrencyBTN       SpendingCategorySummaryCurrency = "BTN"
	SpendingCategorySummaryCurrencyBWP       SpendingCategorySummaryCurrency = "BWP"
	SpendingCategorySummaryCurrencyBYN       SpendingCategorySummaryCurrency = "BYN"
	SpendingCategorySummaryCurrencyBYR       SpendingCategorySummaryCurrency = "BYR"
	SpendingCategorySummaryCurrencyBZD       SpendingCategorySummaryCurrency = "BZD"
	SpendingCategorySummaryCurrencyCAD       SpendingCategorySummaryCurrency = "CAD"
	SpendingCategorySummaryCurrencyCDF       SpendingCategorySummaryCurrency = "CDF"
	SpendingCategorySummaryCurrencyCHE       SpendingCategorySummaryCurrency = "CHE"
	SpendingCategorySummaryCurrencyCHF       SpendingCategorySummaryCurrency = "CHF"
	SpendingCategorySummaryCurrencyCHW       SpendingCategorySummaryCurrency = "CHW"
	SpendingCategorySummaryCurrencyCLF       SpendingCategorySummaryCurrency = "CLF"
	SpendingCategorySummaryCurrencyCLP       SpendingCategorySummaryCurrency = "CLP"
	SpendingCategorySummaryCurrencyCNY       SpendingCategorySummaryCurrency = "CNY"
	SpendingCategorySummaryCurrencyCOP       SpendingCategorySummaryCurrency = "COP"
	SpendingCategorySummaryCurrencyCOU       SpendingCategorySummaryCurrency = "COU"
	SpendingCategorySummaryCurrencyCRC       SpendingCategorySummaryCurrency = "CRC"
	SpendingCategorySummaryCurrencyCUC       SpendingCategorySummaryCurrency = "CUC"
	SpendingCategorySummaryCurrencyCUP       SpendingCategorySummaryCurrency = "CUP"
	SpendingCategorySummaryCurrencyCVE       SpendingCategorySummaryCurrency = "CVE"
	SpendingCategorySummaryCurrencyCZK       SpendingCategorySummaryCurrency = "CZK"
	SpendingCategorySummaryCurrencyDJF       SpendingCategorySummaryCurrency = "DJF"
	SpendingCategorySummaryCurrencyDKK       SpendingCategorySummaryCurrency = "DKK"
	SpendingCategorySummaryCurrencyDOP       SpendingCategorySummaryCurrency = "DOP"
	SpendingCategorySummaryCurrencyDZD       SpendingCategorySummaryCurrency = "DZD"
	SpendingCategorySummaryCurrencyEGP       SpendingCategorySummaryCurrency = "EGP"
	SpendingCategorySummaryCurrencyERN       SpendingCategorySummaryCurrency = "ERN"
	SpendingCategorySummaryCurrencyETB       SpendingCategorySummaryCurrency = "ETB"
	SpendingCategorySummaryCurrencyEUR       SpendingCategorySummaryCurrency = "EUR"
	SpendingCategorySummaryCurrencyFJD       SpendingCategorySummaryCurrency = "FJD"
	SpendingCategorySummaryCurrencyFKP       SpendingCategorySummaryCurrency = "FKP"
	SpendingCategorySummaryCurrencyGBP       SpendingCategorySummaryCurrency = "GBP"
	SpendingCategorySummaryCurrencyGEL       SpendingCategorySummaryCurrency = "GEL"
	SpendingCategorySummaryCurrencyGHS       SpendingCategorySummaryCurrency = "GHS"
	SpendingCategorySummaryCurrencyGIP       SpendingCategorySummaryCurrency = "GIP"
	SpendingCategorySummaryCurrencyGMD       SpendingCategorySummaryCurrency = "GMD"
	SpendingCategorySummaryCurrencyGNF       SpendingCategorySummaryCurrency = "GNF"
	SpendingCategorySummaryCurrencyGTQ       SpendingCategorySummaryCurrency = "GTQ"
	SpendingCategorySummaryCurrencyGYD       SpendingCategorySummaryCurrency = "GYD"
	SpendingCategorySummaryCurrencyHKD       SpendingCategorySummaryCurrency = "HKD"
	SpendingCategorySummaryCurrencyHNL       SpendingCategorySummaryCurrency = "HNL"
	SpendingCategorySummaryCurrencyHRK       SpendingCategorySummaryCurrency = "HRK"
	SpendingCategorySummaryCurrencyHTG       SpendingCategorySummaryCurrency = "HTG"
	SpendingCategorySummaryCurrencyHUF       SpendingCategorySummaryCurrency = "HUF"
	SpendingCategorySummaryCurrencyIDR       SpendingCategorySummaryCurrency = "IDR"
	SpendingCategorySummaryCurrencyILS       SpendingCategorySummaryCurrency = "ILS"
	SpendingCategorySummaryCurrencyINR       SpendingCategorySummaryCurrency = "INR"
	SpendingCategorySummaryCurrencyIQD       SpendingCategorySummaryCurrency = "IQD"
	SpendingCategorySummaryCurrencyIRR       SpendingCategorySummaryCurrency = "IRR"
	SpendingCategorySummaryCurrencyISK       SpendingCategorySummaryCurrency = "ISK"
	SpendingCategorySummaryCurrencyJMD       SpendingCategorySummaryCurrency = "JMD"
	SpendingCategorySummaryCurrencyJOD       SpendingCategorySummaryCurrency = "JOD"
	SpendingCategorySummaryCurrencyJPY       SpendingCategorySummaryCurrency = "JPY"
	SpendingCategorySummaryCurrencyKES       SpendingCategorySummaryCurrency = "KES"
	SpendingCategorySummaryCurrencyKGS       SpendingCategorySummaryCurrency = "KGS"
	SpendingCategorySummaryCurrencyKHR       SpendingCategorySummaryCurrency = "KHR"
	SpendingCategorySummaryCurrencyKMF       SpendingCategorySummaryCurrency = "KMF"
	SpendingCategorySummaryCurrencyKPW       SpendingCategorySummaryCurrency = "KPW"
	SpendingCategorySummaryCurrencyKRW       SpendingCategorySummaryCurrency = "KRW"
	SpendingCategorySummaryCurrencyKWD       SpendingCategorySummaryCurrency = "KWD"
	SpendingCategorySummaryCurrencyKYD       SpendingCategorySummaryCurrency = "KYD"
	SpendingCategorySummaryCurrencyKZT       SpendingCategorySummaryCurrency = "KZT"
	SpendingCategorySummaryCurrencyLAK       SpendingCategorySummaryCurrency = "LAK"
	SpendingCategorySummaryCurrencyLBP       SpendingCategorySummaryCurrency = "LBP"
	SpendingCategorySummaryCurrencyLKR       SpendingCategorySummaryCurrency = "LKR"
	SpendingCategorySummaryCurrencyLRD       SpendingCategorySummaryCurrency = "LRD"
	SpendingCategorySummaryCurrencyLSL       SpendingCategorySummaryCurrency = "LSL"
	SpendingCategorySummaryCurrencyLTL       SpendingCategorySummaryCurrency = "LTL"
	SpendingCategorySummaryCurrencyLYD       SpendingCategorySummaryCurrency = "LYD"
	SpendingCategorySummaryCurrencyMAD       SpendingCategorySummaryCurrency = "MAD"
	SpendingCategorySummaryCurrencyMDL       SpendingCategorySummaryCurrency = "MDL"
	SpendingCategorySummaryCurrencyMGA       SpendingCategorySummaryCurrency = "MGA"
	SpendingCategorySummaryCurrencyMKD       SpendingCategorySummaryCurrency = "MKD"
	SpendingCategorySummaryCurrencyMMK       SpendingCategorySummaryCurrency = "MMK"
	SpendingCategorySummaryCurrencyMNT       SpendingCategorySummaryCurrency = "MNT"
	SpendingCategorySummaryCurrencyMOP       SpendingCategorySummaryCurrency = "MOP"
	SpendingCategorySummaryCurrencyMRO       SpendingCategorySummaryCurrency = "MRO"
	SpendingCategorySummaryCurrencyMRU       SpendingCategorySummaryCurrency = "MRU"
	SpendingCategorySummaryCurrencyMUR       SpendingCategorySummaryCurrency = "MUR"
	SpendingCategorySummaryCurrencyMVR       SpendingCategorySummaryCurrency = "MVR"
	SpendingCategorySummaryCurrencyMWK       SpendingCategorySummaryCurrency = "MWK"
	SpendingCategorySummaryCurrencyMXN       SpendingCategorySummaryCurrency = "MXN"
	SpendingCategorySummaryCurrencyMXV       SpendingCategorySummaryCurrency = "MXV"
	SpendingCategorySummaryCurrencyMYR       SpendingCategorySummaryCurrency = "MYR"
	SpendingCategorySummaryCurrencyMZN       SpendingCategorySummaryCurrency = "MZN"
	SpendingCategorySummaryCurrencyNAD       SpendingCategorySummaryCurrency = "NAD"
	SpendingCategorySummaryCurrencyNGN       SpendingCategorySummaryCurrency = "NGN"
	SpendingCategorySummaryCurrencyNIO       SpendingCategorySummaryCurrency = "NIO"
	SpendingCategorySummaryCurrencyNOK       SpendingCategorySummaryCurrency = "NOK"
	SpendingCategorySummaryCurrencyNPR       SpendingCategorySummaryCurrency = "NPR"
	SpendingCategorySummaryCurrencyNZD       SpendingCategorySummaryCurrency = "NZD"
	SpendingCategorySummaryCurrencyOMR       SpendingCategorySummaryCurrency = "OMR"
	SpendingCategorySummaryCurrencyPAB       SpendingCategorySummaryCurrency = "PAB"
	SpendingCategorySummaryCurrencyPEN       SpendingCategorySummaryCurrency = "PEN"
	SpendingCategorySummaryCurrencyPGK       SpendingCategorySummaryCurrency = "PGK"
	SpendingCategorySummaryCurrencyPHP       SpendingCategorySummaryCurrency = "PHP"
	SpendingCategorySummaryCurrencyPKR       SpendingCategorySummaryCurrency = "PKR"
	SpendingCategorySummaryCurrencyPLN       SpendingCategorySummaryCurrency = "PLN"
	SpendingCategorySummaryCurrencyPYG       SpendingCategorySummaryCurrency = "PYG"
	SpendingCategorySummaryCurrencyQAR       SpendingCategorySummaryCurrency = "QAR"
	SpendingCategorySummaryCurrencyRON       SpendingCategorySummaryCurrency = "RON"
	SpendingCategorySummaryCurrencyRSD       SpendingCategorySummaryCurrency = "RSD"
	SpendingCategorySummaryCurrencyRUB       SpendingCategorySummaryCurrency = "RUB"
	SpendingCategorySummaryCurrencyRUR       SpendingCategorySummaryCurrency = "RUR"
	SpendingCategorySummaryCurrencyRWF       SpendingCategorySummaryCurrency = "RWF"
	SpendingCategorySummaryCurrencySAR       SpendingCategorySummaryCurrency = "SAR"
	SpendingCategorySummaryCurrencySBD       SpendingCategorySummaryCurrency = "SBD"
	SpendingCategorySummaryCurrencySCR       SpendingCategorySummaryCurrency = "SCR"
	SpendingCategorySummaryCurrencySDG       SpendingCategorySummaryCurrency = "SDG"
	SpendingCategorySummaryCurrencySEK       SpendingCategorySummaryCurrency = "SEK"
	SpendingCategorySummaryCurrencySGD       SpendingCategorySummaryCurrency = "SGD"
	SpendingCategorySummaryCurrencySHP       SpendingCategorySummaryCurrency = "SHP"
	SpendingCategorySummaryCurrencySLE       SpendingCategorySummaryCurrency = "SLE"
	SpendingCategorySummaryCurrencySLL       SpendingCategorySummaryCurrency = "SLL"
	SpendingCategorySummaryCurrencySOS       SpendingCategorySummaryCurrency = "SOS"
	SpendingCategorySummaryCurrencySRD       SpendingCategorySummaryCurrency = "SRD"
	SpendingCategorySummaryCurrencySSP       SpendingCategorySummaryCurrency = "SSP"
	SpendingCategorySummaryCurrencySTD       SpendingCategorySummaryCurrency = "STD"
	SpendingCategorySummaryCurrencySTN       SpendingCategorySummaryCurrency = "STN"
	SpendingCategorySummaryCurrencySVC       SpendingCategorySummaryCurrency = "SVC"
	SpendingCategorySummaryCurrencySYP       SpendingCategorySummaryCurrency = "SYP"
	SpendingCategorySummaryCurrencySZL       SpendingCategorySummaryCurrency = "SZL"
	SpendingCategorySummaryCurrencyTHB       SpendingCategorySummaryCurrency = "THB"
	SpendingCategorySummaryCurrencyTJS       SpendingCategorySummaryCurrency = "TJS"
	SpendingCategorySummaryCurrencyTMT       SpendingCategorySummaryCurrency = "TMT"
	SpendingCategorySummaryCurrencyTND       SpendingCategorySummaryCurrency = "TND"
	SpendingCategorySummaryCurrencyTOP       SpendingCategorySummaryCurrency = "TOP"
	SpendingCategorySummaryCurrencyTRY       SpendingCategorySummaryCurrency = "TRY"
	SpendingCategorySummaryCurrencyTTD       SpendingCategorySummaryCurrency = "TTD"
	SpendingCategorySummaryCurrencyTWD       SpendingCategorySummaryCurrency = "TWD"
	SpendingCategorySummaryCurrencyTZS       SpendingCategorySummaryCurrency = "TZS"
	SpendingCategorySummaryCurrencyUAH       SpendingCategorySummaryCurrency = "UAH"
	SpendingCategorySummaryCurrencyUGX       SpendingCategorySummaryCurrency = "UGX"
	SpendingCategorySummaryCurrencyUNDEFINED SpendingCategorySummaryCurrency = "UNDEFINED"
	SpendingCategorySummaryCurrencyUSD       SpendingCategorySummaryCurrency = "USD"
	SpendingCategorySummaryCurrencyUSN       SpendingCategorySummaryCurrency = "USN"
	SpendingCategorySummaryCurrencyUSS       SpendingCategorySummaryCurrency = "USS"
	SpendingCategorySummaryCurrencyUYI       SpendingCategorySummaryCurrency = "UYI"
	SpendingCategorySummaryCurrencyUYU       SpendingCategorySummaryCurrency = "UYU"
	SpendingCategorySummaryCurrencyUZS       SpendingCategorySummaryCurrency = "UZS"
	SpendingCategorySummaryCurrencyVEF       SpendingCategorySummaryCurrency = "VEF"
	SpendingCategorySummaryCurrencyVES       SpendingCategorySummaryCurrency = "VES"
	SpendingCategorySummaryCurrencyVND       SpendingCategorySummaryCurrency = "VND"
	SpendingCategorySummaryCurrencyVUV       SpendingCategorySummaryCurrency = "VUV"
	SpendingCategorySummaryCurrencyWST       SpendingCategorySummaryCurrency = "WST"
	SpendingCategorySummaryCurrencyXAF       SpendingCategorySummaryCurrency = "XAF"
	SpendingCategorySummaryCurrencyXAG       SpendingCategorySummaryCurrency = "XAG"
	SpendingCategorySummaryCurrencyXAU       SpendingCategorySummaryCurrency = "XAU"
	SpendingCategorySummaryCurrencyXBA       SpendingCategorySummaryCurrency = "XBA"
	SpendingCategorySummaryCurrencyXBB       SpendingCategorySummaryCurrency = "XBB"
	SpendingCategorySummaryCurrencyXBC       SpendingCategorySummaryCurrency = "XBC"
	SpendingCategorySummaryCurrencyXBD       SpendingCategorySummaryCurrency = "XBD"
	SpendingCategorySummaryCurrencyXCD       SpendingCategorySummaryCurrency = "XCD"
	SpendingCategorySummaryCurrencyXDR       SpendingCategorySummaryCurrency = "XDR"
	SpendingCategorySummaryCurrencyXOF       SpendingCategorySummaryCurrency = "XOF"
	SpendingCategorySummaryCurrencyXPD       SpendingCategorySummaryCurrency = "XPD"
	SpendingCategorySummaryCurrencyXPF       SpendingCategorySummaryCurrency = "XPF"
	SpendingCategorySummaryCurrencyXPT       SpendingCategorySummaryCurrency = "XPT"
	SpendingCategorySummaryCurrencyXSU       SpendingCategorySummaryCurrency = "XSU"
	SpendingCategorySummaryCurrencyXTS       SpendingCategorySummaryCurrency = "XTS"
	SpendingCategorySummaryCurrencyXUA       SpendingCategorySummaryCurrency = "XUA"
	SpendingCategorySummaryCurrencyXXX       SpendingCategorySummaryCurrency = "XXX"
	SpendingCategorySummaryCurrencyYER       SpendingCategorySummaryCurrency = "YER"
	SpendingCategorySummaryCurrencyZAR       SpendingCategorySummaryCurrency = "ZAR"
	SpendingCategorySummaryCurrencyZMW       SpendingCategorySummaryCurrency = "ZMW"
	SpendingCategorySummaryCurrencyZWL       SpendingCategorySummaryCurrency = "ZWL"
)

// Defines values for SpendingCategorySummaryDirection.
const (
	SpendingCategorySummaryDirectionIN  SpendingCategorySummaryDirection = "IN"
	SpendingCategorySummaryDirectionOUT SpendingCategorySummaryDirection = "OUT"
)

// Defines values for SpendingCounterPartyBreakdownCounterPartyType.
const (
	SpendingCounterPartyBreakdownCounterPartyTypeCATEGORY SpendingCounterPartyBreakdownCounterPartyType = "CATEGORY"
	SpendingCounterPartyBreakdownCounterPartyTypeCHEQUE   SpendingCounterPartyBreakdownCounterPartyType = "CHEQUE"
	SpendingCounterPartyBreakdownCounterPartyTypeCUSTOMER SpendingCounterPartyBreakdownCounterPartyType = "CUSTOMER"
	SpendingCounterPartyBreakdownCounterPartyTypeLOAN     SpendingCounterPartyBreakdownCounterPartyType = "LOAN"
	SpendingCounterPartyBreakdownCounterPartyTypeMERCHANT SpendingCounterPartyBreakdownCounterPartyType = "MERCHANT"
	SpendingCounterPartyBreakdownCounterPartyTypePAYEE    SpendingCounterPartyBreakdownCounterPartyType = "PAYEE"
	SpendingCounterPartyBreakdownCounterPartyTypeSENDER   SpendingCounterPartyBreakdownCounterPartyType = "SENDER"
	SpendingCounterPartyBreakdownCounterPartyTypeSTARLING SpendingCounterPartyBreakdownCounterPartyType = "STARLING"
)

// Defines values for SpendingCounterPartyBreakdownCurrency.
const (
	SpendingCounterPartyBreakdownCurrencyAED       SpendingCounterPartyBreakdownCurrency = "AED"
	SpendingCounterPartyBreakdownCurrencyAFN       SpendingCounterPartyBreakdownCurrency = "AFN"
	SpendingCounterPartyBreakdownCurrencyALL       SpendingCounterPartyBreakdownCurrency = "ALL"
	SpendingCounterPartyBreakdownCurrencyAMD       SpendingCounterPartyBreakdownCurrency = "AMD"
	SpendingCounterPartyBreakdownCurrencyANG       SpendingCounterPartyBreakdownCurrency = "ANG"
	SpendingCounterPartyBreakdownCurrencyAOA       SpendingCounterPartyBreakdownCurrency = "AOA"
	SpendingCounterPartyBreakdownCurrencyARS       SpendingCounterPartyBreakdownCurrency = "ARS"
	SpendingCounterPartyBreakdownCurrencyAUD       SpendingCounterPartyBreakdownCurrency = "AUD"
	SpendingCounterPartyBreakdownCurrencyAWG       SpendingCounterPartyBreakdownCurrency = "AWG"
	SpendingCounterPartyBreakdownCurrencyAZN       SpendingCounterPartyBreakdownCurrency = "AZN"
	SpendingCounterPartyBreakdownCurrencyBAM       SpendingCounterPartyBreakdownCurrency = "BAM"
	SpendingCounterPartyBreakdownCurrencyBBD       SpendingCounterPartyBreakdownCurrency = "BBD"
	SpendingCounterPartyBreakdownCurrencyBDT       SpendingCounterPartyBreakdownCurrency = "BDT"
	SpendingCounterPartyBreakdownCurrencyBGN       SpendingCounterPartyBreakdownCurrency = "BGN"
	SpendingCounterPartyBreakdownCurrencyBHD       SpendingCounterPartyBreakdownCurrency = "BHD"
	SpendingCounterPartyBreakdownCurrencyBIF       SpendingCounterPartyBreakdownCurrency = "BIF"
	SpendingCounterPartyBreakdownCurrencyBMD       SpendingCounterPartyBreakdownCurrency = "BMD"
	SpendingCounterPartyBreakdownCurrencyBND       SpendingCounterPartyBreakdownCurrency = "BND"
	SpendingCounterPartyBreakdownCurrencyBOB       SpendingCounterPartyBreakdownCurrency = "BOB"
	SpendingCounterPartyBreakdownCurrencyBOV       SpendingCounterPartyBreakdownCurrency = "BOV"
	SpendingCounterPartyBreakdownCurrencyBRL       SpendingCounterPartyBreakdownCurrency = "BRL"
	SpendingCounterPartyBreakdownCurrencyBSD       SpendingCounterPartyBreakdownCurrency = "BSD"
	SpendingCounterPartyBreakdownCurrencyBTN       SpendingCounterPartyBreakdownCurrency = "BTN"
	SpendingCounterPartyBreakdownCurrencyBWP       SpendingCounterPartyBreakdownCurrency = "BWP"
	SpendingCounterPartyBreakdownCurrencyBYN       SpendingCounterPartyBreakdownCurrency = "BYN"
	SpendingCounterPartyBreakdownCurrencyBYR       SpendingCounterPartyBreakdownCurrency = "BYR"
	SpendingCounterPartyBreakdownCurrencyBZD       SpendingCounterPartyBreakdownCurrency = "BZD"
	SpendingCounterPartyBreakdownCurrencyCAD       SpendingCounterPartyBreakdownCurrency = "CAD"
	SpendingCounterPartyBreakdownCurrencyCDF       SpendingCounterPartyBreakdownCurrency = "CDF"
	SpendingCounterPartyBreakdownCurrencyCHE       SpendingCounterPartyBreakdownCurrency = "CHE"
	SpendingCounterPartyBreakdownCurrencyCHF       SpendingCounterPartyBreakdownCurrency = "CHF"
	SpendingCounterPartyBreakdownCurrencyCHW       SpendingCounterPartyBreakdownCurrency = "CHW"
	SpendingCounterPartyBreakdownCurrencyCLF       SpendingCounterPartyBreakdownCurrency = "CLF"
	SpendingCounterPartyBreakdownCurrencyCLP       SpendingCounterPartyBreakdownCurrency = "CLP"
	SpendingCounterPartyBreakdownCurrencyCNY       SpendingCounterPartyBreakdownCurrency = "CNY"
	SpendingCounterPartyBreakdownCurrencyCOP       SpendingCounterPartyBreakdownCurrency = "COP"
	SpendingCounterPartyBreakdownCurrencyCOU       SpendingCounterPartyBreakdownCurrency = "COU"
	SpendingCounterPartyBreakdownCurrencyCRC       SpendingCounterPartyBreakdownCurrency = "CRC"
	SpendingCounterPartyBreakdownCurrencyCUC       SpendingCounterPartyBreakdownCurrency = "CUC"
	SpendingCounterPartyBreakdownCurrencyCUP       SpendingCounterPartyBreakdownCurrency = "CUP"
	SpendingCounterPartyBreakdownCurrencyCVE       SpendingCounterPartyBreakdownCurrency = "CVE"
	SpendingCounterPartyBreakdownCurrencyCZK       SpendingCounterPartyBreakdownCurrency = "CZK"
	SpendingCounterPartyBreakdownCurrencyDJF       SpendingCounterPartyBreakdownCurrency = "DJF"
	SpendingCounterPartyBreakdownCurrencyDKK       SpendingCounterPartyBreakdownCurrency = "DKK"
	SpendingCounterPartyBreakdownCurrencyDOP       SpendingCounterPartyBreakdownCurrency = "DOP"
	SpendingCounterPartyBreakdownCurrencyDZD       SpendingCounterPartyBreakdownCurrency = "DZD"
	SpendingCounterPartyBreakdownCurrencyEGP       SpendingCounterPartyBreakdownCurrency = "EGP"
	SpendingCounterPartyBreakdownCurrencyERN       SpendingCounterPartyBreakdownCurrency = "ERN"
	SpendingCounterPartyBreakdownCurrencyETB       SpendingCounterPartyBreakdownCurrency = "ETB"
	SpendingCounterPartyBreakdownCurrencyEUR       SpendingCounterPartyBreakdownCurrency = "EUR"
	SpendingCounterPartyBreakdownCurrencyFJD       SpendingCounterPartyBreakdownCurrency = "FJD"
	SpendingCounterPartyBreakdownCurrencyFKP       SpendingCounterPartyBreakdownCurrency = "FKP"
	SpendingCounterPartyBreakdownCurrencyGBP       SpendingCounterPartyBreakdownCurrency = "GBP"
	SpendingCounterPartyBreakdownCurrencyGEL       SpendingCounterPartyBreakdownCurrency = "GEL"
	SpendingCounterPartyBreakdownCurrencyGHS       SpendingCounterPartyBreakdownCurrency = "GHS"
	SpendingCounterPartyBreakdownCurrencyGIP       SpendingCounterPartyBreakdownCurrency = "GIP"
	SpendingCounterPartyBreakdownCurrencyGMD       SpendingCounterPartyBreakdownCurrency = "GMD"
	SpendingCounterPartyBreakdownCurrencyGNF       SpendingCounterPartyBreakdownCurrency = "GNF"
	SpendingCounterPartyBreakdownCurrencyGTQ       SpendingCounterPartyBreakdownCurrency = "GTQ"
	SpendingCounterPartyBreakdownCurrencyGYD       SpendingCounterPartyBreakdownCurrency = "GYD"
	SpendingCounterPartyBreakdownCurrencyHKD       SpendingCounterPartyBreakdownCurrency = "HKD"
	SpendingCounterPartyBreakdownCurrencyHNL       SpendingCounterPartyBreakdownCurrency = "HNL"
	SpendingCounterPartyBreakdownCurrencyHRK       SpendingCounterPartyBreakdownCurrency = "HRK"
	SpendingCounterPartyBreakdownCurrencyHTG       SpendingCounterPartyBreakdownCurrency = "HTG"
	SpendingCounterPartyBreakdownCurrencyHUF       SpendingCounterPartyBreakdownCurrency = "HUF"
	SpendingCounterPartyBreakdownCurrencyIDR       SpendingCounterPartyBreakdownCurrency = "IDR"
	SpendingCounterPartyBreakdownCurrencyILS       SpendingCounterPartyBreakdownCurrency = "ILS"
	SpendingCounterPartyBreakdownCurrencyINR       SpendingCounterPartyBreakdownCurrency = "INR"
	SpendingCounterPartyBreakdownCurrencyIQD       SpendingCounterPartyBreakdownCurrency = "IQD"
	SpendingCounterPartyBreakdownCurrencyIRR       SpendingCounterPartyBreakdownCurrency = "IRR"
	SpendingCounterPartyBreakdownCurrencyISK       SpendingCounterPartyBreakdownCurrency = "ISK"
	SpendingCounterPartyBreakdownCurrencyJMD       SpendingCounterPartyBreakdownCurrency = "JMD"
	SpendingCounterPartyBreakdownCurrencyJOD       SpendingCounterPartyBreakdownCurrency = "JOD"
	SpendingCounterPartyBreakdownCurrencyJPY       SpendingCounterPartyBreakdownCurrency = "JPY"
	SpendingCounterPartyBreakdownCurrencyKES       SpendingCounterPartyBreakdownCurrency = "KES"
	SpendingCounterPartyBreakdownCurrencyKGS       SpendingCounterPartyBreakdownCurrency = "KGS"
	SpendingCounterPartyBreakdownCurrencyKHR       SpendingCounterPartyBreakdownCurrency = "KHR"
	SpendingCounterPartyBreakdownCurrencyKMF       SpendingCounterPartyBreakdownCurrency = "KMF"
	SpendingCounterPartyBreakdownCurrencyKPW       SpendingCounterPartyBreakdownCurrency = "KPW"
	SpendingCounterPartyBreakdownCurrencyKRW       SpendingCounterPartyBreakdownCurrency = "KRW"
	SpendingCounterPartyBreakdownCurrencyKWD       SpendingCounterPartyBreakdownCurrency = "KWD"
	SpendingCounterPartyBreakdownCurrencyKYD       SpendingCounterPartyBreakdownCurrency = "KYD"
	SpendingCounterPartyBreakdownCurrencyKZT       SpendingCounterPartyBreakdownCurrency = "KZT"
	SpendingCounterPartyBreakdownCurrencyLAK       SpendingCounterPartyBreakdownCurrency = "LAK"
	SpendingCounterPartyBreakdownCurrencyLBP       SpendingCounterPartyBreakdownCurrency = "LBP"
	SpendingCounterPartyBreakdownCurrencyLKR       SpendingCounterPartyBreakdownCurrency = "LKR"
	SpendingCounterPartyBreakdownCurrencyLRD       SpendingCounterPartyBreakdownCurrency = "LRD"
	SpendingCounterPartyBreakdownCurrencyLSL       SpendingCounterPartyBreakdownCurrency = "LSL"
	SpendingCounterPartyBreakdownCurrencyLTL       SpendingCounterPartyBreakdownCurrency = "LTL"
	SpendingCounterPartyBreakdownCurrencyLYD       SpendingCounterPartyBreakdownCurrency = "LYD"
	SpendingCounterPartyBreakdownCurrencyMAD       SpendingCounterPartyBreakdownCurrency = "MAD"
	SpendingCounterPartyBreakdownCurrencyMDL       SpendingCounterPartyBreakdownCurrency = "MDL"
	SpendingCounterPartyBreakdownCurrencyMGA       SpendingCounterPartyBreakdownCurrency = "MGA"
	SpendingCounterPartyBreakdownCurrencyMKD       SpendingCounterPartyBreakdownCurrency = "MKD"
	SpendingCounterPartyBreakdownCurrencyMMK       SpendingCounterPartyBreakdownCurrency = "MMK"
	SpendingCounterPartyBreakdownCurrencyMNT       SpendingCounterPartyBreakdownCurrency = "MNT"
	SpendingCounterPartyBreakdownCurrencyMOP       SpendingCounterPartyBreakdownCurrency = "MOP"
	SpendingCounterPartyBreakdownCurrencyMRO       SpendingCounterPartyBreakdownCurrency = "MRO"
	SpendingCounterPartyBreakdownCurrencyMRU       SpendingCounterPartyBreakdownCurrency = "MRU"
	SpendingCounterPartyBreakdownCurrencyMUR       SpendingCounterPartyBreakdownCurrency = "MUR"
	SpendingCounterPartyBreakdownCurrencyMVR       SpendingCounterPartyBreakdownCurrency = "MVR"
	SpendingCounterPartyBreakdownCurrencyMWK       SpendingCounterPartyBreakdownCurrency = "MWK"
	SpendingCounterPartyBreakdownCurrencyMXN       SpendingCounterPartyBreakdownCurrency = "MXN"
	SpendingCounterPartyBreakdownCurrencyMXV       SpendingCounterPartyBreakdownCurrency = "MXV"
	SpendingCounterPartyBreakdownCurrencyMYR       SpendingCounterPartyBreakdownCurrency = "MYR"
	SpendingCounterPartyBreakdownCurrencyMZN       SpendingCounterPartyBreakdownCurrency = "MZN"
	SpendingCounterPartyBreakdownCurrencyNAD       SpendingCounterPartyBreakdownCurrency = "NAD"
	SpendingCounterPartyBreakdownCurrencyNGN       SpendingCounterPartyBreakdownCurrency = "NGN"
	SpendingCounterPartyBreakdownCurrencyNIO       SpendingCounterPartyBreakdownCurrency = "NIO"
	SpendingCounterPartyBreakdownCurrencyNOK       SpendingCounterPartyBreakdownCurrency = "NOK"
	SpendingCounterPartyBreakdownCurrencyNPR       SpendingCounterPartyBreakdownCurrency = "NPR"
	SpendingCounterPartyBreakdownCurrencyNZD       SpendingCounterPartyBreakdownCurrency = "NZD"
	SpendingCounterPartyBreakdownCurrencyOMR       SpendingCounterPartyBreakdownCurrency = "OMR"
	SpendingCounterPartyBreakdownCurrencyPAB       SpendingCounterPartyBreakdownCurrency = "PAB"
	SpendingCounterPartyBreakdownCurrencyPEN       SpendingCounterPartyBreakdownCurrency = "PEN"
	SpendingCounterPartyBreakdownCurrencyPGK       SpendingCounterPartyBreakdownCurrency = "PGK"
	SpendingCounterPartyBreakdownCurrencyPHP       SpendingCounterPartyBreakdownCurrency = "PHP"
	SpendingCounterPartyBreakdownCurrencyPKR       SpendingCounterPartyBreakdownCurrency = "PKR"
	SpendingCounterPartyBreakdownCurrencyPLN       SpendingCounterPartyBreakdownCurrency = "PLN"
	SpendingCounterPartyBreakdownCurrencyPYG       SpendingCounterPartyBreakdownCurrency = "PYG"
	SpendingCounterPartyBreakdownCurrencyQAR       SpendingCounterPartyBreakdownCurrency = "QAR"
	SpendingCounterPartyBreakdownCurrencyRON       SpendingCounterPartyBreakdownCurrency = "RON"
	SpendingCounterPartyBreakdownCurrencyRSD       SpendingCounterPartyBreakdownCurrency = "RSD"
	SpendingCounterPartyBreakdownCurrencyRUB       SpendingCounterPartyBreakdownCurrency = "RUB"
	SpendingCounterPartyBreakdownCurrencyRUR       SpendingCounterPartyBreakdownCurrency = "RUR"
	SpendingCounterPartyBreakdownCurrencyRWF       SpendingCounterPartyBreakdownCurrency = "RWF"
	SpendingCounterPartyBreakdownCurrencySAR       SpendingCounterPartyBreakdownCurrency = "SAR"
	SpendingCounterPartyBreakdownCurrencySBD       SpendingCounterPartyBreakdownCurrency = "SBD"
	SpendingCounterPartyBreakdownCurrencySCR       SpendingCounterPartyBreakdownCurrency = "SCR"
	SpendingCounterPartyBreakdownCurrencySDG       SpendingCounterPartyBreakdownCurrency = "SDG"
	SpendingCounterPartyBreakdownCurrencySEK       SpendingCounterPartyBreakdownCurrency = "SEK"
	SpendingCounterPartyBreakdownCurrencySGD       SpendingCounterPartyBreakdownCurrency = "SGD"
	SpendingCounterPartyBreakdownCurrencySHP       SpendingCounterPartyBreakdownCurrency = "SHP"
	SpendingCounterPartyBreakdownCurrencySLE       SpendingCounterPartyBreakdownCurrency = "SLE"
	SpendingCounterPartyBreakdownCurrencySLL       SpendingCounterPartyBreakdownCurrency = "SLL"
	SpendingCounterPartyBreakdownCurrencySOS       SpendingCounterPartyBreakdownCurrency = "SOS"
	SpendingCounterPartyBreakdownCurrencySRD       SpendingCounterPartyBreakdownCurrency = "SRD"
	SpendingCounterPartyBreakdownCurrencySSP       SpendingCounterPartyBreakdownCurrency = "SSP"
	SpendingCounterPartyBreakdownCurrencySTD       SpendingCounterPartyBreakdownCurrency = "STD"
	SpendingCounterPartyBreakdownCurrencySTN       SpendingCounterPartyBreakdownCurrency = "STN"
	SpendingCounterPartyBreakdownCurrencySVC       SpendingCounterPartyBreakdownCurrency = "SVC"
	SpendingCounterPartyBreakdownCurrencySYP       SpendingCounterPartyBreakdownCurrency = "SYP"
	SpendingCounterPartyBreakdownCurrencySZL       SpendingCounterPartyBreakdownCurrency = "SZL"
	SpendingCounterPartyBreakdownCurrencyTHB       SpendingCounterPartyBreakdownCurrency = "THB"
	SpendingCounterPartyBreakdownCurrencyTJS       SpendingCounterPartyBreakdownCurrency = "TJS"
	SpendingCounterPartyBreakdownCurrencyTMT       SpendingCounterPartyBreakdownCurrency = "TMT"
	SpendingCounterPartyBreakdownCurrencyTND       SpendingCounterPartyBreakdownCurrency = "TND"
	SpendingCounterPartyBreakdownCurrencyTOP       SpendingCounterPartyBreakdownCurrency = "TOP"
	SpendingCounterPartyBreakdownCurrencyTRY       SpendingCounterPartyBreakdownCurrency = "TRY"
	SpendingCounterPartyBreakdownCurrencyTTD       SpendingCounterPartyBreakdownCurrency = "TTD"
	SpendingCounterPartyBreakdownCurrencyTWD       SpendingCounterPartyBreakdownCurrency = "TWD"
	SpendingCounterPartyBreakdownCurrencyTZS       SpendingCounterPartyBreakdownCurrency = "TZS"
	SpendingCounterPartyBreakdownCurrencyUAH       SpendingCounterPartyBreakdownCurrency = "UAH"
	SpendingCounterPartyBreakdownCurrencyUGX       SpendingCounterPartyBreakdownCurrency = "UGX"
	SpendingCounterPartyBreakdownCurrencyUNDEFINED SpendingCounterPartyBreakdownCurrency = "UNDEFINED"
	SpendingCounterPartyBreakdownCurrencyUSD       SpendingCounterPartyBreakdownCurrency = "USD"
	SpendingCounterPartyBreakdownCurrencyUSN       SpendingCounterPartyBreakdownCurrency = "USN"
	SpendingCounterPartyBreakdownCurrencyUSS       SpendingCounterPartyBreakdownCurrency = "USS"
	SpendingCounterPartyBreakdownCurrencyUYI       SpendingCounterPartyBreakdownCurrency = "UYI"
	SpendingCounterPartyBreakdownCurrencyUYU       SpendingCounterPartyBreakdownCurrency = "UYU"
	SpendingCounterPartyBreakdownCurrencyUZS       SpendingCounterPartyBreakdownCurrency = "UZS"
	SpendingCounterPartyBreakdownCurrencyVEF       SpendingCounterPartyBreakdownCurrency = "VEF"
	SpendingCounterPartyBreakdownCurrencyVES       SpendingCounterPartyBreakdownCurrency = "VES"
	SpendingCounterPartyBreakdownCurrencyVND       SpendingCounterPartyBreakdownCurrency = "VND"
	SpendingCounterPartyBreakdownCurrencyVUV       SpendingCounterPartyBreakdownCurrency = "VUV"
	SpendingCounterPartyBreakdownCurrencyWST       SpendingCounterPartyBreakdownCurrency = "WST"
	SpendingCounterPartyBreakdownCurrencyXAF       SpendingCounterPartyBreakdownCurrency = "XAF"
	SpendingCounterPartyBreakdownCurrencyXAG       SpendingCounterPartyBreakdownCurrency = "XAG"
	SpendingCounterPartyBreakdownCurrencyXAU       SpendingCounterPartyBreakdownCurrency = "XAU"
	SpendingCounterPartyBreakdownCurrencyXBA       SpendingCounterPartyBreakdownCurrency = "XBA"
	SpendingCounterPartyBreakdownCurrencyXBB       SpendingCounterPartyBreakdownCurrency = "XBB"
	SpendingCounterPartyBreakdownCurrencyXBC       SpendingCounterPartyBreakdownCurrency = "XBC"
	SpendingCounterPartyBreakdownCurrencyXBD       SpendingCounterPartyBreakdownCurrency = "XBD"
	SpendingCounterPartyBreakdownCurrencyXCD       SpendingCounterPartyBreakdownCurrency = "XCD"
	SpendingCounterPartyBreakdownCurrencyXDR       SpendingCounterPartyBreakdownCurrency = "XDR"
	SpendingCounterPartyBreakdownCurrencyXOF       SpendingCounterPartyBreakdownCurrency = "XOF"
	SpendingCounterPartyBreakdownCurrencyXPD       SpendingCounterPartyBreakdownCurrency = "XPD"
	SpendingCounterPartyBreakdownCurrencyXPF       SpendingCounterPartyBreakdownCurrency = "XPF"
	SpendingCounterPartyBreakdownCurrencyXPT       SpendingCounterPartyBreakdownCurrency = "XPT"
	SpendingCounterPartyBreakdownCurrencyXSU       SpendingCounterPartyBreakdownCurrency = "XSU"
	SpendingCounterPartyBreakdownCurrencyXTS       SpendingCounterPartyBreakdownCurrency = "XTS"
	SpendingCounterPartyBreakdownCurrencyXUA       SpendingCounterPartyBreakdownCurrency = "XUA"
	SpendingCounterPartyBreakdownCurrencyXXX       SpendingCounterPartyBreakdownCurrency = "XXX"
	SpendingCounterPartyBreakdownCurrencyYER       SpendingCounterPartyBreakdownCurrency = "YER"
	SpendingCounterPartyBreakdownCurrencyZAR       SpendingCounterPartyBreakdownCurrency = "ZAR"
	SpendingCounterPartyBreakdownCurrencyZMW       SpendingCounterPartyBreakdownCurrency = "ZMW"
	SpendingCounterPartyBreakdownCurrencyZWL       SpendingCounterPartyBreakdownCurrency = "ZWL"
)

// Defines values for SpendingCounterPartyBreakdownNetDirection.
const (
	SpendingCounterPartyBreakdownNetDirectionIN  SpendingCounterPartyBreakdownNetDirection = "IN"
	SpendingCounterPartyBreakdownNetDirectionOUT SpendingCounterPartyBreakdownNetDirection = "OUT"
)

// Defines values for SpendingCounterPartySummaryCurrency.
const (
	AED       SpendingCounterPartySummaryCurrency = "AED"
	AFN       SpendingCounterPartySummaryCurrency = "AFN"
	ALL       SpendingCounterPartySummaryCurrency = "ALL"
	AMD       SpendingCounterPartySummaryCurrency = "AMD"
	ANG       SpendingCounterPartySummaryCurrency = "ANG"
	AOA       SpendingCounterPartySummaryCurrency = "AOA"
	ARS       SpendingCounterPartySummaryCurrency = "ARS"
	AUD       SpendingCounterPartySummaryCurrency = "AUD"
	AWG       SpendingCounterPartySummaryCurrency = "AWG"
	AZN       SpendingCounterPartySummaryCurrency = "AZN"
	BAM       SpendingCounterPartySummaryCurrency = "BAM"
	BBD       SpendingCounterPartySummaryCurrency = "BBD"
	BDT       SpendingCounterPartySummaryCurrency = "BDT"
	BGN       SpendingCounterPartySummaryCurrency = "BGN"
	BHD       SpendingCounterPartySummaryCurrency = "BHD"
	BIF       SpendingCounterPartySummaryCurrency = "BIF"
	BMD       SpendingCounterPartySummaryCurrency = "BMD"
	BND       SpendingCounterPartySummaryCurrency = "BND"
	BOB       SpendingCounterPartySummaryCurrency = "BOB"
	BOV       SpendingCounterPartySummaryCurrency = "BOV"
	BRL       SpendingCounterPartySummaryCurrency = "BRL"
	BSD       SpendingCounterPartySummaryCurrency = "BSD"
	BTN       SpendingCounterPartySummaryCurrency = "BTN"
	BWP       SpendingCounterPartySummaryCurrency = "BWP"
	BYN       SpendingCounterPartySummaryCurrency = "BYN"
	BYR       SpendingCounterPartySummaryCurrency = "BYR"
	BZD       SpendingCounterPartySummaryCurrency = "BZD"
	CAD       SpendingCounterPartySummaryCurrency = "CAD"
	CDF       SpendingCounterPartySummaryCurrency = "CDF"
	CHE       SpendingCounterPartySummaryCurrency = "CHE"
	CHF       SpendingCounterPartySummaryCurrency = "CHF"
	CHW       SpendingCounterPartySummaryCurrency = "CHW"
	CLF       SpendingCounterPartySummaryCurrency = "CLF"
	CLP       SpendingCounterPartySummaryCurrency = "CLP"
	CNY       SpendingCounterPartySummaryCurrency = "CNY"
	COP       SpendingCounterPartySummaryCurrency = "COP"
	COU       SpendingCounterPartySummaryCurrency = "COU"
	CRC       SpendingCounterPartySummaryCurrency = "CRC"
	CUC       SpendingCounterPartySummaryCurrency = "CUC"
	CUP       SpendingCounterPartySummaryCurrency = "CUP"
	CVE       SpendingCounterPartySummaryCurrency = "CVE"
	CZK       SpendingCounterPartySummaryCurrency = "CZK"
	DJF       SpendingCounterPartySummaryCurrency = "DJF"
	DKK       SpendingCounterPartySummaryCurrency = "DKK"
	DOP       SpendingCounterPartySummaryCurrency = "DOP"
	DZD       SpendingCounterPartySummaryCurrency = "DZD"
	EGP       SpendingCounterPartySummaryCurrency = "EGP"
	ERN       SpendingCounterPartySummaryCurrency = "ERN"
	ETB       SpendingCounterPartySummaryCurrency = "ETB"
	EUR       SpendingCounterPartySummaryCurrency = "EUR"
	FJD       SpendingCounterPartySummaryCurrency = "FJD"
	FKP       SpendingCounterPartySummaryCurrency = "FKP"
	GBP       SpendingCounterPartySummaryCurrency = "GBP"
	GEL       SpendingCounterPartySummaryCurrency = "GEL"
	GHS       SpendingCounterPartySummaryCurrency = "GHS"
	GIP       SpendingCounterPartySummaryCurrency = "GIP"
	GMD       SpendingCounterPartySummaryCurrency = "GMD"
	GNF       SpendingCounterPartySummaryCurrency = "GNF"
	GTQ       SpendingCounterPartySummaryCurrency = "GTQ"
	GYD       SpendingCounterPartySummaryCurrency = "GYD"
	HKD       SpendingCounterPartySummaryCurrency = "HKD"
	HNL       SpendingCounterPartySummaryCurrency = "HNL"
	HRK       SpendingCounterPartySummaryCurrency = "HRK"
	HTG       SpendingCounterPartySummaryCurrency = "HTG"
	HUF       SpendingCounterPartySummaryCurrency = "HUF"
	IDR       SpendingCounterPartySummaryCurrency = "IDR"
	ILS       SpendingCounterPartySummaryCurrency = "ILS"
	INR       SpendingCounterPartySummaryCurrency = "INR"
	IQD       SpendingCounterPartySummaryCurrency = "IQD"
	IRR       SpendingCounterPartySummaryCurrency = "IRR"
	ISK       SpendingCounterPartySummaryCurrency = "ISK"
	JMD       SpendingCounterPartySummaryCurrency = "JMD"
	JOD       SpendingCounterPartySummaryCurrency = "JOD"
	JPY       SpendingCounterPartySummaryCurrency = "JPY"
	KES       SpendingCounterPartySummaryCurrency = "KES"
	KGS       SpendingCounterPartySummaryCurrency = "KGS"
	KHR       SpendingCounterPartySummaryCurrency = "KHR"
	KMF       SpendingCounterPartySummaryCurrency = "KMF"
	KPW       SpendingCounterPartySummaryCurrency = "KPW"
	KRW       SpendingCounterPartySummaryCurrency = "KRW"
	KWD       SpendingCounterPartySummaryCurrency = "KWD"
	KYD       SpendingCounterPartySummaryCurrency = "KYD"
	KZT       SpendingCounterPartySummaryCurrency = "KZT"
	LAK       SpendingCounterPartySummaryCurrency = "LAK"
	LBP       SpendingCounterPartySummaryCurrency = "LBP"
	LKR       SpendingCounterPartySummaryCurrency = "LKR"
	LRD       SpendingCounterPartySummaryCurrency = "LRD"
	LSL       SpendingCounterPartySummaryCurrency = "LSL"
	LTL       SpendingCounterPartySummaryCurrency = "LTL"
	LYD       SpendingCounterPartySummaryCurrency = "LYD"
	MAD       SpendingCounterPartySummaryCurrency = "MAD"
	MDL       SpendingCounterPartySummaryCurrency = "MDL"
	MGA       SpendingCounterPartySummaryCurrency = "MGA"
	MKD       SpendingCounterPartySummaryCurrency = "MKD"
	MMK       SpendingCounterPartySummaryCurrency = "MMK"
	MNT       SpendingCounterPartySummaryCurrency = "MNT"
	MOP       SpendingCounterPartySummaryCurrency = "MOP"
	MRO       SpendingCounterPartySummaryCurrency = "MRO"
	MRU       SpendingCounterPartySummaryCurrency = "MRU"
	MUR       SpendingCounterPartySummaryCurrency = "MUR"
	MVR       SpendingCounterPartySummaryCurrency = "MVR"
	MWK       SpendingCounterPartySummaryCurrency = "MWK"
	MXN       SpendingCounterPartySummaryCurrency = "MXN"
	MXV       SpendingCounterPartySummaryCurrency = "MXV"
	MYR       SpendingCounterPartySummaryCurrency = "MYR"
	MZN       SpendingCounterPartySummaryCurrency = "MZN"
	NAD       SpendingCounterPartySummaryCurrency = "NAD"
	NGN       SpendingCounterPartySummaryCurrency = "NGN"
	NIO       SpendingCounterPartySummaryCurrency = "NIO"
	NOK       SpendingCounterPartySummaryCurrency = "NOK"
	NPR       SpendingCounterPartySummaryCurrency = "NPR"
	NZD       SpendingCounterPartySummaryCurrency = "NZD"
	OMR       SpendingCounterPartySummaryCurrency = "OMR"
	PAB       SpendingCounterPartySummaryCurrency = "PAB"
	PEN       SpendingCounterPartySummaryCurrency = "PEN"
	PGK       SpendingCounterPartySummaryCurrency = "PGK"
	PHP       SpendingCounterPartySummaryCurrency = "PHP"
	PKR       SpendingCounterPartySummaryCurrency = "PKR"
	PLN       SpendingCounterPartySummaryCurrency = "PLN"
	PYG       SpendingCounterPartySummaryCurrency = "PYG"
	QAR       SpendingCounterPartySummaryCurrency = "QAR"
	RON       SpendingCounterPartySummaryCurrency = "RON"
	RSD       SpendingCounterPartySummaryCurrency = "RSD"
	RUB       SpendingCounterPartySummaryCurrency = "RUB"
	RUR       SpendingCounterPartySummaryCurrency = "RUR"
	RWF       SpendingCounterPartySummaryCurrency = "RWF"
	SAR       SpendingCounterPartySummaryCurrency = "SAR"
	SBD       SpendingCounterPartySummaryCurrency = "SBD"
	SCR       SpendingCounterPartySummaryCurrency = "SCR"
	SDG       SpendingCounterPartySummaryCurrency = "SDG"
	SEK       SpendingCounterPartySummaryCurrency = "SEK"
	SGD       SpendingCounterPartySummaryCurrency = "SGD"
	SHP       SpendingCounterPartySummaryCurrency = "SHP"
	SLE       SpendingCounterPartySummaryCurrency = "SLE"
	SLL       SpendingCounterPartySummaryCurrency = "SLL"
	SOS       SpendingCounterPartySummaryCurrency = "SOS"
	SRD       SpendingCounterPartySummaryCurrency = "SRD"
	SSP       SpendingCounterPartySummaryCurrency = "SSP"
	STD       SpendingCounterPartySummaryCurrency = "STD"
	STN       SpendingCounterPartySummaryCurrency = "STN"
	SVC       SpendingCounterPartySummaryCurrency = "SVC"
	SYP       SpendingCounterPartySummaryCurrency = "SYP"
	SZL       SpendingCounterPartySummaryCurrency = "SZL"
	THB       SpendingCounterPartySummaryCurrency = "THB"
	TJS       SpendingCounterPartySummaryCurrency = "TJS"
	TMT       SpendingCounterPartySummaryCurrency = "TMT"
	TND       SpendingCounterPartySummaryCurrency = "TND"
	TOP       SpendingCounterPartySummaryCurrency = "TOP"
	TRY       SpendingCounterPartySummaryCurrency = "TRY"
	TTD       SpendingCounterPartySummaryCurrency = "TTD"
	TWD       SpendingCounterPartySummaryCurrency = "TWD"
	TZS       SpendingCounterPartySummaryCurrency = "TZS"
	UAH       SpendingCounterPartySummaryCurrency = "UAH"
	UGX       SpendingCounterPartySummaryCurrency = "UGX"
	UNDEFINED SpendingCounterPartySummaryCurrency = "UNDEFINED"
	USD       SpendingCounterPartySummaryCurrency = "USD"
	USN       SpendingCounterPartySummaryCurrency = "USN"
	USS       SpendingCounterPartySummaryCurrency = "USS"
	UYI       SpendingCounterPartySummaryCurrency = "UYI"
	UYU       SpendingCounterPartySummaryCurrency = "UYU"
	UZS       SpendingCounterPartySummaryCurrency = "UZS"
	VEF       SpendingCounterPartySummaryCurrency = "VEF"
	VES       SpendingCounterPartySummaryCurrency = "VES"
	VND       SpendingCounterPartySummaryCurrency = "VND"
	VUV       SpendingCounterPartySummaryCurrency = "VUV"
	WST       SpendingCounterPartySummaryCurrency = "WST"
	XAF       SpendingCounterPartySummaryCurrency = "XAF"
	XAG       SpendingCounterPartySummaryCurrency = "XAG"
	XAU       SpendingCounterPartySummaryCurrency = "XAU"
	XBA       SpendingCounterPartySummaryCurrency = "XBA"
	XBB       SpendingCounterPartySummaryCurrency = "XBB"
	XBC       SpendingCounterPartySummaryCurrency = "XBC"
	XBD       SpendingCounterPartySummaryCurrency = "XBD"
	XCD       SpendingCounterPartySummaryCurrency = "XCD"
	XDR       SpendingCounterPartySummaryCurrency = "XDR"
	XOF       SpendingCounterPartySummaryCurrency = "XOF"
	XPD       SpendingCounterPartySummaryCurrency = "XPD"
	XPF       SpendingCounterPartySummaryCurrency = "XPF"
	XPT       SpendingCounterPartySummaryCurrency = "XPT"
	XSU       SpendingCounterPartySummaryCurrency = "XSU"
	XTS       SpendingCounterPartySummaryCurrency = "XTS"
	XUA       SpendingCounterPartySummaryCurrency = "XUA"
	XXX       SpendingCounterPartySummaryCurrency = "XXX"
	YER       SpendingCounterPartySummaryCurrency = "YER"
	ZAR       SpendingCounterPartySummaryCurrency = "ZAR"
	ZMW       SpendingCounterPartySummaryCurrency = "ZMW"
	ZWL       SpendingCounterPartySummaryCurrency = "ZWL"
)

// Defines values for SpendingCounterPartySummaryDirection.
const (
	SpendingCounterPartySummaryDirectionIN  SpendingCounterPartySummaryDirection = "IN"
	SpendingCounterPartySummaryDirectionOUT SpendingCounterPartySummaryDirection = "OUT"
)

// Defines values for SpendingSpaceSpendingSpaceType.
const (
	SpendingSpaceSpendingSpaceTypeCHILDCARE   SpendingSpaceSpendingSpaceType = "CHILDCARE"
	SpendingSpaceSpendingSpaceTypeCHILDCAREV2 SpendingSpaceSpendingSpaceType = "CHILDCARE_V2"
	SpendingSpaceSpendingSpaceTypeEXPENSE     SpendingSpaceSpendingSpaceType = "EXPENSE"
	SpendingSpaceSpendingSpaceTypeHELPINGOUT  SpendingSpaceSpendingSpaceType = "HELPING_OUT"
	SpendingSpaceSpendingSpaceTypeSHOPPING    SpendingSpaceSpendingSpaceType = "SHOPPING"
	SpendingSpaceSpendingSpaceTypeSHOPPINGV2  SpendingSpaceSpendingSpaceType = "SHOPPING_V2"
	SpendingSpaceSpendingSpaceTypeSPARE       SpendingSpaceSpendingSpaceType = "SPARE"
	SpendingSpaceSpendingSpaceTypeSPARECARD   SpendingSpaceSpendingSpaceType = "SPARE_CARD"
	SpendingSpaceSpendingSpaceTypeYOUNGPERSON SpendingSpaceSpendingSpaceType = "YOUNG_PERSON"
)

// Defines values for SpendingSpaceState.
const (
	ACTIVE    SpendingSpaceState = "ACTIVE"
	ARCHIVED  SpendingSpaceState = "ARCHIVED"
	ARCHIVING SpendingSpaceState = "ARCHIVING"
	CREATING  SpendingSpaceState = "CREATING"
	PENDING   SpendingSpaceState = "PENDING"
	RESTORING SpendingSpaceState = "RESTORING"
)

// Defines values for StandingOrderSpendingCategory.
const (
	StandingOrderSpendingCategoryADMIN                 StandingOrderSpendingCategory = "ADMIN"
	StandingOrderSpendingCategoryBANKCHARGES           StandingOrderSpendingCategory = "BANK_CHARGES"
	StandingOrderSpendingCategoryBIKE                  StandingOrderSpendingCategory = "BIKE"
	StandingOrderSpendingCategoryBILLSANDSERVICES      StandingOrderSpendingCategory = "BILLS_AND_SERVICES"
	StandingOrderSpendingCategoryBUCKETLIST            StandingOrderSpendingCategory = "BUCKET_LIST"
	StandingOrderSpendingCategoryBUSINESSENTERTAINMENT StandingOrderSpendingCategory = "BUSINESS_ENTERTAINMENT"
	StandingOrderSpendingCategoryCAR                   StandingOrderSpendingCategory = "CAR"
	StandingOrderSpendingCategoryCASH                  StandingOrderSpendingCategory = "CASH"
	StandingOrderSpendingCategoryCELEBRATION           StandingOrderSpendingCategory = "CELEBRATION"
	StandingOrderSpendingCategoryCHARITY               StandingOrderSpendingCategory = "CHARITY"
	StandingOrderSpendingCategoryCHILDREN              StandingOrderSpendingCategory = "CHILDREN"
	StandingOrderSpendingCategoryCLIENTREFUNDS         StandingOrderSpendingCategory = "CLIENT_REFUNDS"
	StandingOrderSpendingCategoryCLOTHES               StandingOrderSpendingCategory = "CLOTHES"
	StandingOrderSpendingCategoryCOFFEE                StandingOrderSpendingCategory = "COFFEE"
	StandingOrderSpendingCategoryCORPORATIONTAX        StandingOrderSpendingCategory = "CORPORATION_TAX"
	StandingOrderSpendingCategoryDEBTREPAYMENT         StandingOrderSpendingCategory = "DEBT_REPAYMENT"
	StandingOrderSpendingCategoryDIRECTORSWAGES        StandingOrderSpendingCategory = "DIRECTORS_WAGES"
	StandingOrderSpendingCategoryDIVIDENDS             StandingOrderSpendingCategory = "DIVIDENDS"
	StandingOrderSpendingCategoryDIY                   StandingOrderSpendingCategory = "DIY"
	StandingOrderSpendingCategoryDRINKS                StandingOrderSpendingCategory = "DRINKS"
	StandingOrderSpendingCategoryEATINGOUT             StandingOrderSpendingCategory = "EATING_OUT"
	StandingOrderSpendingCategoryEDUCATION             StandingOrderSpendingCategory = "EDUCATION"
	StandingOrderSpendingCategoryEMERGENCY             StandingOrderSpendingCategory = "EMERGENCY"
	StandingOrderSpendingCategoryENTERTAINMENT         StandingOrderSpendingCategory = "ENTERTAINMENT"
	StandingOrderSpendingCategoryEQUIPMENT             StandingOrderSpendingCategory = "EQUIPMENT"
	StandingOrderSpendingCategoryESSENTIALSPEND        StandingOrderSpendingCategory = "ESSENTIAL_SPEND"
	StandingOrderSpendingCategoryEXPENSES              StandingOrderSpendingCategory = "EXPENSES"
	StandingOrderSpendingCategoryFAMILY                StandingOrderSpendingCategory = "FAMILY"
	StandingOrderSpendingCategoryFITNESS               StandingOrderSpendingCategory = "FITNESS"
	StandingOrderSpendingCategoryFOODANDDRINK          StandingOrderSpendingCategory = "FOOD_AND_DRINK"
	StandingOrderSpendingCategoryFUEL                  StandingOrderSpendingCategory = "FUEL"
	StandingOrderSpendingCategoryGAMBLING              StandingOrderSpendingCategory = "GAMBLING"
	StandingOrderSpendingCategoryGAMING                StandingOrderSpendingCategory = "GAMING"
	StandingOrderSpendingCategoryGARDEN                StandingOrderSpendingCategory = "GARDEN"
	StandingOrderSpendingCategoryGENERAL               StandingOrderSpendingCategory = "GENERAL"
	StandingOrderSpendingCategoryGIFTS                 StandingOrderSpendingCategory = "GIFTS"
	StandingOrderSpendingCategoryGROCERIES             StandingOrderSpendingCategory = "GROCERIES"
	StandingOrderSpendingCategoryHOBBY                 StandingOrderSpendingCategory = "HOBBY"
	StandingOrderSpendingCategoryHOLIDAYS              StandingOrderSpendingCategory = "HOLIDAYS"
	StandingOrderSpendingCategoryHOME                  StandingOrderSpendingCategory = "HOME"
	StandingOrderSpendingCategoryIMPULSEBUY            StandingOrderSpendingCategory = "IMPULSE_BUY"
	StandingOrderSpendingCategoryINCOME                StandingOrderSpendingCategory = "INCOME"
	StandingOrderSpendingCategoryINSURANCE             StandingOrderSpendingCategory = "INSURANCE"
	StandingOrderSpendingCategoryINTERESTPAYMENTS      StandingOrderSpendingCategory = "INTEREST_PAYMENTS"
	StandingOrderSpendingCategoryINVENTORY             StandingOrderSpendingCategory = "INVENTORY"
	StandingOrderSpendingCategoryINVESTMENTCAPITAL     StandingOrderSpendingCategory = "INVESTMENT_CAPITAL"
	StandingOrderSpendingCategoryINVESTMENTS           StandingOrderSpendingCategory = "INVESTMENTS"
	StandingOrderSpendingCategoryLIFESTYLE             StandingOrderSpendingCategory = "LIFESTYLE"
	StandingOrderSpendingCategoryLOANPRINCIPAL         StandingOrderSpendingCategory = "LOAN_PRINCIPAL"
	StandingOrderSpendingCategoryMAINTENANCEANDREPAIRS StandingOrderSpendingCategory = "MAINTENANCE_AND_REPAIRS"
	StandingOrderSpendingCategoryMARKETING             StandingOrderSpendingCategory = "MARKETING"
	StandingOrderSpendingCategoryMEDICAL               StandingOrderSpendingCategory = "MEDICAL"
	StandingOrderSpendingCategoryMORTGAGE              StandingOrderSpendingCategory = "MORTGAGE"
	StandingOrderSpendingCategoryNONE                  StandingOrderSpendingCategory = "NONE"
	StandingOrderSpendingCategoryNONESSENTIALSPEND     StandingOrderSpendingCategory = "NON_ESSENTIAL_SPEND"
	StandingOrderSpendingCategoryOTHER                 StandingOrderSpendingCategory = "OTHER"
	StandingOrderSpendingCategoryOTHERINCOME           StandingOrderSpendingCategory = "OTHER_INCOME"
	StandingOrderSpendingCategoryPAYMENTS              StandingOrderSpendingCategory = "PAYMENTS"
	StandingOrderSpendingCategoryPERSONAL              StandingOrderSpendingCategory = "PERSONAL"
	StandingOrderSpendingCategoryPERSONALCARE          StandingOrderSpendingCategory = "PERSONAL_CARE"
	StandingOrderSpendingCategoryPERSONALTRANSFERS     StandingOrderSpendingCategory = "PERSONAL_TRANSFERS"
	StandingOrderSpendingCategoryPETS                  StandingOrderSpendingCategory = "PETS"
	StandingOrderSpendingCategoryPHONEANDINTERNET      StandingOrderSpendingCategory = "PHONE_AND_INTERNET"
	StandingOrderSpendingCategoryPROFESSIONALSERVICES  StandingOrderSpendingCategory = "PROFESSIONAL_SERVICES"
	StandingOrderSpendingCategoryPROJECTS              StandingOrderSpendingCategory = "PROJECTS"
	StandingOrderSpendingCategoryRELATIONSHIPS         StandingOrderSpendingCategory = "RELATIONSHIPS"
	StandingOrderSpendingCategoryRENT                  StandingOrderSpendingCategory = "RENT"
	StandingOrderSpendingCategoryREPAIRSANDMAINTENANCE StandingOrderSpendingCategory = "REPAIRS_AND_MAINTENANCE"
	StandingOrderSpendingCategoryREVENUE               StandingOrderSpendingCategory = "REVENUE"
	StandingOrderSpendingCategorySAVING                StandingOrderSpendingCategory = "SAVING"
	StandingOrderSpendingCategorySELFASSESSMENTTAX     StandingOrderSpendingCategory = "SELF_ASSESSMENT_TAX"
	StandingOrderSpendingCategorySHOPPING              StandingOrderSpendingCategory = "SHOPPING"
	StandingOrderSpendingCategorySTAFF                 StandingOrderSpendingCategory = "STAFF"
	StandingOrderSpendingCategorySUBSCRIPTIONS         StandingOrderSpendingCategory = "SUBSCRIPTIONS"
	StandingOrderSpendingCategoryTAKEAWAY              StandingOrderSpendingCategory = "TAKEAWAY"
	StandingOrderSpendingCategoryTAXI                  StandingOrderSpendingCategory = "TAXI"
	StandingOrderSpendingCategoryTRANSFERS             StandingOrderSpendingCategory = "TRANSFERS"
	StandingOrderSpendingCategoryTRANSPORT             StandingOrderSpendingCategory = "TRANSPORT"
	StandingOrderSpendingCategoryTRAVEL                StandingOrderSpendingCategory = "TRAVEL"
	StandingOrderSpendingCategoryTREATS                StandingOrderSpendingCategory = "TREATS"
	StandingOrderSpendingCategoryVAT                   StandingOrderSpendingCategory = "VAT"
	StandingOrderSpendingCategoryVEHICLES              StandingOrderSpendingCategory = "VEHICLES"
	StandingOrderSpendingCategoryWEDDING               StandingOrderSpendingCategory = "WEDDING"
	StandingOrderSpendingCategoryWELLBEING             StandingOrderSpendingCategory = "WELLBEING"
	StandingOrderSpendingCategoryWORKPLACE             StandingOrderSpendingCategory = "WORKPLACE"
)

// Defines values for StandingOrderRecurrenceFrequency.
const (
	DAILY   StandingOrderRecurrenceFrequency = "DAILY"
	MONTHLY StandingOrderRecurrenceFrequency = "MONTHLY"
	WEEKLY  StandingOrderRecurrenceFrequency = "WEEKLY"
	YEARLY  StandingOrderRecurrenceFrequency = "YEARLY"
)

// Defines values for UpdateSpendingCategorySpendingCategory.
const (
	UpdateSpendingCategorySpendingCategoryADMIN                 UpdateSpendingCategorySpendingCategory = "ADMIN"
	UpdateSpendingCategorySpendingCategoryBANKCHARGES           UpdateSpendingCategorySpendingCategory = "BANK_CHARGES"
	UpdateSpendingCategorySpendingCategoryBIKE                  UpdateSpendingCategorySpendingCategory = "BIKE"
	UpdateSpendingCategorySpendingCategoryBILLSANDSERVICES      UpdateSpendingCategorySpendingCategory = "BILLS_AND_SERVICES"
	UpdateSpendingCategorySpendingCategoryBUCKETLIST            UpdateSpendingCategorySpendingCategory = "BUCKET_LIST"
	UpdateSpendingCategorySpendingCategoryBUSINESSENTERTAINMENT UpdateSpendingCategorySpendingCategory = "BUSINESS_ENTERTAINMENT"
	UpdateSpendingCategorySpendingCategoryCAR                   UpdateSpendingCategorySpendingCategory = "CAR"
	UpdateSpendingCategorySpendingCategoryCASH                  UpdateSpendingCategorySpendingCategory = "CASH"
	UpdateSpendingCategorySpendingCategoryCELEBRATION           UpdateSpendingCategorySpendingCategory = "CELEBRATION"
	UpdateSpendingCategorySpendingCategoryCHARITY               UpdateSpendingCategorySpendingCategory = "CHARITY"
	UpdateSpendingCategorySpendingCategoryCHILDREN              UpdateSpendingCategorySpendingCategory = "CHILDREN"
	UpdateSpendingCategorySpendingCategoryCLIENTREFUNDS         UpdateSpendingCategorySpendingCategory = "CLIENT_REFUNDS"
	UpdateSpendingCategorySpendingCategoryCLOTHES               UpdateSpendingCategorySpendingCategory = "CLOTHES"
	UpdateSpendingCategorySpendingCategoryCOFFEE                UpdateSpendingCategorySpendingCategory = "COFFEE"
	UpdateSpendingCategorySpendingCategoryCORPORATIONTAX        UpdateSpendingCategorySpendingCategory = "CORPORATION_TAX"
	UpdateSpendingCategorySpendingCategoryDEBTREPAYMENT         UpdateSpendingCategorySpendingCategory = "DEBT_REPAYMENT"
	UpdateSpendingCategorySpendingCategoryDIRECTORSWAGES        UpdateSpendingCategorySpendingCategory = "DIRECTORS_WAGES"
	UpdateSpendingCategorySpendingCategoryDIVIDENDS             UpdateSpendingCategorySpendingCategory = "DIVIDENDS"
	UpdateSpendingCategorySpendingCategoryDIY                   UpdateSpendingCategorySpendingCategory = "DIY"
	UpdateSpendingCategorySpendingCategoryDRINKS                UpdateSpendingCategorySpendingCategory = "DRINKS"
	UpdateSpendingCategorySpendingCategoryEATINGOUT             UpdateSpendingCategorySpendingCategory = "EATING_OUT"
	UpdateSpendingCategorySpendingCategoryEDUCATION             UpdateSpendingCategorySpendingCategory = "EDUCATION"
	UpdateSpendingCategorySpendingCategoryEMERGENCY             UpdateSpendingCategorySpendingCategory = "EMERGENCY"
	UpdateSpendingCategorySpendingCategoryENTERTAINMENT         UpdateSpendingCategorySpendingCategory = "ENTERTAINMENT"
	UpdateSpendingCategorySpendingCategoryEQUIPMENT             UpdateSpendingCategorySpendingCategory = "EQUIPMENT"
	UpdateSpendingCategorySpendingCategoryESSENTIALSPEND        UpdateSpendingCategorySpendingCategory = "ESSENTIAL_SPEND"
	UpdateSpendingCategorySpendingCategoryEXPENSES              UpdateSpendingCategorySpendingCategory = "EXPENSES"
	UpdateSpendingCategorySpendingCategoryFAMILY                UpdateSpendingCategorySpendingCategory = "FAMILY"
	UpdateSpendingCategorySpendingCategoryFITNESS               UpdateSpendingCategorySpendingCategory = "FITNESS"
	UpdateSpendingCategorySpendingCategoryFOODANDDRINK          UpdateSpendingCategorySpendingCategory = "FOOD_AND_DRINK"
	UpdateSpendingCategorySpendingCategoryFUEL                  UpdateSpendingCategorySpendingCategory = "FUEL"
	UpdateSpendingCategorySpendingCategoryGAMBLING              UpdateSpendingCategorySpendingCategory = "GAMBLING"
	UpdateSpendingCategorySpendingCategoryGAMING                UpdateSpendingCategorySpendingCategory = "GAMING"
	UpdateSpendingCategorySpendingCategoryGARDEN                UpdateSpendingCategorySpendingCategory = "GARDEN"
	UpdateSpendingCategorySpendingCategoryGENERAL               UpdateSpendingCategorySpendingCategory = "GENERAL"
	UpdateSpendingCategorySpendingCategoryGIFTS                 UpdateSpendingCategorySpendingCategory = "GIFTS"
	UpdateSpendingCategorySpendingCategoryGROCERIES             UpdateSpendingCategorySpendingCategory = "GROCERIES"
	UpdateSpendingCategorySpendingCategoryHOBBY                 UpdateSpendingCategorySpendingCategory = "HOBBY"
	UpdateSpendingCategorySpendingCategoryHOLIDAYS              UpdateSpendingCategorySpendingCategory = "HOLIDAYS"
	UpdateSpendingCategorySpendingCategoryHOME                  UpdateSpendingCategorySpendingCategory = "HOME"
	UpdateSpendingCategorySpendingCategoryIMPULSEBUY            UpdateSpendingCategorySpendingCategory = "IMPULSE_BUY"
	UpdateSpendingCategorySpendingCategoryINCOME                UpdateSpendingCategorySpendingCategory = "INCOME"
	UpdateSpendingCategorySpendingCategoryINSURANCE             UpdateSpendingCategorySpendingCategory = "INSURANCE"
	UpdateSpendingCategorySpendingCategoryINTERESTPAYMENTS      UpdateSpendingCategorySpendingCategory = "INTEREST_PAYMENTS"
	UpdateSpendingCategorySpendingCategoryINVENTORY             UpdateSpendingCategorySpendingCategory = "INVENTORY"
	UpdateSpendingCategorySpendingCategoryINVESTMENTCAPITAL     UpdateSpendingCategorySpendingCategory = "INVESTMENT_CAPITAL"
	UpdateSpendingCategorySpendingCategoryINVESTMENTS           UpdateSpendingCategorySpendingCategory = "INVESTMENTS"
	UpdateSpendingCategorySpendingCategoryLIFESTYLE             UpdateSpendingCategorySpendingCategory = "LIFESTYLE"
	UpdateSpendingCategorySpendingCategoryLOANPRINCIPAL         UpdateSpendingCategorySpendingCategory = "LOAN_PRINCIPAL"
	UpdateSpendingCategorySpendingCategoryMAINTENANCEANDREPAIRS UpdateSpendingCategorySpendingCategory = "MAINTENANCE_AND_REPAIRS"
	UpdateSpendingCategorySpendingCategoryMARKETING             UpdateSpendingCategorySpendingCategory = "MARKETING"
	UpdateSpendingCategorySpendingCategoryMEDICAL               UpdateSpendingCategorySpendingCategory = "MEDICAL"
	UpdateSpendingCategorySpendingCategoryMORTGAGE              UpdateSpendingCategorySpendingCategory = "MORTGAGE"
	UpdateSpendingCategorySpendingCategoryNONE                  UpdateSpendingCategorySpendingCategory = "NONE"
	UpdateSpendingCategorySpendingCategoryNONESSENTIALSPEND     UpdateSpendingCategorySpendingCategory = "NON_ESSENTIAL_SPEND"
	UpdateSpendingCategorySpendingCategoryOTHER                 UpdateSpendingCategorySpendingCategory = "OTHER"
	UpdateSpendingCategorySpendingCategoryOTHERINCOME           UpdateSpendingCategorySpendingCategory = "OTHER_INCOME"
	UpdateSpendingCategorySpendingCategoryPAYMENTS              UpdateSpendingCategorySpendingCategory = "PAYMENTS"
	UpdateSpendingCategorySpendingCategoryPERSONAL              UpdateSpendingCategorySpendingCategory = "PERSONAL"
	UpdateSpendingCategorySpendingCategoryPERSONALCARE          UpdateSpendingCategorySpendingCategory = "PERSONAL_CARE"
	UpdateSpendingCategorySpendingCategoryPERSONALTRANSFERS     UpdateSpendingCategorySpendingCategory = "PERSONAL_TRANSFERS"
	UpdateSpendingCategorySpendingCategoryPETS                  UpdateSpendingCategorySpendingCategory = "PETS"
	UpdateSpendingCategorySpendingCategoryPHONEANDINTERNET      UpdateSpendingCategorySpendingCategory = "PHONE_AND_INTERNET"
	UpdateSpendingCategorySpendingCategoryPROFESSIONALSERVICES  UpdateSpendingCategorySpendingCategory = "PROFESSIONAL_SERVICES"
	UpdateSpendingCategorySpendingCategoryPROJECTS              UpdateSpendingCategorySpendingCategory = "PROJECTS"
	UpdateSpendingCategorySpendingCategoryRELATIONSHIPS         UpdateSpendingCategorySpendingCategory = "RELATIONSHIPS"
	UpdateSpendingCategorySpendingCategoryRENT                  UpdateSpendingCategorySpendingCategory = "RENT"
	UpdateSpendingCategorySpendingCategoryREPAIRSANDMAINTENANCE UpdateSpendingCategorySpendingCategory = "REPAIRS_AND_MAINTENANCE"
	UpdateSpendingCategorySpendingCategoryREVENUE               UpdateSpendingCategorySpendingCategory = "REVENUE"
	UpdateSpendingCategorySpendingCategorySAVING                UpdateSpendingCategorySpendingCategory = "SAVING"
	UpdateSpendingCategorySpendingCategorySELFASSESSMENTTAX     UpdateSpendingCategorySpendingCategory = "SELF_ASSESSMENT_TAX"
	UpdateSpendingCategorySpendingCategorySHOPPING              UpdateSpendingCategorySpendingCategory = "SHOPPING"
	UpdateSpendingCategorySpendingCategorySTAFF                 UpdateSpendingCategorySpendingCategory = "STAFF"
	UpdateSpendingCategorySpendingCategorySUBSCRIPTIONS         UpdateSpendingCategorySpendingCategory = "SUBSCRIPTIONS"
	UpdateSpendingCategorySpendingCategoryTAKEAWAY              UpdateSpendingCategorySpendingCategory = "TAKEAWAY"
	UpdateSpendingCategorySpendingCategoryTAXI                  UpdateSpendingCategorySpendingCategory = "TAXI"
	UpdateSpendingCategorySpendingCategoryTRANSFERS             UpdateSpendingCategorySpendingCategory = "TRANSFERS"
	UpdateSpendingCategorySpendingCategoryTRANSPORT             UpdateSpendingCategorySpendingCategory = "TRANSPORT"
	UpdateSpendingCategorySpendingCategoryTRAVEL                UpdateSpendingCategorySpendingCategory = "TRAVEL"
	UpdateSpendingCategorySpendingCategoryTREATS                UpdateSpendingCategorySpendingCategory = "TREATS"
	UpdateSpendingCategorySpendingCategoryVAT                   UpdateSpendingCategorySpendingCategory = "VAT"
	UpdateSpendingCategorySpendingCategoryVEHICLES              UpdateSpendingCategorySpendingCategory = "VEHICLES"
	UpdateSpendingCategorySpendingCategoryWEDDING               UpdateSpendingCategorySpendingCategory = "WEDDING"
	UpdateSpendingCategorySpendingCategoryWELLBEING             UpdateSpendingCategorySpendingCategory = "WELLBEING"
	UpdateSpendingCategorySpendingCategoryWORKPLACE             UpdateSpendingCategorySpendingCategory = "WORKPLACE"
)

// Defines values for UpdateStandingOrderRequestSpendingCategory.
const (
	ADMIN                 UpdateStandingOrderRequestSpendingCategory = "ADMIN"
	BANKCHARGES           UpdateStandingOrderRequestSpendingCategory = "BANK_CHARGES"
	BIKE                  UpdateStandingOrderRequestSpendingCategory = "BIKE"
	BILLSANDSERVICES      UpdateStandingOrderRequestSpendingCategory = "BILLS_AND_SERVICES"
	BUCKETLIST            UpdateStandingOrderRequestSpendingCategory = "BUCKET_LIST"
	BUSINESSENTERTAINMENT UpdateStandingOrderRequestSpendingCategory = "BUSINESS_ENTERTAINMENT"
	CAR                   UpdateStandingOrderRequestSpendingCategory = "CAR"
	CASH                  UpdateStandingOrderRequestSpendingCategory = "CASH"
	CELEBRATION           UpdateStandingOrderRequestSpendingCategory = "CELEBRATION"
	CHARITY               UpdateStandingOrderRequestSpendingCategory = "CHARITY"
	CHILDREN              UpdateStandingOrderRequestSpendingCategory = "CHILDREN"
	CLIENTREFUNDS         UpdateStandingOrderRequestSpendingCategory = "CLIENT_REFUNDS"
	CLOTHES               UpdateStandingOrderRequestSpendingCategory = "CLOTHES"
	COFFEE                UpdateStandingOrderRequestSpendingCategory = "COFFEE"
	CORPORATIONTAX        UpdateStandingOrderRequestSpendingCategory = "CORPORATION_TAX"
	DEBTREPAYMENT         UpdateStandingOrderRequestSpendingCategory = "DEBT_REPAYMENT"
	DIRECTORSWAGES        UpdateStandingOrderRequestSpendingCategory = "DIRECTORS_WAGES"
	DIVIDENDS             UpdateStandingOrderRequestSpendingCategory = "DIVIDENDS"
	DIY                   UpdateStandingOrderRequestSpendingCategory = "DIY"
	DRINKS                UpdateStandingOrderRequestSpendingCategory = "DRINKS"
	EATINGOUT             UpdateStandingOrderRequestSpendingCategory = "EATING_OUT"
	EDUCATION             UpdateStandingOrderRequestSpendingCategory = "EDUCATION"
	EMERGENCY             UpdateStandingOrderRequestSpendingCategory = "EMERGENCY"
	ENTERTAINMENT         UpdateStandingOrderRequestSpendingCategory = "ENTERTAINMENT"
	EQUIPMENT             UpdateStandingOrderRequestSpendingCategory = "EQUIPMENT"
	ESSENTIALSPEND        UpdateStandingOrderRequestSpendingCategory = "ESSENTIAL_SPEND"
	EXPENSES              UpdateStandingOrderRequestSpendingCategory = "EXPENSES"
	FAMILY                UpdateStandingOrderRequestSpendingCategory = "FAMILY"
	FITNESS               UpdateStandingOrderRequestSpendingCategory = "FITNESS"
	FOODANDDRINK          UpdateStandingOrderRequestSpendingCategory = "FOOD_AND_DRINK"
	FUEL                  UpdateStandingOrderRequestSpendingCategory = "FUEL"
	GAMBLING              UpdateStandingOrderRequestSpendingCategory = "GAMBLING"
	GAMING                UpdateStandingOrderRequestSpendingCategory = "GAMING"
	GARDEN                UpdateStandingOrderRequestSpendingCategory = "GARDEN"
	GENERAL               UpdateStandingOrderRequestSpendingCategory = "GENERAL"
	GIFTS                 UpdateStandingOrderRequestSpendingCategory = "GIFTS"
	GROCERIES             UpdateStandingOrderRequestSpendingCategory = "GROCERIES"
	HOBBY                 UpdateStandingOrderRequestSpendingCategory = "HOBBY"
	HOLIDAYS              UpdateStandingOrderRequestSpendingCategory = "HOLIDAYS"
	HOME                  UpdateStandingOrderRequestSpendingCategory = "HOME"
	IMPULSEBUY            UpdateStandingOrderRequestSpendingCategory = "IMPULSE_BUY"
	INCOME                UpdateStandingOrderRequestSpendingCategory = "INCOME"
	INSURANCE             UpdateStandingOrderRequestSpendingCategory = "INSURANCE"
	INTERESTPAYMENTS      UpdateStandingOrderRequestSpendingCategory = "INTEREST_PAYMENTS"
	INVENTORY             UpdateStandingOrderRequestSpendingCategory = "INVENTORY"
	INVESTMENTCAPITAL     UpdateStandingOrderRequestSpendingCategory = "INVESTMENT_CAPITAL"
	INVESTMENTS           UpdateStandingOrderRequestSpendingCategory = "INVESTMENTS"
	LIFESTYLE             UpdateStandingOrderRequestSpendingCategory = "LIFESTYLE"
	LOANPRINCIPAL         UpdateStandingOrderRequestSpendingCategory = "LOAN_PRINCIPAL"
	MAINTENANCEANDREPAIRS UpdateStandingOrderRequestSpendingCategory = "MAINTENANCE_AND_REPAIRS"
	MARKETING             UpdateStandingOrderRequestSpendingCategory = "MARKETING"
	MEDICAL               UpdateStandingOrderRequestSpendingCategory = "MEDICAL"
	MORTGAGE              UpdateStandingOrderRequestSpendingCategory = "MORTGAGE"
	NONE                  UpdateStandingOrderRequestSpendingCategory = "NONE"
	NONESSENTIALSPEND     UpdateStandingOrderRequestSpendingCategory = "NON_ESSENTIAL_SPEND"
	OTHER                 UpdateStandingOrderRequestSpendingCategory = "OTHER"
	OTHERINCOME           UpdateStandingOrderRequestSpendingCategory = "OTHER_INCOME"
	PAYMENTS              UpdateStandingOrderRequestSpendingCategory = "PAYMENTS"
	PERSONAL              UpdateStandingOrderRequestSpendingCategory = "PERSONAL"
	PERSONALCARE          UpdateStandingOrderRequestSpendingCategory = "PERSONAL_CARE"
	PERSONALTRANSFERS     UpdateStandingOrderRequestSpendingCategory = "PERSONAL_TRANSFERS"
	PETS                  UpdateStandingOrderRequestSpendingCategory = "PETS"
	PHONEANDINTERNET      UpdateStandingOrderRequestSpendingCategory = "PHONE_AND_INTERNET"
	PROFESSIONALSERVICES  UpdateStandingOrderRequestSpendingCategory = "PROFESSIONAL_SERVICES"
	PROJECTS              UpdateStandingOrderRequestSpendingCategory = "PROJECTS"
	RELATIONSHIPS         UpdateStandingOrderRequestSpendingCategory = "RELATIONSHIPS"
	RENT                  UpdateStandingOrderRequestSpendingCategory = "RENT"
	REPAIRSANDMAINTENANCE UpdateStandingOrderRequestSpendingCategory = "REPAIRS_AND_MAINTENANCE"
	REVENUE               UpdateStandingOrderRequestSpendingCategory = "REVENUE"
	SAVING                UpdateStandingOrderRequestSpendingCategory = "SAVING"
	SELFASSESSMENTTAX     UpdateStandingOrderRequestSpendingCategory = "SELF_ASSESSMENT_TAX"
	SHOPPING              UpdateStandingOrderRequestSpendingCategory = "SHOPPING"
	STAFF                 UpdateStandingOrderRequestSpendingCategory = "STAFF"
	SUBSCRIPTIONS         UpdateStandingOrderRequestSpendingCategory = "SUBSCRIPTIONS"
	TAKEAWAY              UpdateStandingOrderRequestSpendingCategory = "TAKEAWAY"
	TAXI                  UpdateStandingOrderRequestSpendingCategory = "TAXI"
	TRANSFERS             UpdateStandingOrderRequestSpendingCategory = "TRANSFERS"
	TRANSPORT             UpdateStandingOrderRequestSpendingCategory = "TRANSPORT"
	TRAVEL                UpdateStandingOrderRequestSpendingCategory = "TRAVEL"
	TREATS                UpdateStandingOrderRequestSpendingCategory = "TREATS"
	VAT                   UpdateStandingOrderRequestSpendingCategory = "VAT"
	VEHICLES              UpdateStandingOrderRequestSpendingCategory = "VEHICLES"
	WEDDING               UpdateStandingOrderRequestSpendingCategory = "WEDDING"
	WELLBEING             UpdateStandingOrderRequestSpendingCategory = "WELLBEING"
	WORKPLACE             UpdateStandingOrderRequestSpendingCategory = "WORKPLACE"
)

// Defines values for QuerySpendingInsightsByCounterpartyParamsMonth.
const (
	QuerySpendingInsightsByCounterpartyParamsMonthAPRIL     QuerySpendingInsightsByCounterpartyParamsMonth = "APRIL"
	QuerySpendingInsightsByCounterpartyParamsMonthAUGUST    QuerySpendingInsightsByCounterpartyParamsMonth = "AUGUST"
	QuerySpendingInsightsByCounterpartyParamsMonthDECEMBER  QuerySpendingInsightsByCounterpartyParamsMonth = "DECEMBER"
	QuerySpendingInsightsByCounterpartyParamsMonthFEBRUARY  QuerySpendingInsightsByCounterpartyParamsMonth = "FEBRUARY"
	QuerySpendingInsightsByCounterpartyParamsMonthJANUARY   QuerySpendingInsightsByCounterpartyParamsMonth = "JANUARY"
	QuerySpendingInsightsByCounterpartyParamsMonthJULY      QuerySpendingInsightsByCounterpartyParamsMonth = "JULY"
	QuerySpendingInsightsByCounterpartyParamsMonthJUNE      QuerySpendingInsightsByCounterpartyParamsMonth = "JUNE"
	QuerySpendingInsightsByCounterpartyParamsMonthMARCH     QuerySpendingInsightsByCounterpartyParamsMonth = "MARCH"
	QuerySpendingInsightsByCounterpartyParamsMonthMAY       QuerySpendingInsightsByCounterpartyParamsMonth = "MAY"
	QuerySpendingInsightsByCounterpartyParamsMonthNOVEMBER  QuerySpendingInsightsByCounterpartyParamsMonth = "NOVEMBER"
	QuerySpendingInsightsByCounterpartyParamsMonthOCTOBER   QuerySpendingInsightsByCounterpartyParamsMonth = "OCTOBER"
	QuerySpendingInsightsByCounterpartyParamsMonthSEPTEMBER QuerySpendingInsightsByCounterpartyParamsMonth = "SEPTEMBER"
)

// Defines values for QuerySpendingInsightsBySpendingCategoryParamsMonth.
const (
	QuerySpendingInsightsBySpendingCategoryParamsMonthAPRIL     QuerySpendingInsightsBySpendingCategoryParamsMonth = "APRIL"
	QuerySpendingInsightsBySpendingCategoryParamsMonthAUGUST    QuerySpendingInsightsBySpendingCategoryParamsMonth = "AUGUST"
	QuerySpendingInsightsBySpendingCategoryParamsMonthDECEMBER  QuerySpendingInsightsBySpendingCategoryParamsMonth = "DECEMBER"
	QuerySpendingInsightsBySpendingCategoryParamsMonthFEBRUARY  QuerySpendingInsightsBySpendingCategoryParamsMonth = "FEBRUARY"
	QuerySpendingInsightsBySpendingCategoryParamsMonthJANUARY   QuerySpendingInsightsBySpendingCategoryParamsMonth = "JANUARY"
	QuerySpendingInsightsBySpendingCategoryParamsMonthJULY      QuerySpendingInsightsBySpendingCategoryParamsMonth = "JULY"
	QuerySpendingInsightsBySpendingCategoryParamsMonthJUNE      QuerySpendingInsightsBySpendingCategoryParamsMonth = "JUNE"
	QuerySpendingInsightsBySpendingCategoryParamsMonthMARCH     QuerySpendingInsightsBySpendingCategoryParamsMonth = "MARCH"
	QuerySpendingInsightsBySpendingCategoryParamsMonthMAY       QuerySpendingInsightsBySpendingCategoryParamsMonth = "MAY"
	QuerySpendingInsightsBySpendingCategoryParamsMonthNOVEMBER  QuerySpendingInsightsBySpendingCategoryParamsMonth = "NOVEMBER"
	QuerySpendingInsightsBySpendingCategoryParamsMonthOCTOBER   QuerySpendingInsightsBySpendingCategoryParamsMonth = "OCTOBER"
	QuerySpendingInsightsBySpendingCategoryParamsMonthSEPTEMBER QuerySpendingInsightsBySpendingCategoryParamsMonth = "SEPTEMBER"
)

// AccountHolder Information about the account holder type
type AccountHolder struct {
	AccountHolderType *AccountHolderAccountHolderType `json:"accountHolderType,omitempty"`
	AccountHolderUid  *openapi_types.UUID             `json:"accountHolderUid,omitempty"`
}

// AccountHolderAccountHolderType defines model for AccountHolder.AccountHolderType.
type AccountHolderAccountHolderType string

// AccountHolderName Name of the account holder
type AccountHolderName struct {
	AccountHolderName *string `json:"accountHolderName,omitempty"`
}

// AccountIdentifier Bank and account identifiers for a particular identifier type
type AccountIdentifier struct {
	// AccountIdentifier Identifier to uniquely identify the account at the bank, e.g. an account number or IBAN
	AccountIdentifier *string `json:"accountIdentifier,omitempty"`

	// BankIdentifier Identifier to uniquely identify the bank, e.g. a sort code or BIC
	BankIdentifier *string `json:"bankIdentifier,omitempty"`

	// IdentifierType The type of account identifier
	IdentifierType *AccountIdentifierIdentifierType `json:"identifierType,omitempty"`
}

// AccountIdentifierIdentifierType The type of account identifier
type AccountIdentifierIdentifierType string

// AccountIdentifiers Bank account identifiers
type AccountIdentifiers struct {
	// AccountIdentifier Identifier to uniquely identify the account at the bank
	AccountIdentifier  *string              `json:"accountIdentifier,omitempty"`
	AccountIdentifiers *[]AccountIdentifier `json:"accountIdentifiers,omitempty"`

	// BankIdentifier Identifier to uniquely identify the bank
	BankIdentifier *string `json:"bankIdentifier,omitempty"`

	// Bic International identifier to uniquely identify the bank
	Bic *string `json:"bic,omitempty"`

	// Iban International identifier to uniquely identify the account at the bank
	Iban *string `json:"iban,omitempty"`
}

// AccountStatementPeriod A period for which an account statement is available
type AccountStatementPeriod struct {
	// EndsAt End timestamp for the period
	EndsAt *time.Time `json:"endsAt,omitempty"`

	// Partial Is the statement for this period partial
	Partial bool `json:"partial"`

	// Period The period for which the statement is available
	Period string `json:"period"`
}

// AccountStatementPeriods A list of periods for which an account statement is available
type AccountStatementPeriods struct {
	Periods *[]AccountStatementPeriod `json:"periods,omitempty"`
}

// AccountV2 Bank account details
type AccountV2 struct {
	AccountType     *AccountV2AccountType `json:"accountType,omitempty"`
	AccountUid      *openapi_types.UUID   `json:"accountUid,omitempty"`
	CreatedAt       *time.Time            `json:"createdAt,omitempty"`
	Currency        *AccountV2Currency    `json:"currency,omitempty"`
	DefaultCategory *openapi_types.UUID   `json:"defaultCategory,omitempty"`
	Name            *string               `json:"name,omitempty"`
}

// AccountV2AccountType defines model for AccountV2.AccountType.
type AccountV2AccountType string

// AccountV2Currency defines model for AccountV2.Currency.
type AccountV2Currency string

// Accounts The accounts of an account holder
type Accounts struct {
	Accounts *[]AccountV2 `json:"accounts,omitempty"`
}

// AddressUpdateRequest Address update request
type AddressUpdateRequest struct {
	// CountryCode Country code in ISO 3166-1 alpha-2. NB GB is the official country code for the UK. UK is not the officially assigned code, and so is not valid
	CountryCode string `json:"countryCode"`

	// From Date the account holder's residency at this address started
	From     openapi_types.Date `json:"from"`
	Line1    string             `json:"line1"`
	Line2    *string            `json:"line2,omitempty"`
	Line3    *string            `json:"line3,omitempty"`
	PostCode string             `json:"postCode"`
	PostTown string             `json:"postTown"`

	// Udprn The UDPRN of the property
	Udprn *string `json:"udprn,omitempty"`

	// Umprn The UMPRN of the property
	Umprn *string `json:"umprn,omitempty"`
}

// AddressV2 Physical address of account holder
type AddressV2 struct {
	// CountryCode Country code in ISO 3166-1 alpha-2. NB GB is the official country code for the UK. UK is not the officially assigned code, and so is not valid
	CountryCode string  `json:"countryCode"`
	Line1       string  `json:"line1"`
	Line2       *string `json:"line2,omitempty"`
	Line3       *string `json:"line3,omitempty"`
	PostCode    string  `json:"postCode"`
	PostTown    string  `json:"postTown"`
}

// AddressesV2 Current and previous physical addresses
type AddressesV2 struct {
	// Current Physical address of account holder
	Current  *AddressV2   `json:"current,omitempty"`
	Previous *[]AddressV2 `json:"previous,omitempty"`
}

// AssociatedFeedRoundUp Round up details associated with a feed item
type AssociatedFeedRoundUp struct {
	// Amount Representation of money
	Amount *CurrencyAndAmount `json:"amount,omitempty"`

	// GoalCategoryUid Unique identifier of associated category
	GoalCategoryUid *openapi_types.UUID `json:"goalCategoryUid,omitempty"`
}

// BalanceV2 Balance details
type BalanceV2 struct {
	AcceptedOverdraft     *SignedCurrencyAndAmount `json:"acceptedOverdraft,omitempty"`
	Amount                *SignedCurrencyAndAmount `json:"amount,omitempty"`
	ClearedBalance        *SignedCurrencyAndAmount `json:"clearedBalance,omitempty"`
	EffectiveBalance      *SignedCurrencyAndAmount `json:"effectiveBalance,omitempty"`
	PendingTransactions   *SignedCurrencyAndAmount `json:"pendingTransactions,omitempty"`
	TotalClearedBalance   *SignedCurrencyAndAmount `json:"totalClearedBalance,omitempty"`
	TotalEffectiveBalance *SignedCurrencyAndAmount `json:"totalEffectiveBalance,omitempty"`
}

// BatchPaymentDetails The details of the batch payment this is part of, if it is
type BatchPaymentDetails struct {
	// BatchPaymentType The type of the batch payment itself
	BatchPaymentType *BatchPaymentDetailsBatchPaymentType `json:"batchPaymentType,omitempty"`

	// BatchPaymentUid The unique identifier for the batch payment
	BatchPaymentUid *openapi_types.UUID `json:"batchPaymentUid,omitempty"`
}

// BatchPaymentDetailsBatchPaymentType The type of the batch payment itself
type BatchPaymentDetailsBatchPaymentType string

// Business Details of a business account holder
type Business struct {
	CompanyCategory           *string `json:"companyCategory,omitempty"`
	CompanyName               *string `json:"companyName,omitempty"`
	CompanyRegistrationNumber *string `json:"companyRegistrationNumber,omitempty"`
	CompanySubCategory        *string `json:"companySubCategory,omitempty"`
	CompanyType               *string `json:"companyType,omitempty"`
	Email                     *string `json:"email,omitempty"`
	Phone                     *string `json:"phone,omitempty"`
}

// Card Information about card
type Card struct {
	Activated                 bool               `json:"activated"`
	ActivationRequested       bool               `json:"activationRequested"`
	AtmEnabled                bool               `json:"atmEnabled"`
	Cancelled                 bool               `json:"cancelled"`
	CardAssociationUid        openapi_types.UUID `json:"cardAssociationUid"`
	CardUid                   openapi_types.UUID `json:"cardUid"`
	CurrencyFlags             []CurrencyFlag     `json:"currencyFlags"`
	Enabled                   bool               `json:"enabled"`
	EndOfCardNumber           string             `json:"endOfCardNumber"`
	GamblingEnabled           bool               `json:"gamblingEnabled"`
	GamblingToBeEnabledAt     *time.Time         `json:"gamblingToBeEnabledAt,omitempty"`
	MagStripeEnabled          bool               `json:"magStripeEnabled"`
	MobileWalletEnabled       bool               `json:"mobileWalletEnabled"`
	OnlineEnabled             bool               `json:"onlineEnabled"`
	PosEnabled                bool               `json:"posEnabled"`
	PublicToken               string             `json:"publicToken"`
	WalletNotificationEnabled bool               `json:"walletNotificationEnabled"`
}

// Cards Wrapper around multiple cards
type Cards struct {
	Cards []Card `json:"cards"`
}

// CategoryDescription Response object contain category description
type CategoryDescription struct {
	// DisplayText Display text
	DisplayText *string `json:"displayText,omitempty"`

	// Locale Locale
	Locale *struct {
		Country                 *string   `json:"country,omitempty"`
		DisplayCountry          *string   `json:"displayCountry,omitempty"`
		DisplayLanguage         *string   `json:"displayLanguage,omitempty"`
		DisplayName             *string   `json:"displayName,omitempty"`
		DisplayScript           *string   `json:"displayScript,omitempty"`
		DisplayVariant          *string   `json:"displayVariant,omitempty"`
		ExtensionKeys           *[]string `json:"extensionKeys,omitempty"`
		Iso3Country             *string   `json:"iso3Country,omitempty"`
		Iso3Language            *string   `json:"iso3Language,omitempty"`
		Language                *string   `json:"language,omitempty"`
		Script                  *string   `json:"script,omitempty"`
		UnicodeLocaleAttributes *[]string `json:"unicodeLocaleAttributes,omitempty"`
		UnicodeLocaleKeys       *[]string `json:"unicodeLocaleKeys,omitempty"`
		Variant                 *string   `json:"variant,omitempty"`
	} `json:"locale,omitempty"`
}

// ConfirmationOfFundsResponse defines model for ConfirmationOfFundsResponse.
type ConfirmationOfFundsResponse struct {
	// AccountWouldBeInOverdraftIfRequestedAmountSpent True if spending the requested amount would put the account in overdraft
	AccountWouldBeInOverdraftIfRequestedAmountSpent *bool `json:"accountWouldBeInOverdraftIfRequestedAmountSpent,omitempty"`

	// RequestedAmountAvailableToSpend True if requested amount is available to spend
	RequestedAmountAvailableToSpend *bool `json:"requestedAmountAvailableToSpend,omitempty"`
}

// ConsentInformation Denotes whether a request has been paused in order for the user to approve it.
type ConsentInformation = map[string]interface{}

// CreateOrUpdateSavingsGoalResponseV2 Response after attempting to create a savings goal
type CreateOrUpdateSavingsGoalResponseV2 struct {
	// SavingsGoalUid Unique identifier of the savings goal
	SavingsGoalUid *openapi_types.UUID `json:"savingsGoalUid,omitempty"`

	// Success True if the method completed successfully
	Success *bool `json:"success,omitempty"`
}

// CreateStandingOrderRequest Request to create a standing order
type CreateStandingOrderRequest struct {
	// Amount Representation of money
	Amount CurrencyAndAmount `json:"amount"`

	// DestinationPayeeAccountUid The desired payment recipient. Either paymentRecipient or destinationPayeeAccountUid must be present
	DestinationPayeeAccountUid *openapi_types.UUID `json:"destinationPayeeAccountUid,omitempty"`

	// ExternalIdentifier External identifier for the standing order request
	ExternalIdentifier string `json:"externalIdentifier"`

	// PaymentRecipient The desired payment recipient. Either paymentRecipient or destinationPayeeAccountUid must be present
	PaymentRecipient *PaymentRecipient `json:"paymentRecipient,omitempty"`

	// Reference The payment reference
	Reference string `json:"reference"`

	// SpendingCategory The category of a transaction
	SpendingCategory *CreateStandingOrderRequestSpendingCategory `json:"spendingCategory,omitempty"`

	// StandingOrderRecurrence Recurrence rules of a standing order
	StandingOrderRecurrence StandingOrderRecurrence `json:"standingOrderRecurrence"`
}

// CreateStandingOrderRequestSpendingCategory The category of a transaction
type CreateStandingOrderRequestSpendingCategory string

// CreateStandingOrderResult after attempting to create a standing order
type CreateStandingOrderResult struct {
	// PaymentOrderUid The uid of the payment order created by the standing order. N.B. this will not be the uid of any payment which is created by the standing order
	PaymentOrderUid *openapi_types.UUID `json:"paymentOrderUid,omitempty"`
}

// CurrencyAndAmount Representation of money
type CurrencyAndAmount struct {
	// Currency ISO-4217 3 character currency code
	Currency string `json:"currency"`

	// MinorUnits Amount in the minor units of the given currency; eg pence in GBP, cents in EUR
	MinorUnits int64 `json:"minorUnits"`
}

// CurrencyFlag Whether spending is enabled on this card for the specified currency
type CurrencyFlag struct {
	Currency string `json:"currency"`
	Enabled  bool   `json:"enabled"`
}

// DirectDebitMandateV2 Single mandate
type DirectDebitMandateV2 struct {
	AccountUid  *openapi_types.UUID `json:"accountUid,omitempty"`
	Cancelled   *time.Time          `json:"cancelled,omitempty"`
	CategoryUid *openapi_types.UUID `json:"categoryUid,omitempty"`
	Created     *time.Time          `json:"created,omitempty"`
	LastDate    *openapi_types.Date `json:"lastDate,omitempty"`

	// LastPayment Last direct debit payment
	LastPayment    *LastPayment                `json:"lastPayment"`
	MerchantUid    *openapi_types.UUID         `json:"merchantUid,omitempty"`
	NextDate       *openapi_types.Date         `json:"nextDate,omitempty"`
	OriginatorName *string                     `json:"originatorName,omitempty"`
	OriginatorUid  *openapi_types.UUID         `json:"originatorUid,omitempty"`
	Reference      *string                     `json:"reference,omitempty"`
	Source         *DirectDebitMandateV2Source `json:"source,omitempty"`
	Status         *DirectDebitMandateV2Status `json:"status,omitempty"`
	Uid            *openapi_types.UUID         `json:"uid,omitempty"`
}

// DirectDebitMandateV2Source defines model for DirectDebitMandateV2.Source.
type DirectDebitMandateV2Source string

// DirectDebitMandateV2Status defines model for DirectDebitMandateV2.Status.
type DirectDebitMandateV2Status string

// DirectDebitMandatesV2 List of mandates
type DirectDebitMandatesV2 struct {
	Mandates *[]DirectDebitMandateV2 `json:"mandates,omitempty"`
}

// DirectDebitPayment A previous Direct Debit payment
type DirectDebitPayment struct {
	// CreatedAt Date when direct debit payment was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// PaymentAmount Representation of money
	PaymentAmount *CurrencyAndAmount `json:"paymentAmount,omitempty"`
}

// DirectDebitPaymentsResponse Transaction history for a direct debit
type DirectDebitPaymentsResponse struct {
	// DirectDebitPayments List of processed direct debit mandate payments
	DirectDebitPayments []DirectDebitPayment `json:"directDebitPayments"`
}

// Enabling defines model for Enabling.
type Enabling struct {
	Enabled bool `json:"enabled"`
}

// ErrorDetail Detail of the error
type ErrorDetail struct {
	// Message The error message
	Message *string `json:"message,omitempty"`
}

// ErrorResponse Erroneous response wrapper
type ErrorResponse struct {
	Errors  *[]ErrorDetail `json:"errors,omitempty"`
	Success *bool          `json:"success,omitempty"`
}

// FeedItem An item from the account holders's transaction feed
type FeedItem struct {
	// Amount Representation of money
	Amount *CurrencyAndAmount `json:"amount,omitempty"`

	// BatchPaymentDetails The details of the batch payment this is part of, if it is
	BatchPaymentDetails *BatchPaymentDetails `json:"batchPaymentDetails,omitempty"`

	// CategoryUid The category on which the transaction happened
	CategoryUid *openapi_types.UUID `json:"categoryUid,omitempty"`

	// CounterPartyName The name of the counter party
	CounterPartyName *string `json:"counterPartyName,omitempty"`

	// CounterPartySubEntityIdentifier An external identifier for the sub entity, for PAYEE this will be the sort code of the account
	CounterPartySubEntityIdentifier *string `json:"counterPartySubEntityIdentifier,omitempty"`

	// CounterPartySubEntityName A name for the counter party sub entity, for PAYEE this will be the name set for the payee account
	CounterPartySubEntityName *string `json:"counterPartySubEntityName,omitempty"`

	// CounterPartySubEntitySubIdentifier An external sub identifier for the sub entity, for PAYEE this will be the account number of the account
	CounterPartySubEntitySubIdentifier *string `json:"counterPartySubEntitySubIdentifier,omitempty"`

	// CounterPartySubEntityUid An identifier for the counter party sub entity. eg for MERCHANT this will be the merchant location uid, for PAYEE this will be the payee account uid
	CounterPartySubEntityUid *openapi_types.UUID `json:"counterPartySubEntityUid,omitempty"`

	// CounterPartyType The type of counter party for a transaction
	CounterPartyType *FeedItemCounterPartyType `json:"counterPartyType,omitempty"`

	// CounterPartyUid The unique identifier for the counter party. eg for MERCHANT this will be the merchant uid, for PAYEE this will be the payee uid
	CounterPartyUid *openapi_types.UUID `json:"counterPartyUid,omitempty"`

	// Country The country in which the transaction took place. ISO 3166-1 alpha-2
	Country *FeedItemCountry `json:"country,omitempty"`

	// Direction Was this an inbound or outbound transaction
	Direction    *FeedItemDirection `json:"direction,omitempty"`
	ExchangeRate *float32           `json:"exchangeRate,omitempty"`

	// FeedItemUid Unique identifier for this item
	FeedItemUid *openapi_types.UUID `json:"feedItemUid,omitempty"`

	// HasAttachment Attachment present
	HasAttachment *bool `json:"hasAttachment,omitempty"`

	// HasReceipt Receipt present
	HasReceipt *bool `json:"hasReceipt,omitempty"`

	// Reference The reference for the transaction
	Reference                *string    `json:"reference,omitempty"`
	RetryAllocationUntilTime *time.Time `json:"retryAllocationUntilTime,omitempty"`

	// RoundUp Round up details associated with a feed item
	RoundUp *AssociatedFeedRoundUp `json:"roundUp,omitempty"`

	// SettlementTime The time the transaction settled
	SettlementTime *time.Time `json:"settlementTime,omitempty"`

	// Source The source of a transaction
	Source *FeedItemSource `json:"source,omitempty"`

	// SourceAmount Representation of money
	SourceAmount *CurrencyAndAmount `json:"sourceAmount,omitempty"`

	// SourceSubType The source subtype of the transaction
	SourceSubType *FeedItemSourceSubType `json:"sourceSubType,omitempty"`

	// SpendingCategory The category of a transaction
	SpendingCategory *FeedItemSpendingCategory `json:"spendingCategory,omitempty"`

	// Status The status of a transaction
	Status *FeedItemStatus `json:"status,omitempty"`

	// TotalFeeAmount Representation of money
	TotalFeeAmount *CurrencyAndAmount `json:"totalFeeAmount,omitempty"`
	TotalFees      *float32           `json:"totalFees,omitempty"`

	// TransactingApplicationUserUid The application user that made the transaction
	TransactingApplicationUserUid *openapi_types.UUID `json:"transactingApplicationUserUid,omitempty"`

	// TransactionTime The time of the transaction
	TransactionTime *time.Time `json:"transactionTime,omitempty"`

	// UpdatedAt The time the transaction was last updated at
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`

	// UserNote The user-provided transaction note
	UserNote *string `json:"userNote,omitempty"`
}

// FeedItemCounterPartyType The type of counter party for a transaction
type FeedItemCounterPartyType string

// FeedItemCountry The country in which the transaction took place. ISO 3166-1 alpha-2
type FeedItemCountry string

// FeedItemDirection Was this an inbound or outbound transaction
type FeedItemDirection string

// FeedItemSource The source of a transaction
type FeedItemSource string

// FeedItemSourceSubType The source subtype of the transaction
type FeedItemSourceSubType string

// FeedItemSpendingCategory The category of a transaction
type FeedItemSpendingCategory string

// FeedItemStatus The status of a transaction
type FeedItemStatus string

// FeedItemAttachment defines model for FeedItemAttachment.
type FeedItemAttachment struct {
	AttachmentType         *FeedItemAttachmentAttachmentType         `json:"attachmentType,omitempty"`
	FeedItemAttachmentType *FeedItemAttachmentFeedItemAttachmentType `json:"feedItemAttachmentType,omitempty"`
	FeedItemAttachmentUid  *openapi_types.UUID                       `json:"feedItemAttachmentUid,omitempty"`
	FeedItemUid            *openapi_types.UUID                       `json:"feedItemUid,omitempty"`
}

// FeedItemAttachmentAttachmentType defines model for FeedItemAttachment.AttachmentType.
type FeedItemAttachmentAttachmentType string

// FeedItemAttachmentFeedItemAttachmentType defines model for FeedItemAttachment.FeedItemAttachmentType.
type FeedItemAttachmentFeedItemAttachmentType string

// FeedItemAttachments defines model for FeedItemAttachments.
type FeedItemAttachments struct {
	FeedItemAttachments *[]FeedItemAttachment `json:"feedItemAttachments,omitempty"`
}

// FeedItems Wrapper around multiple feed items
type FeedItems struct {
	FeedItems *[]FeedItem `json:"feedItems,omitempty"`
}

// IdentityV2 defines model for IdentityV2.
type IdentityV2 struct {
	AccountHolderUid   *openapi_types.UUID `json:"accountHolderUid,omitempty"`
	ApplicationUserUid *openapi_types.UUID `json:"applicationUserUid,omitempty"`
	Authenticated      *bool               `json:"authenticated,omitempty"`
	ConsentExpiresAt   *time.Time          `json:"consentExpiresAt,omitempty"`

	// CustomerUid Deprecated, use accountHolderUid instead
	// Deprecated:
	CustomerUid      *openapi_types.UUID `json:"customerUid,omitempty"`
	ExpiresAt        *time.Time          `json:"expiresAt,omitempty"`
	ExpiresInSeconds *int64              `json:"expiresInSeconds,omitempty"`

	// Scopes The scopes which this token has permission to use e.g. balance:read
	Scopes *[]string `json:"scopes,omitempty"`
}

// Individual Information about an individual account holder
type Individual struct {
	DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`
	Email       *string             `json:"email,omitempty"`
	FirstName   *string             `json:"firstName,omitempty"`
	LastName    *string             `json:"lastName,omitempty"`
	Phone       *string             `json:"phone,omitempty"`
	Title       *string             `json:"title,omitempty"`
}

// InstructLocalPaymentRequest Request to make a local payment
type InstructLocalPaymentRequest struct {
	// Amount Representation of money
	Amount CurrencyAndAmount `json:"amount"`

	// DestinationPayeeAccountUid The desired payment recipient. Either paymentRecipient or destinationPayeeAccountUid must be present
	DestinationPayeeAccountUid *openapi_types.UUID `json:"destinationPayeeAccountUid,omitempty"`

	// ExternalIdentifier Identifier for the payment request, generated by you. Must be unique for each payment request you create
	ExternalIdentifier string `json:"externalIdentifier"`

	// PaymentRecipient The desired payment recipient. Either paymentRecipient or destinationPayeeAccountUid must be present
	PaymentRecipient *PaymentRecipient `json:"paymentRecipient,omitempty"`

	// Reference The payment reference. The 35 character limit applies to SEPA payments (Euro accounts). For FPS payments (GBP accounts), the limit is 18 characters
	Reference string `json:"reference"`

	// SpendingCategory The category of a transaction
	SpendingCategory *InstructLocalPaymentRequestSpendingCategory `json:"spendingCategory,omitempty"`
}

// InstructLocalPaymentRequestSpendingCategory The category of a transaction
type InstructLocalPaymentRequestSpendingCategory string

// InstructLocalPaymentResponse Response after attempting to create a local payment
type InstructLocalPaymentResponse struct {
	// PaymentOrderUid The uid of the payment order created by the instruction. N.B. this will not be the uid of any payment which is created by the payment order
	PaymentOrderUid *openapi_types.UUID `json:"paymentOrderUid,omitempty"`
}

// JointAccount Information about a joint account
type JointAccount struct {
	AccountHolderUid *openapi_types.UUID `json:"accountHolderUid,omitempty"`

	// PersonOne Information about an individual account holder
	PersonOne *Individual `json:"personOne,omitempty"`

	// PersonTwo Information about an individual account holder
	PersonTwo *Individual `json:"personTwo,omitempty"`
}

// LastPayment Last direct debit payment
type LastPayment struct {
	// LastAmount Representation of money
	LastAmount *CurrencyAndAmount  `json:"lastAmount,omitempty"`
	LastDate   *openapi_types.Date `json:"lastDate,omitempty"`
}

// LocalTime defines model for LocalTime.
type LocalTime struct {
	Hour   *int32 `json:"hour,omitempty"`
	Minute *int32 `json:"minute,omitempty"`
	Nano   *int32 `json:"nano,omitempty"`
	Second *int32 `json:"second,omitempty"`
}

// MastercardFeedItem defines model for MastercardFeedItem.
type MastercardFeedItem struct {
	AuthorisationCode  *string    `json:"authorisationCode,omitempty"`
	CardLast4          *string    `json:"cardLast4,omitempty"`
	Mcc                *int32     `json:"mcc,omitempty"`
	MerchantIdentifier *string    `json:"merchantIdentifier,omitempty"`
	PosTimestamp       *LocalTime `json:"posTimestamp,omitempty"`
}

// Money Most recent payment amount
type Money struct {
	Amount   float32       `json:"amount"`
	Currency MoneyCurrency `json:"currency"`
}

// MoneyCurrency defines model for Money.Currency.
type MoneyCurrency string

// NextPaymentDatesResponse List of next payment dates of a standing order
type NextPaymentDatesResponse struct {
	NextPaymentDates *[]openapi_types.Date `json:"nextPaymentDates,omitempty"`
}

// Payee A saved payee
type Payee struct {
	// Accounts Accounts for this payee
	Accounts *[]PayeeAccount `json:"accounts,omitempty"`

	// BusinessName Business name
	BusinessName *string `json:"businessName,omitempty"`

	// DateOfBirth Date of birth
	DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`

	// FirstName First name
	FirstName *string `json:"firstName,omitempty"`

	// LastName Last name
	LastName *string `json:"lastName,omitempty"`

	// MiddleName Middle name
	MiddleName *string `json:"middleName,omitempty"`

	// PayeeName Name
	PayeeName string `json:"payeeName"`

	// PayeeType INDIVIDUAL
	PayeeType PayeePayeeType `json:"payeeType"`

	// PayeeUid The uid of this payee
	PayeeUid openapi_types.UUID `json:"payeeUid"`

	// PhoneNumber Phone number
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// PayeePayeeType INDIVIDUAL
type PayeePayeeType string

// PayeeAccount An account of a payee
type PayeeAccount struct {
	// AccountIdentifier The account identifier
	AccountIdentifier *string `json:"accountIdentifier,omitempty"`

	// BankIdentifier The bank identifier
	BankIdentifier *string `json:"bankIdentifier,omitempty"`

	// BankIdentifierType The bank identifier type
	BankIdentifierType *PayeeAccountBankIdentifierType `json:"bankIdentifierType,omitempty"`

	// CountryCode The country code for the account (ISO 3166-1 alpha-2)
	CountryCode PayeeAccountCountryCode `json:"countryCode"`

	// DefaultAccount Is this the default account for the owning payee
	DefaultAccount *bool `json:"defaultAccount,omitempty"`

	// Description Account description
	Description    string    `json:"description"`
	LastReferences *[]string `json:"lastReferences,omitempty"`

	// PayeeAccountUid The uid of this payee account
	PayeeAccountUid openapi_types.UUID `json:"payeeAccountUid"`

	// PayeeChannelType The channel through which the payee was added
	PayeeChannelType PayeeAccountPayeeChannelType `json:"payeeChannelType"`

	// SecondaryIdentifier Secondary reference data (SRD), if applicable
	SecondaryIdentifier *string `json:"secondaryIdentifier,omitempty"`
}

// PayeeAccountBankIdentifierType The bank identifier type
type PayeeAccountBankIdentifierType string

// PayeeAccountCountryCode The country code for the account (ISO 3166-1 alpha-2)
type PayeeAccountCountryCode string

// PayeeAccountPayeeChannelType The channel through which the payee was added
type PayeeAccountPayeeChannelType string

// PayeeAccountCreationRequest Request to create a payee account
type PayeeAccountCreationRequest struct {
	// AccountIdentifier The account identifier
	AccountIdentifier string `json:"accountIdentifier"`

	// BankIdentifier The bank identifier
	BankIdentifier string `json:"bankIdentifier"`

	// BankIdentifierType The bank identifier type
	BankIdentifierType PayeeAccountCreationRequestBankIdentifierType `json:"bankIdentifierType"`

	// CountryCode The country code for the account (ISO 3166-1 alpha-2)
	CountryCode string `json:"countryCode"`

	// DefaultAccount Is this the default account for the owning payee
	DefaultAccount bool `json:"defaultAccount"`

	// Description Account description
	Description string `json:"description"`

	// SecondaryIdentifier Secondary reference data (SRD), if applicable
	SecondaryIdentifier *string `json:"secondaryIdentifier,omitempty"`
}

// PayeeAccountCreationRequestBankIdentifierType The bank identifier type
type PayeeAccountCreationRequestBankIdentifierType string

// PayeeAccountCreationResponse Response after attempting to create a payee account
type PayeeAccountCreationResponse struct {
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// PayeeAccountUid The newly created payee unique identifier, only present on successful payee account creation
	PayeeAccountUid *string `json:"payeeAccountUid,omitempty"`

	// Success True if the method completed successfully
	Success *bool `json:"success,omitempty"`
}

// PayeeCreationRequest Request to create a payee
type PayeeCreationRequest struct {
	// Accounts List of accounts for this payee
	Accounts *[]PayeeAccountCreationRequest `json:"accounts,omitempty"`

	// BusinessName Business name
	BusinessName *string `json:"businessName,omitempty"`

	// DateOfBirth Date of birth for this payee
	DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`

	// FirstName First name
	FirstName *string `json:"firstName,omitempty"`

	// LastName Last name
	LastName *string `json:"lastName,omitempty"`

	// MiddleName Middle name
	MiddleName *string `json:"middleName,omitempty"`

	// PayeeName Name
	PayeeName string                        `json:"payeeName"`
	PayeeType PayeeCreationRequestPayeeType `json:"payeeType"`

	// PhoneNumber Phone number
	PhoneNumber *string `json:"phoneNumber,omitempty"`
}

// PayeeCreationRequestPayeeType defines model for PayeeCreationRequest.PayeeType.
type PayeeCreationRequestPayeeType string

// PayeeCreationResponse Response after attempting to create a payee
type PayeeCreationResponse struct {
	Errors *[]ErrorDetail `json:"errors,omitempty"`

	// PayeeUid The newly created payee unique identifier, only present on successful payee creation
	PayeeUid *string `json:"payeeUid,omitempty"`

	// Success True if the method completed successfully
	Success *bool `json:"success,omitempty"`
}

// PayeePayment A sent payment
type PayeePayment struct {
	// Amount Representation of money
	Amount *CurrencyAndAmount `json:"amount,omitempty"`

	// CreatedAt Date when payment was created
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// PaymentAmount Representation of money
	PaymentAmount *CurrencyAndAmount `json:"paymentAmount,omitempty"`

	// PaymentUid Unique identifier of the payment
	PaymentUid *openapi_types.UUID `json:"paymentUid,omitempty"`

	// Reference Payment reference
	Reference *string `json:"reference,omitempty"`

	// SpendingCategory The category of a transaction
	SpendingCategory *PayeePaymentSpendingCategory `json:"spendingCategory,omitempty"`
}

// PayeePaymentSpendingCategory The category of a transaction
type PayeePaymentSpendingCategory string

// Payees The payees of an account holder
type Payees struct {
	Payees *[]Payee `json:"payees,omitempty"`
}

// PaymentOrderPayment Response object for payment order payments queries
type PaymentOrderPayment struct {
	// Amount Representation of money
	Amount CurrencyAndAmount `json:"amount"`

	// CompletedAt When this payment was completed, if it completed
	CompletedAt *time.Time `json:"completedAt,omitempty"`

	// CreatedAt When this payment was created
	CreatedAt time.Time `json:"createdAt"`

	// PayeeAccountUid The account ID of the payee account receiving this payment
	PayeeAccountUid openapi_types.UUID `json:"payeeAccountUid"`

	// PayeeUid The ID of the payee receiving this payment
	PayeeUid openapi_types.UUID `json:"payeeUid"`

	// PaymentStatusDetails Status details of a payment
	PaymentStatusDetails *PaymentStatusDetails `json:"paymentStatusDetails,omitempty"`

	// PaymentUid UID of this payment
	PaymentUid openapi_types.UUID `json:"paymentUid"`

	// Reference Reference of this payment
	Reference string `json:"reference"`

	// RejectedAt When this payment was rejected, if it was rejected
	RejectedAt *time.Time `json:"rejectedAt,omitempty"`
}

// PaymentOrderPaymentsResponse List of payments associated with a payment order
type PaymentOrderPaymentsResponse struct {
	Payments []PaymentOrderPayment `json:"payments"`
}

// PaymentOrderV2 Response object for payment order queries
type PaymentOrderV2 struct {
	// Amount Representation of money
	Amount CurrencyAndAmount `json:"amount"`

	// PayeeAccountUid The account ID of the payee account receiving this payment
	PayeeAccountUid openapi_types.UUID `json:"payeeAccountUid"`

	// PayeeUid The ID of the payee receiving this payment
	PayeeUid openapi_types.UUID `json:"payeeUid"`

	// PaymentOrderUid UID of this payment order
	PaymentOrderUid openapi_types.UUID `json:"paymentOrderUid"`

	// Reference The reference set by the payer
	Reference string `json:"reference"`

	// SpendingCategory The category of a transaction
	SpendingCategory *PaymentOrderV2SpendingCategory `json:"spendingCategory"`
}

// PaymentOrderV2SpendingCategory The category of a transaction
type PaymentOrderV2SpendingCategory string

// PaymentRecipient The desired payment recipient. Either paymentRecipient or destinationPayeeAccountUid must be present
type PaymentRecipient struct {
	AccountIdentifier  string                             `json:"accountIdentifier"`
	BankIdentifier     string                             `json:"bankIdentifier"`
	BankIdentifierType PaymentRecipientBankIdentifierType `json:"bankIdentifierType"`

	// CountryCode The country code for the account (ISO 3166-1 alpha-2)
	CountryCode string                    `json:"countryCode"`
	PayeeName   string                    `json:"payeeName"`
	PayeeType   PaymentRecipientPayeeType `json:"payeeType"`
}

// PaymentRecipientBankIdentifierType defines model for PaymentRecipient.BankIdentifierType.
type PaymentRecipientBankIdentifierType string

// PaymentRecipientPayeeType defines model for PaymentRecipient.PayeeType.
type PaymentRecipientPayeeType string

// PaymentStatusDetails Status details of a payment
type PaymentStatusDetails struct {
	Description   *PaymentStatusDetailsDescription   `json:"description,omitempty"`
	PaymentStatus *PaymentStatusDetailsPaymentStatus `json:"paymentStatus,omitempty"`
}

// PaymentStatusDetailsDescription defines model for PaymentStatusDetails.Description.
type PaymentStatusDetailsDescription string

// PaymentStatusDetailsPaymentStatus defines model for PaymentStatusDetails.PaymentStatus.
type PaymentStatusDetailsPaymentStatus string

// Payments List of payments
type Payments struct {
	Payments *[]PayeePayment `json:"payments,omitempty"`
}

// Receipt Transaction receipt
type Receipt struct {
	// CurrencyCode ISO-4217 3 character currency code
	CurrencyCode      *ReceiptCurrencyCode   `json:"currencyCode,omitempty"`
	FeedItemUid       *openapi_types.UUID    `json:"feedItemUid,omitempty"`
	Items             []ReceiptItem          `json:"items"`
	MetadataSource    ReceiptMetadataSource  `json:"metadataSource"`
	Notes             *[]ReceiptNote         `json:"notes,omitempty"`
	PaymentMethods    []ReceiptPaymentMethod `json:"paymentMethods"`
	ProviderName      *string                `json:"providerName,omitempty"`
	ReceiptIdentifier string                 `json:"receiptIdentifier"`

	// ReceiptMerchant Receipt Merchant Information
	ReceiptMerchant ReceiptMerchant     `json:"receiptMerchant"`
	ReceiptUid      *openapi_types.UUID `json:"receiptUid,omitempty"`
	TaxDetails      *[]ReceiptTaxDetail `json:"taxDetails,omitempty"`
	TotalAmount     float32             `json:"totalAmount"`
}

// ReceiptCurrencyCode ISO-4217 3 character currency code
type ReceiptCurrencyCode string

// ReceiptMetadataSource defines model for Receipt.MetadataSource.
type ReceiptMetadataSource string

// ReceiptCreationResponse Response after creating or updating a receipt
type ReceiptCreationResponse struct {
	// ReceiptUid The UUID of the created receipt. This UUID could be used for updating the receipt at a later point.
	ReceiptUid *openapi_types.UUID `json:"receiptUid,omitempty"`
}

// ReceiptItem defines model for ReceiptItem.
type ReceiptItem struct {
	Amount float32 `json:"amount"`

	// CreationTime The time the receipt item was created
	CreationTime   *time.Time          `json:"creationTime,omitempty"`
	Description    string              `json:"description"`
	Notes          *[]string           `json:"notes,omitempty"`
	Quantity       *int32              `json:"quantity,omitempty"`
	ReceiptItemUid *openapi_types.UUID `json:"receiptItemUid,omitempty"`
	SubItems       *[]ReceiptSubItem   `json:"subItems,omitempty"`
	Tax            float32             `json:"tax"`

	// Type Type of receipt item. It can be PURCHASE, SERVICE_FEE, GRATUITY or null
	Type *ReceiptItemType `json:"type,omitempty"`
	Url  *string          `json:"url,omitempty"`
}

// ReceiptItemType Type of receipt item. It can be PURCHASE, SERVICE_FEE, GRATUITY or null
type ReceiptItemType string

// ReceiptMerchant Receipt Merchant Information
type ReceiptMerchant struct {
	Address               *string             `json:"address,omitempty"`
	EmailAddress          *string             `json:"emailAddress,omitempty"`
	Identifier            *string             `json:"identifier,omitempty"`
	LogoUrl               *string             `json:"logoUrl,omitempty"`
	OrderCollectionNumber *string             `json:"orderCollectionNumber,omitempty"`
	ReceiptMerchantUid    *openapi_types.UUID `json:"receiptMerchantUid,omitempty"`
	TaxNumber             *string             `json:"taxNumber,omitempty"`
}

// ReceiptNote Note associated with a receipt
type ReceiptNote struct {
	Description string              `json:"description"`
	NoteUid     *openapi_types.UUID `json:"noteUid,omitempty"`
	Title       *string             `json:"title,omitempty"`
	Url         *string             `json:"url,omitempty"`
}

// ReceiptPaymentMethod defines model for ReceiptPaymentMethod.
type ReceiptPaymentMethod struct {
	Amount           float32             `json:"amount"`
	Description      string              `json:"description"`
	PaymentMethodUid *openapi_types.UUID `json:"paymentMethodUid,omitempty"`
}

// ReceiptSubItem defines model for ReceiptSubItem.
type ReceiptSubItem struct {
	Amount            *float32            `json:"amount,omitempty"`
	Description       string              `json:"description"`
	Notes             *[]string           `json:"notes,omitempty"`
	Quantity          *int32              `json:"quantity,omitempty"`
	ReceiptSubItemUid *openapi_types.UUID `json:"receiptSubItemUid,omitempty"`
}

// ReceiptTaxDetail Tax detail associated with a receipt
type ReceiptTaxDetail struct {
	// CreationTime The time the tax detail was created
	CreationTime        *time.Time                      `json:"creationTime,omitempty"`
	ReceiptTaxDetailUid *openapi_types.UUID             `json:"receiptTaxDetailUid,omitempty"`
	TaxCurrencyCode     ReceiptTaxDetailTaxCurrencyCode `json:"taxCurrencyCode"`
	TaxName             string                          `json:"taxName"`
	TaxValue            float32                         `json:"taxValue"`
}

// ReceiptTaxDetailTaxCurrencyCode defines model for ReceiptTaxDetail.TaxCurrencyCode.
type ReceiptTaxDetailTaxCurrencyCode string

// RecurrenceRule How often is the payment made
type RecurrenceRule struct {
	Count     *int32                   `json:"count,omitempty"`
	Days      *[]RecurrenceRuleDays    `json:"days,omitempty"`
	Frequency RecurrenceRuleFrequency  `json:"frequency"`
	Interval  *int32                   `json:"interval,omitempty"`
	MonthDay  *int32                   `json:"monthDay,omitempty"`
	MonthWeek *int32                   `json:"monthWeek,omitempty"`
	StartDate openapi_types.Date       `json:"startDate"`
	UntilDate *openapi_types.Date      `json:"untilDate,omitempty"`
	WeekStart *RecurrenceRuleWeekStart `json:"weekStart,omitempty"`
}

// RecurrenceRuleDays defines model for RecurrenceRule.Days.
type RecurrenceRuleDays string

// RecurrenceRuleFrequency defines model for RecurrenceRule.Frequency.
type RecurrenceRuleFrequency string

// RecurrenceRuleWeekStart defines model for RecurrenceRule.WeekStart.
type RecurrenceRuleWeekStart string

// RecurrenceRuleV2 The schedule definition
type RecurrenceRuleV2 struct {
	Count     *int32                    `json:"count"`
	Days      *[]RecurrenceRuleV2Days   `json:"days"`
	Frequency RecurrenceRuleV2Frequency `json:"frequency"`
	Interval  *int32                    `json:"interval"`
	StartDate openapi_types.Date        `json:"startDate"`
	UntilDate *openapi_types.Date       `json:"untilDate,omitempty"`
}

// RecurrenceRuleV2Days defines model for RecurrenceRuleV2.Days.
type RecurrenceRuleV2Days string

// RecurrenceRuleV2Frequency defines model for RecurrenceRuleV2.Frequency.
type RecurrenceRuleV2Frequency string

// RecurringCardPayment List of recurring card payments
type RecurringCardPayment struct {
	// AccountUid Unique identifier for the account
	AccountUid *openapi_types.UUID `json:"accountUid,omitempty"`

	// CounterPartyName Counterparty name
	CounterPartyName *string `json:"counterPartyName,omitempty"`

	// CounterPartyUid Unique identifier for the counterparty
	CounterPartyUid *openapi_types.UUID `json:"counterPartyUid,omitempty"`

	// LatestFeedItemUid Unique identifier for the latest feed item
	LatestFeedItemUid *openapi_types.UUID `json:"latestFeedItemUid,omitempty"`

	// LatestPaymentAmount Representation of money
	LatestPaymentAmount *CurrencyAndAmount `json:"latestPaymentAmount,omitempty"`

	// LatestPaymentDate Latest payment date
	LatestPaymentDate *time.Time `json:"latestPaymentDate,omitempty"`

	// MostRecentFeedItem Unique identifier for the feed item
	// Deprecated:
	MostRecentFeedItem *openapi_types.UUID `json:"mostRecentFeedItem,omitempty"`

	// MostRecentPaymentAmount Most recent payment amount
	// Deprecated:
	MostRecentPaymentAmount *Money `json:"mostRecentPaymentAmount,omitempty"`

	// MostRecentPaymentDate Most recent payment date
	// Deprecated:
	MostRecentPaymentDate *time.Time `json:"mostRecentPaymentDate,omitempty"`

	// RecurringPaymentUid Unique identifier for the recurring card payment
	RecurringPaymentUid *openapi_types.UUID `json:"recurringPaymentUid,omitempty"`

	// Status Recurring payment status
	Status *RecurringCardPaymentStatus `json:"status,omitempty"`
}

// RecurringCardPaymentStatus Recurring payment status
type RecurringCardPaymentStatus string

// RecurringCardPayments List of recurring card payments
type RecurringCardPayments struct {
	// RecurringPayments List of recurring card payments
	RecurringPayments *[]RecurringCardPayment `json:"recurringPayments,omitempty"`
}

// RoundUpGoalDetails defines model for RoundUpGoalDetails.
type RoundUpGoalDetails struct {
	ActivatedAt        time.Time          `json:"activatedAt"`
	ActivatedBy        openapi_types.UUID `json:"activatedBy"`
	PrimaryCategoryUid openapi_types.UUID `json:"primaryCategoryUid"`
	RoundUpGoalUid     openapi_types.UUID `json:"roundUpGoalUid"`
	RoundUpMultiplier  float32            `json:"roundUpMultiplier"`
}

// RoundUpGoalPayload defines model for RoundUpGoalPayload.
type RoundUpGoalPayload struct {
	// RoundUpGoalUid UID of the account category to send round-ups to
	RoundUpGoalUid openapi_types.UUID `json:"roundUpGoalUid"`

	// RoundUpMultiplier How much to multiply the rounded-up amount by before transfer. Must be an integer between 1 and 10 (inclusive)
	RoundUpMultiplier int32 `json:"roundUpMultiplier"`
}

// RoundUpGoalResponse defines model for RoundUpGoalResponse.
type RoundUpGoalResponse struct {
	Active             *bool               `json:"active,omitempty"`
	RoundUpGoal        *RoundUpGoalDetails `json:"roundUpGoal,omitempty"`
	RoundUpGoalDetails *RoundUpGoalDetails `json:"roundUpGoalDetails,omitempty"`
}

// SavingsGoalOrdered A goal defined by an account holder to hold savings
type SavingsGoalOrdered struct {
	// Name Name of the savings goal
	Name *string `json:"name,omitempty"`

	// SavedPercentage Percentage of target currently deposited in the savings goal
	SavedPercentage *int32 `json:"savedPercentage,omitempty"`

	// SavingsGoalUid Unique identifier of the savings goal
	SavingsGoalUid *openapi_types.UUID `json:"savingsGoalUid,omitempty"`

	// SortOrder Sort Order
	SortOrder *int32 `json:"sortOrder,omitempty"`

	// State The state of the savings goal
	State SavingsGoalOrderedState `json:"state"`

	// Target Representation of money
	Target *CurrencyAndAmount `json:"target,omitempty"`

	// TotalSaved Representation of money
	TotalSaved *CurrencyAndAmount `json:"totalSaved,omitempty"`
}

// SavingsGoalOrderedState The state of the savings goal
type SavingsGoalOrderedState string

// SavingsGoalPhotoV2 A photo associated to a savings goal
type SavingsGoalPhotoV2 struct {
	// Base64EncodedPhoto A text (base 64) encoded picture to associate with the savings goal
	Base64EncodedPhoto string `json:"base64EncodedPhoto"`
}

// SavingsGoalRequestV2 Request to create a new savings goal
type SavingsGoalRequestV2 struct {
	// Base64EncodedPhoto A text (base 64) encoded picture to associate with the savings goal
	Base64EncodedPhoto *string `json:"base64EncodedPhoto,omitempty"`

	// Currency ISO-4217 3 character currency code of the savings goal
	Currency string `json:"currency"`

	// Name Name of the savings goal
	Name string `json:"name"`

	// Target Representation of money
	Target *CurrencyAndAmount `json:"target,omitempty"`
}

// SavingsGoalTransferResponseV2 Response after attempting to make an immediate or recurring transfer into/out of a savings goal.
type SavingsGoalTransferResponseV2 struct {
	// Success True if the method completed successfully
	Success *bool `json:"success,omitempty"`

	// TransferUid Unique identifier for the transfer
	TransferUid openapi_types.UUID `json:"transferUid"`
}

// SavingsGoalV2 A goal defined by an account holder to hold savings
type SavingsGoalV2 struct {
	// Name Name of the savings goal
	Name *string `json:"name,omitempty"`

	// SavedPercentage Percentage of target currently deposited in the savings goal
	SavedPercentage *int32 `json:"savedPercentage,omitempty"`

	// SavingsGoalUid Unique identifier of the savings goal
	SavingsGoalUid *openapi_types.UUID `json:"savingsGoalUid,omitempty"`

	// State The state of the savings goal
	State SavingsGoalV2State `json:"state"`

	// Target Representation of money
	Target *CurrencyAndAmount `json:"target,omitempty"`

	// TotalSaved Representation of money
	TotalSaved *CurrencyAndAmount `json:"totalSaved,omitempty"`
}

// SavingsGoalV2State The state of the savings goal
type SavingsGoalV2State string

// SavingsGoalsV2 A list containing all savings goals for account holder
type SavingsGoalsV2 struct {
	SavingsGoalList []SavingsGoalV2 `json:"savingsGoalList"`
}

// ScheduledPayment Response object for scheduled payments queries
type ScheduledPayment struct {
	// AccountHolderUid Unique identifier for account holder
	AccountHolderUid *openapi_types.UUID `json:"accountHolderUid,omitempty"`

	// CategoryUid Unique identifier of the category from which the payment will be taken
	CategoryUid *openapi_types.UUID `json:"categoryUid,omitempty"`

	// EndDate Date when payment order ends
	EndDate *openapi_types.Date `json:"endDate,omitempty"`

	// NextDate Date of the next payment order
	NextDate *openapi_types.Date `json:"nextDate,omitempty"`

	// NextPaymentAmount Representation of money
	NextPaymentAmount *CurrencyAndAmount `json:"nextPaymentAmount,omitempty"`

	// PayeeAccountUid Unique identifier of the payee account
	PayeeAccountUid *openapi_types.UUID `json:"payeeAccountUid,omitempty"`

	// PayeeUid Unique identifier of the payee
	PayeeUid *openapi_types.UUID `json:"payeeUid,omitempty"`

	// PaymentOrderUid Unique identifier of the scheduled payment order
	PaymentOrderUid *openapi_types.UUID `json:"paymentOrderUid,omitempty"`

	// PaymentType Payment type
	PaymentType *ScheduledPaymentPaymentType `json:"paymentType,omitempty"`

	// RecipientName Recipient name
	RecipientName *string `json:"recipientName"`

	// RecurrenceRule How often is the payment made
	RecurrenceRule *RecurrenceRule `json:"recurrenceRule,omitempty"`

	// Reference Payment order reference
	Reference *string `json:"reference,omitempty"`

	// SpendingCategory The category of a transaction
	SpendingCategory *ScheduledPaymentSpendingCategory `json:"spendingCategory,omitempty"`

	// StartDate Date when the payment order has been created
	StartDate *openapi_types.Date `json:"startDate,omitempty"`
}

// ScheduledPaymentPaymentType Payment type
type ScheduledPaymentPaymentType string

// ScheduledPaymentSpendingCategory The category of a transaction
type ScheduledPaymentSpendingCategory string

// ScheduledPaymentResponse defines model for ScheduledPaymentResponse.
type ScheduledPaymentResponse struct {
	// ScheduledPayments List of scheduled payments for a payee account
	ScheduledPayments *[]ScheduledPayment `json:"scheduledPayments,omitempty"`
}

// ScheduledSavingsPaymentRequestV2 Request to create scheduled payment into a savings goal
type ScheduledSavingsPaymentRequestV2 struct {
	// Amount Representation of money
	Amount CurrencyAndAmount `json:"amount"`

	// RecurrenceRule The schedule definition
	RecurrenceRule RecurrenceRuleV2 `json:"recurrenceRule"`

	// TopUp If the payment is a top up or not
	TopUp *bool `json:"topUp,omitempty"`
}

// ScheduledSavingsPaymentV2 A transfer into a savings goal that can happen once in the future or have multiple payments with same frequency
type ScheduledSavingsPaymentV2 struct {
	// CurrencyAndAmount Representation of money
	CurrencyAndAmount CurrencyAndAmount `json:"currencyAndAmount"`

	// NextPaymentDate The next date the payment will be made on
	NextPaymentDate openapi_types.Date `json:"nextPaymentDate"`

	// RecurrenceRule The schedule definition
	RecurrenceRule RecurrenceRuleV2 `json:"recurrenceRule"`

	// TransferUid Unique identifier of the transfer
	TransferUid openapi_types.UUID `json:"transferUid"`
}

// SettleUpProfile defines model for SettleUpProfile.
type SettleUpProfile struct {
	// SettleUpLink Settle Up link
	SettleUpLink    string  `json:"settleUpLink"`
	StarlingPayLink *string `json:"starlingPayLink,omitempty"`

	// Status Status
	Status SettleUpProfileStatus `json:"status"`
}

// SettleUpProfileStatus Status
type SettleUpProfileStatus string

// SignedCurrencyAndAmount defines model for SignedCurrencyAndAmount.
type SignedCurrencyAndAmount struct {
	// Currency ISO-4217 3 character currency code
	Currency string `json:"currency"`

	// MinorUnits Amount in the minor units of the given currency; eg pence in GBP, cents in EUR
	MinorUnits int64 `json:"minorUnits"`
}

// SoleTrader Response object contain sole trader business details
type SoleTrader struct {
	// BusinessCategory Business category
	BusinessCategory *SoleTraderBusinessCategory `json:"businessCategory,omitempty"`

	// BusinessCategoryDescriptions Business category description
	BusinessCategoryDescriptions *[]CategoryDescription `json:"businessCategoryDescriptions,omitempty"`

	// BusinessSubCategory Business subcategory
	BusinessSubCategory *SoleTraderBusinessSubCategory `json:"businessSubCategory,omitempty"`

	// BusinessSubCategoryDescriptions Business category description
	BusinessSubCategoryDescriptions *[]CategoryDescription `json:"businessSubCategoryDescriptions,omitempty"`

	// TradingAsName Trading as name
	TradingAsName *string `json:"tradingAsName,omitempty"`
}

// SoleTraderBusinessCategory Business category
type SoleTraderBusinessCategory string

// SoleTraderBusinessSubCategory Business subcategory
type SoleTraderBusinessSubCategory string

// SpacePhoto A photo associated to a space
type SpacePhoto struct {
	// Base64EncodedPhoto A text (base 64) encoded picture to associate with the space
	Base64EncodedPhoto string `json:"base64EncodedPhoto"`
}

// Spaces A list containing all spaces for an account holder
type Spaces struct {
	SavingsGoals   []SavingsGoalOrdered `json:"savingsGoals"`
	SpendingSpaces []SpendingSpace      `json:"spendingSpaces"`
}

// SpendingCategoryBreakdown Spending insights entry for a spending category
type SpendingCategoryBreakdown struct {
	Currency *SpendingCategoryBreakdownCurrency `json:"currency,omitempty"`

	// NetDirection Was this an inbound or outbound transaction
	NetDirection *SpendingCategoryBreakdownNetDirection `json:"netDirection,omitempty"`
	NetSpend     *float32                               `json:"netSpend,omitempty"`

	// Percentage Percentage that the netSpend makes up of the sum of the netSpends of breakdowns in the same period with the same netDirection
	Percentage *float32 `json:"percentage,omitempty"`

	// SpendingCategory The category of a transaction
	SpendingCategory *SpendingCategoryBreakdownSpendingCategory `json:"spendingCategory,omitempty"`

	// TotalReceived Amount received under this spending category
	TotalReceived *float32 `json:"totalReceived,omitempty"`

	// TotalSpent Amount spent under this spending category
	TotalSpent       *float32 `json:"totalSpent,omitempty"`
	TransactionCount *int64   `json:"transactionCount,omitempty"`
}

// SpendingCategoryBreakdownCurrency defines model for SpendingCategoryBreakdown.Currency.
type SpendingCategoryBreakdownCurrency string

// SpendingCategoryBreakdownNetDirection Was this an inbound or outbound transaction
type SpendingCategoryBreakdownNetDirection string

// SpendingCategoryBreakdownSpendingCategory The category of a transaction
type SpendingCategoryBreakdownSpendingCategory string

// SpendingCategorySummary Spending insights for a month, grouped by spending category
type SpendingCategorySummary struct {
	Breakdown *[]SpendingCategoryBreakdown     `json:"breakdown,omitempty"`
	Currency  *SpendingCategorySummaryCurrency `json:"currency,omitempty"`

	// Direction Was this an inbound or outbound transaction
	Direction *SpendingCategorySummaryDirection `json:"direction,omitempty"`

	// NetSpend |totalReceived - totalSpent|, i.e. how much the balance has changed in the month
	NetSpend *float32 `json:"netSpend,omitempty"`
	Period   *string  `json:"period,omitempty"`

	// TotalReceived Amount received to the account in the month
	TotalReceived *float32 `json:"totalReceived,omitempty"`

	// TotalReceivedNetIn Sum of netSpend for spending categories whose net direction for the month is IN
	TotalReceivedNetIn *float32 `json:"totalReceivedNetIn,omitempty"`

	// TotalSpendNetOut Sum of netSpend for spending categories whose net direction for the month is OUT
	TotalSpendNetOut *float32 `json:"totalSpendNetOut,omitempty"`

	// TotalSpent Amount spent from the account in the month
	TotalSpent *float32 `json:"totalSpent,omitempty"`
}

// SpendingCategorySummaryCurrency defines model for SpendingCategorySummary.Currency.
type SpendingCategorySummaryCurrency string

// SpendingCategorySummaryDirection Was this an inbound or outbound transaction
type SpendingCategorySummaryDirection string

// SpendingCounterPartyBreakdown Spending insights entry for a counter party
type SpendingCounterPartyBreakdown struct {
	CounterPartyName *string `json:"counterPartyName,omitempty"`

	// CounterPartyType The type of counter party for a transaction
	CounterPartyType *SpendingCounterPartyBreakdownCounterPartyType `json:"counterPartyType,omitempty"`
	CounterPartyUid  *openapi_types.UUID                            `json:"counterPartyUid,omitempty"`
	Currency         *SpendingCounterPartyBreakdownCurrency         `json:"currency,omitempty"`

	// NetDirection Was this an inbound or outbound transaction
	NetDirection *SpendingCounterPartyBreakdownNetDirection `json:"netDirection,omitempty"`
	NetSpend     *float32                                   `json:"netSpend,omitempty"`

	// Percentage Percentage that the netSpend makes up of the sum of the netSpends of breakdowns in the same period with the same netDirection
	Percentage *float32 `json:"percentage,omitempty"`

	// TotalReceived Amount received from this counter party
	TotalReceived *float32 `json:"totalReceived,omitempty"`

	// TotalSpent Amount spent at/sent to this counter party
	TotalSpent       *float32 `json:"totalSpent,omitempty"`
	TransactionCount *int64   `json:"transactionCount,omitempty"`
}

// SpendingCounterPartyBreakdownCounterPartyType The type of counter party for a transaction
type SpendingCounterPartyBreakdownCounterPartyType string

// SpendingCounterPartyBreakdownCurrency defines model for SpendingCounterPartyBreakdown.Currency.
type SpendingCounterPartyBreakdownCurrency string

// SpendingCounterPartyBreakdownNetDirection Was this an inbound or outbound transaction
type SpendingCounterPartyBreakdownNetDirection string

// SpendingCounterPartySummary Spending insights for a month, grouped by counter party
type SpendingCounterPartySummary struct {
	Breakdown *[]SpendingCounterPartyBreakdown     `json:"breakdown,omitempty"`
	Currency  *SpendingCounterPartySummaryCurrency `json:"currency,omitempty"`

	// Direction Was this an inbound or outbound transaction
	Direction *SpendingCounterPartySummaryDirection `json:"direction,omitempty"`

	// NetSpend |totalReceived - totalSpent|, i.e. how much the balance has changed in the month
	NetSpend *float32 `json:"netSpend,omitempty"`
	Period   *string  `json:"period,omitempty"`

	// TotalReceived Amount received to the account in the month
	TotalReceived *float32 `json:"totalReceived,omitempty"`

	// TotalReceivedNetIn Sum of netSpend for counter parties whose net direction for the month is IN
	TotalReceivedNetIn *float32 `json:"totalReceivedNetIn,omitempty"`

	// TotalSpendNetOut Sum of netSpend for counter parties whose net direction for the month is OUT
	TotalSpendNetOut *float32 `json:"totalSpendNetOut,omitempty"`

	// TotalSpent Amount spent from the account in the month
	TotalSpent *float32 `json:"totalSpent,omitempty"`
}

// SpendingCounterPartySummaryCurrency defines model for SpendingCounterPartySummary.Currency.
type SpendingCounterPartySummaryCurrency string

// SpendingCounterPartySummaryDirection Was this an inbound or outbound transaction
type SpendingCounterPartySummaryDirection string

// SpendingSpace defines model for SpendingSpace.
type SpendingSpace struct {
	// Balance Representation of money
	Balance CurrencyAndAmount `json:"balance"`

	// CardAssociationUid Card Association Uid
	CardAssociationUid openapi_types.UUID `json:"cardAssociationUid"`

	// Name Name of the space
	Name string `json:"name"`

	// SortOrder Sort Order
	SortOrder *int32 `json:"sortOrder,omitempty"`

	// SpaceUid SpendingSpaceUid
	SpaceUid openapi_types.UUID `json:"spaceUid"`

	// SpendingSpaceType Spending Space Type
	SpendingSpaceType SpendingSpaceSpendingSpaceType `json:"spendingSpaceType"`

	// State The state of the spending space
	State SpendingSpaceState  `json:"state"`
	Uid   *openapi_types.UUID `json:"uid,omitempty"`
}

// SpendingSpaceSpendingSpaceType Spending Space Type
type SpendingSpaceSpendingSpaceType string

// SpendingSpaceState The state of the spending space
type SpendingSpaceState string

// StandingOrder Response object for standing order queries
type StandingOrder struct {
	// Amount Representation of money
	Amount *CurrencyAndAmount `json:"amount,omitempty"`

	// CancelledAt The time the standing order is cancelled at
	CancelledAt *time.Time `json:"cancelledAt,omitempty"`

	// CategoryUid The category ID of the category from which the payment will be sent
	CategoryUid *openapi_types.UUID `json:"categoryUid,omitempty"`

	// NextDate Date on which the next standing order payment will be made
	NextDate *openapi_types.Date `json:"nextDate,omitempty"`

	// PayeeAccountUid The account ID of the payee account receiving the payments
	PayeeAccountUid *openapi_types.UUID `json:"payeeAccountUid,omitempty"`

	// PayeeUid The ID of the payee receiving the payments
	PayeeUid *openapi_types.UUID `json:"payeeUid,omitempty"`

	// PaymentOrderUid UID of this payment order
	PaymentOrderUid *openapi_types.UUID `json:"paymentOrderUid,omitempty"`

	// Reference The reference set by the payer
	Reference *string `json:"reference,omitempty"`

	// SpendingCategory The category of a transaction
	SpendingCategory *StandingOrderSpendingCategory `json:"spendingCategory"`

	// StandingOrderRecurrence Recurrence rules of a standing order
	StandingOrderRecurrence *StandingOrderRecurrence `json:"standingOrderRecurrence,omitempty"`

	// UpdatedAt The time the standing order is updated at
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// StandingOrderSpendingCategory The category of a transaction
type StandingOrderSpendingCategory string

// StandingOrderRecurrence Recurrence rules of a standing order
type StandingOrderRecurrence struct {
	// Count Number of payments that should be made before standing order is stopped
	Count *int32 `json:"count"`

	// Frequency Frequency of which payments should be made
	Frequency StandingOrderRecurrenceFrequency `json:"frequency"`

	// Interval Interval of specified frequency on which payments should be made
	Interval *int32 `json:"interval"`

	// StartDate Date that the first standing order payment should be made
	StartDate openapi_types.Date `json:"startDate"`

	// UntilDate Date on which to stop standing order
	UntilDate *openapi_types.Date `json:"untilDate,omitempty"`
}

// StandingOrderRecurrenceFrequency Frequency of which payments should be made
type StandingOrderRecurrenceFrequency string

// StandingOrdersResponse List of standing orders associated to an account holder
type StandingOrdersResponse struct {
	StandingOrders *[]StandingOrder `json:"standingOrders,omitempty"`
}

// TopUpRequestV2 Request to make an immediate transfer into a savings goal
type TopUpRequestV2 struct {
	// Amount Representation of money
	Amount CurrencyAndAmount `json:"amount"`
}

// UpdateEmailRequest defines model for UpdateEmailRequest.
type UpdateEmailRequest struct {
	// Email The new email address for the account holder
	Email string `json:"email"`
}

// UpdateSpendingCategory defines model for UpdateSpendingCategory.
type UpdateSpendingCategory struct {
	PermanentSpendingCategoryUpdate          *bool `json:"permanentSpendingCategoryUpdate,omitempty"`
	PreviousSpendingCategoryReferencesUpdate *bool `json:"previousSpendingCategoryReferencesUpdate,omitempty"`

	// SpendingCategory The category of a transaction
	SpendingCategory UpdateSpendingCategorySpendingCategory `json:"spendingCategory"`
}

// UpdateSpendingCategorySpendingCategory The category of a transaction
type UpdateSpendingCategorySpendingCategory string

// UpdateStandingOrderRequest Request to update a standing order
type UpdateStandingOrderRequest struct {
	// Amount Representation of money
	Amount CurrencyAndAmount `json:"amount"`

	// PaymentOrderUid UID of this payment order
	PaymentOrderUid openapi_types.UUID `json:"paymentOrderUid"`

	// Reference The payment reference
	Reference string `json:"reference"`

	// SpendingCategory The category of a transaction
	SpendingCategory *UpdateStandingOrderRequestSpendingCategory `json:"spendingCategory,omitempty"`

	// StandingOrderRecurrence Recurrence rules of a standing order
	StandingOrderRecurrence StandingOrderRecurrence `json:"standingOrderRecurrence"`
}

// UpdateStandingOrderRequestSpendingCategory The category of a transaction
type UpdateStandingOrderRequestSpendingCategory string

// UpdateStandingOrderResult after attempting to update a standing order
type UpdateStandingOrderResult struct {
	// PaymentOrderUid The uid of the updated payment order created by the standing order. N.B. this will not be the uid of any payment which is created by the standing order. If the recurrence rule is updated, this payment order uid will be different from the original one
	PaymentOrderUid *openapi_types.UUID `json:"paymentOrderUid,omitempty"`
}

// UserNoteWrapper defines model for UserNoteWrapper.
type UserNoteWrapper struct {
	UserNote string `json:"userNote"`
}

// WithdrawalRequestV2 Request to withdraw money from a savings goal.
type WithdrawalRequestV2 struct {
	// Amount Representation of money
	Amount CurrencyAndAmount `json:"amount"`
}

// UpdateProfileImageParams defines parameters for UpdateProfileImage.
type UpdateProfileImageParams struct {
	ContentType string `json:"Content-Type"`
}

// GetConfirmationOfFundsParams defines parameters for GetConfirmationOfFunds.
type GetConfirmationOfFundsParams struct {
	// TargetAmountInMinorUnits Target amount in minor units
	TargetAmountInMinorUnits int64 `form:"targetAmountInMinorUnits" json:"targetAmountInMinorUnits"`
}

// QuerySpendingInsightsByCounterpartyParams defines parameters for QuerySpendingInsightsByCounterparty.
type QuerySpendingInsightsByCounterpartyParams struct {
	// Year Year
	Year string `form:"year" json:"year"`

	// Month Month
	Month QuerySpendingInsightsByCounterpartyParamsMonth `form:"month" json:"month"`

	// SummaryStartPeriodInclusive summaryStartPeriodInclusive
	SummaryStartPeriodInclusive *time.Time `form:"summaryStartPeriodInclusive,omitempty" json:"summaryStartPeriodInclusive,omitempty"`

	// SummaryEndPeriodExclusive summaryEndPeriodExclusive
	SummaryEndPeriodExclusive *time.Time `form:"summaryEndPeriodExclusive,omitempty" json:"summaryEndPeriodExclusive,omitempty"`
}

// QuerySpendingInsightsByCounterpartyParamsMonth defines parameters for QuerySpendingInsightsByCounterparty.
type QuerySpendingInsightsByCounterpartyParamsMonth string

// QuerySpendingInsightsBySpendingCategoryParams defines parameters for QuerySpendingInsightsBySpendingCategory.
type QuerySpendingInsightsBySpendingCategoryParams struct {
	// Year Year
	Year string `form:"year" json:"year"`

	// Month Month
	Month QuerySpendingInsightsBySpendingCategoryParamsMonth `form:"month" json:"month"`

	// SummaryStartPeriodInclusive summaryStartPeriodInclusive
	SummaryStartPeriodInclusive *time.Time `form:"summaryStartPeriodInclusive,omitempty" json:"summaryStartPeriodInclusive,omitempty"`

	// SummaryEndPeriodExclusive summaryEndPeriodExclusive
	SummaryEndPeriodExclusive *time.Time `form:"summaryEndPeriodExclusive,omitempty" json:"summaryEndPeriodExclusive,omitempty"`
}

// QuerySpendingInsightsBySpendingCategoryParamsMonth defines parameters for QuerySpendingInsightsBySpendingCategory.
type QuerySpendingInsightsBySpendingCategoryParamsMonth string

// DownloadPDFStatementParams defines parameters for DownloadPDFStatement.
type DownloadPDFStatementParams struct {
	YearMonth string `form:"yearMonth" json:"yearMonth"`
}

// DownloadPDFStatementForDateRangeParams defines parameters for DownloadPDFStatementForDateRange.
type DownloadPDFStatementForDateRangeParams struct {
	Start openapi_types.Date  `form:"start" json:"start"`
	End   *openapi_types.Date `form:"end,omitempty" json:"end,omitempty"`
}

// ListPaymentsForMandateParams defines parameters for ListPaymentsForMandate.
type ListPaymentsForMandateParams struct {
	// Since Start date for a transaction history
	Since openapi_types.Date `form:"since" json:"since"`
}

// QueryFeedItemsParams defines parameters for QueryFeedItems.
type QueryFeedItemsParams struct {
	// ChangesSince Items which have changed since
	ChangesSince time.Time `form:"changesSince" json:"changesSince"`
}

// QueryFeedItemsByCategoryWithTransactionTimesBetweenParams defines parameters for QueryFeedItemsByCategoryWithTransactionTimesBetween.
type QueryFeedItemsByCategoryWithTransactionTimesBetweenParams struct {
	// MinTransactionTimestamp Minimum transaction timestamp
	MinTransactionTimestamp time.Time `form:"minTransactionTimestamp" json:"minTransactionTimestamp"`

	// MaxTransactionTimestamp Maximum transaction timestamp
	MaxTransactionTimestamp time.Time `form:"maxTransactionTimestamp" json:"maxTransactionTimestamp"`
}

// AttachToFeedItemParams defines parameters for AttachToFeedItem.
type AttachToFeedItemParams struct {
	ContentType *string `json:"Content-Type,omitempty"`
}

// QueryFeedItemsWithTransactionTimesBetweenParams defines parameters for QueryFeedItemsWithTransactionTimesBetween.
type QueryFeedItemsWithTransactionTimesBetweenParams struct {
	// MinTransactionTimestamp Minimum transaction timestamp
	MinTransactionTimestamp time.Time `form:"minTransactionTimestamp" json:"minTransactionTimestamp"`

	// MaxTransactionTimestamp Maximum transaction timestamp
	MaxTransactionTimestamp time.Time `form:"maxTransactionTimestamp" json:"maxTransactionTimestamp"`
}

// ListPaymentsForPayeeAccountParams defines parameters for ListPaymentsForPayeeAccount.
type ListPaymentsForPayeeAccountParams struct {
	// Since Start date for a transaction history
	Since openapi_types.Date `form:"since" json:"since"`
}

// ListNextPaymentDatesParams defines parameters for ListNextPaymentDates.
type ListNextPaymentDatesParams struct {
	// Count Number of next payment dates to retrieve, between 1 and 100. If count is greater than the number of future payments all future payments will be returned. Defaults to 10.
	Count *int32 `form:"count,omitempty" json:"count,omitempty"`
}

// UpdateEmailJSONRequestBody defines body for UpdateEmail for application/json ContentType.
type UpdateEmailJSONRequestBody = UpdateEmailRequest

// CreateSavingsGoalJSONRequestBody defines body for CreateSavingsGoal for application/json ContentType.
type CreateSavingsGoalJSONRequestBody = SavingsGoalRequestV2

// UpdateSavingsGoalJSONRequestBody defines body for UpdateSavingsGoal for application/json ContentType.
type UpdateSavingsGoalJSONRequestBody = SavingsGoalRequestV2

// AddMoneyJSONRequestBody defines body for AddMoney for application/json ContentType.
type AddMoneyJSONRequestBody = TopUpRequestV2

// CreateOrUpdateRecurringTransferJSONRequestBody defines body for CreateOrUpdateRecurringTransfer for application/json ContentType.
type CreateOrUpdateRecurringTransferJSONRequestBody = ScheduledSavingsPaymentRequestV2

// WithdrawMoneyJSONRequestBody defines body for WithdrawMoney for application/json ContentType.
type WithdrawMoneyJSONRequestBody = WithdrawalRequestV2

// UpdateCurrentAddressJSONRequestBody defines body for UpdateCurrentAddress for application/json ContentType.
type UpdateCurrentAddressJSONRequestBody = AddressUpdateRequest

// EnableAtmJSONRequestBody defines body for EnableAtm for application/json ContentType.
type EnableAtmJSONRequestBody = Enabling

// EnableCurrencySwitchJSONRequestBody defines body for EnableCurrencySwitch for application/json ContentType.
type EnableCurrencySwitchJSONRequestBody = CurrencyFlag

// EnableCardJSONRequestBody defines body for EnableCard for application/json ContentType.
type EnableCardJSONRequestBody = Enabling

// EnableGamblingPaymentsJSONRequestBody defines body for EnableGamblingPayments for application/json ContentType.
type EnableGamblingPaymentsJSONRequestBody = Enabling

// EnableMagStripePaymentJSONRequestBody defines body for EnableMagStripePayment for application/json ContentType.
type EnableMagStripePaymentJSONRequestBody = Enabling

// EnableMobileWalletJSONRequestBody defines body for EnableMobileWallet for application/json ContentType.
type EnableMobileWalletJSONRequestBody = Enabling

// EnableOnlinePaymentsJSONRequestBody defines body for EnableOnlinePayments for application/json ContentType.
type EnableOnlinePaymentsJSONRequestBody = Enabling

// EnablePosJSONRequestBody defines body for EnablePos for application/json ContentType.
type EnablePosJSONRequestBody = Enabling

// CreateOrUpdateReceiptJSONRequestBody defines body for CreateOrUpdateReceipt for application/json ContentType.
type CreateOrUpdateReceiptJSONRequestBody = Receipt

// ChangeTransactionCategoryJSONRequestBody defines body for ChangeTransactionCategory for application/json ContentType.
type ChangeTransactionCategoryJSONRequestBody = UpdateSpendingCategory

// UpdateUserNoteJSONRequestBody defines body for UpdateUserNote for application/json ContentType.
type UpdateUserNoteJSONRequestBody = UserNoteWrapper

// ActivateRoundUpGoalJSONRequestBody defines body for ActivateRoundUpGoal for application/json ContentType.
type ActivateRoundUpGoalJSONRequestBody = RoundUpGoalPayload

// CreatePayeeJSONRequestBody defines body for CreatePayee for application/json ContentType.
type CreatePayeeJSONRequestBody = PayeeCreationRequest

// UpdatePayeeJSONRequestBody defines body for UpdatePayee for application/json ContentType.
type UpdatePayeeJSONRequestBody = PayeeCreationRequest

// CreatePayeeAccountJSONRequestBody defines body for CreatePayeeAccount for application/json ContentType.
type CreatePayeeAccountJSONRequestBody = PayeeAccountCreationRequest

// MakeLocalPaymentJSONRequestBody defines body for MakeLocalPayment for application/json ContentType.
type MakeLocalPaymentJSONRequestBody = InstructLocalPaymentRequest

// CreateStandingOrderJSONRequestBody defines body for CreateStandingOrder for application/json ContentType.
type CreateStandingOrderJSONRequestBody = CreateStandingOrderRequest

// UpdateStandingOrderJSONRequestBody defines body for UpdateStandingOrder for application/json ContentType.
type UpdateStandingOrderJSONRequestBody = UpdateStandingOrderRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CloseAccountHolder request
	CloseAccountHolder(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountHolder request
	GetAccountHolder(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBusiness request
	GetBusiness(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCorrespondenceAddress request
	GetCorrespondenceAddress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRegisteredAddress request
	GetRegisteredAddress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIndividual request
	GetIndividual(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEmailWithBody request with any body
	UpdateEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateEmail(ctx context.Context, body UpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJointAccount request
	GetJointAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountHolderName request
	GetAccountHolderName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSoleTrader request
	GetSoleTrader(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProfileImage request
	DeleteProfileImage(ctx context.Context, accountHolderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadProfileImage request
	DownloadProfileImage(ctx context.Context, accountHolderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProfileImageWithBody request with any body
	UpdateProfileImageWithBody(ctx context.Context, accountHolderUid openapi_types.UUID, params *UpdateProfileImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSavingsGoals request
	GetSavingsGoals(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSavingsGoalWithBody request with any body
	CreateSavingsGoalWithBody(ctx context.Context, accountUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSavingsGoal(ctx context.Context, accountUid openapi_types.UUID, body CreateSavingsGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSavingsGoal request
	DeleteSavingsGoal(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSavingsGoal request
	GetSavingsGoal(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSavingsGoalWithBody request with any body
	UpdateSavingsGoalWithBody(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSavingsGoal(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, body UpdateSavingsGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMoneyWithBody request with any body
	AddMoneyWithBody(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMoney(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, body AddMoneyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSavingsGoalPhoto request
	GetSavingsGoalPhoto(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecurringTransfer request
	DeleteRecurringTransfer(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRecurringTransfer request
	GetRecurringTransfer(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateRecurringTransferWithBody request with any body
	CreateOrUpdateRecurringTransferWithBody(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateRecurringTransfer(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, body CreateOrUpdateRecurringTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WithdrawMoneyWithBody request with any body
	WithdrawMoneyWithBody(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WithdrawMoney(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, body WithdrawMoneyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpaces request
	GetSpaces(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpendingSpace request
	GetSpendingSpace(ctx context.Context, accountUid openapi_types.UUID, spaceUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSpacePhoto request
	GetSpacePhoto(ctx context.Context, accountUid openapi_types.UUID, spaceUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccounts request
	GetAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountBalance request
	GetAccountBalance(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfirmationOfFunds request
	GetConfirmationOfFunds(ctx context.Context, accountUid openapi_types.UUID, params *GetConfirmationOfFundsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountIdentifiers request
	GetAccountIdentifiers(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRecurringPayments request
	ListRecurringPayments(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySpendingInsightsByCounterparty request
	QuerySpendingInsightsByCounterparty(ctx context.Context, accountUid openapi_types.UUID, params *QuerySpendingInsightsByCounterpartyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QuerySpendingInsightsBySpendingCategory request
	QuerySpendingInsightsBySpendingCategory(ctx context.Context, accountUid openapi_types.UUID, params *QuerySpendingInsightsBySpendingCategoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AvailablePeriods request
	AvailablePeriods(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadPDFStatement request
	DownloadPDFStatement(ctx context.Context, accountUid openapi_types.UUID, params *DownloadPDFStatementParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadPDFStatementForDateRange request
	DownloadPDFStatementForDateRange(ctx context.Context, accountUid openapi_types.UUID, params *DownloadPDFStatementForDateRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAddresses request
	GetAddresses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCurrentAddressWithBody request with any body
	UpdateCurrentAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateCurrentAddress(ctx context.Context, body UpdateCurrentAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCards request
	ListCards(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableAtmWithBody request with any body
	EnableAtmWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnableAtm(ctx context.Context, cardUid openapi_types.UUID, body EnableAtmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableCurrencySwitchWithBody request with any body
	EnableCurrencySwitchWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnableCurrencySwitch(ctx context.Context, cardUid openapi_types.UUID, body EnableCurrencySwitchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableCardWithBody request with any body
	EnableCardWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnableCard(ctx context.Context, cardUid openapi_types.UUID, body EnableCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableGamblingPaymentsWithBody request with any body
	EnableGamblingPaymentsWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnableGamblingPayments(ctx context.Context, cardUid openapi_types.UUID, body EnableGamblingPaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableMagStripePaymentWithBody request with any body
	EnableMagStripePaymentWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnableMagStripePayment(ctx context.Context, cardUid openapi_types.UUID, body EnableMagStripePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableMobileWalletWithBody request with any body
	EnableMobileWalletWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnableMobileWallet(ctx context.Context, cardUid openapi_types.UUID, body EnableMobileWalletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnableOnlinePaymentsWithBody request with any body
	EnableOnlinePaymentsWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnableOnlinePayments(ctx context.Context, cardUid openapi_types.UUID, body EnableOnlinePaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EnablePosWithBody request with any body
	EnablePosWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EnablePos(ctx context.Context, cardUid openapi_types.UUID, body EnablePosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMandates request
	ListMandates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMandatesForAccount request
	ListMandatesForAccount(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelMandate request
	CancelMandate(ctx context.Context, mandateUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMandate request
	GetMandate(ctx context.Context, mandateUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPaymentsForMandate request
	ListPaymentsForMandate(ctx context.Context, mandateUid openapi_types.UUID, params *ListPaymentsForMandateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryFeedItems request
	QueryFeedItems(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, params *QueryFeedItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryFeedItemsByCategoryWithTransactionTimesBetween request
	QueryFeedItemsByCategoryWithTransactionTimesBetween(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, params *QueryFeedItemsByCategoryWithTransactionTimesBetweenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeedItem request
	GetFeedItem(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeedItemAttachments request
	GetFeedItemAttachments(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AttachToFeedItemWithBody request with any body
	AttachToFeedItemWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, params *AttachToFeedItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DownloadFeedItemAttachment request
	DownloadFeedItemAttachment(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, feedItemAttachmentUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMastercardFeedItem request
	GetMastercardFeedItem(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReceipt request
	GetReceipt(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrUpdateReceiptWithBody request with any body
	CreateOrUpdateReceiptWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrUpdateReceipt(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body CreateOrUpdateReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReceipts request
	GetReceipts(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ChangeTransactionCategoryWithBody request with any body
	ChangeTransactionCategoryWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ChangeTransactionCategory(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body ChangeTransactionCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUserNoteWithBody request with any body
	UpdateUserNoteWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUserNote(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body UpdateUserNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// StopRoundUpGoal request
	StopRoundUpGoal(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchRoundUpGoal request
	FetchRoundUpGoal(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActivateRoundUpGoalWithBody request with any body
	ActivateRoundUpGoalWithBody(ctx context.Context, accountUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActivateRoundUpGoal(ctx context.Context, accountUid openapi_types.UUID, body ActivateRoundUpGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// QueryFeedItemsWithTransactionTimesBetween request
	QueryFeedItemsWithTransactionTimesBetween(ctx context.Context, accountUid openapi_types.UUID, params *QueryFeedItemsWithTransactionTimesBetweenParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAuthorisingIndividual request
	GetAuthorisingIndividual(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogoutIndividual request
	LogoutIndividual(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokenIdentity request
	GetTokenIdentity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayees request
	GetPayees(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePayeeWithBody request with any body
	CreatePayeeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePayee(ctx context.Context, body CreatePayeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePayee request
	DeletePayee(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPayee request
	GetPayee(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePayeeWithBody request with any body
	UpdatePayeeWithBody(ctx context.Context, payeeUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePayee(ctx context.Context, payeeUid openapi_types.UUID, body UpdatePayeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePayeeAccountWithBody request with any body
	CreatePayeeAccountWithBody(ctx context.Context, payeeUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreatePayeeAccount(ctx context.Context, payeeUid openapi_types.UUID, body CreatePayeeAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePayeeAccount request
	DeletePayeeAccount(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPaymentsForPayeeAccount request
	ListPaymentsForPayeeAccount(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, params *ListPaymentsForPayeeAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPaymentOrdersForAccount request
	ListPaymentOrdersForAccount(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ServePayeeImageFile request
	ServePayeeImageFile(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// MakeLocalPaymentWithBody request with any body
	MakeLocalPaymentWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	MakeLocalPayment(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, body MakeLocalPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListStandingOrders request
	ListStandingOrders(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStandingOrderWithBody request with any body
	CreateStandingOrderWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateStandingOrder(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, body CreateStandingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelStandingOrder request
	CancelStandingOrder(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStandingOrder request
	GetStandingOrder(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStandingOrderWithBody request with any body
	UpdateStandingOrderWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateStandingOrder(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, body UpdateStandingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNextPaymentDates request
	ListNextPaymentDates(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, params *ListNextPaymentDatesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentOrder request
	GetPaymentOrder(ctx context.Context, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentOrderPayments request
	GetPaymentOrderPayments(ctx context.Context, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSettleUpProfile request
	GetSettleUpProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CloseAccountHolder(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCloseAccountHolderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountHolder(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountHolderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBusiness(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBusinessRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCorrespondenceAddress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCorrespondenceAddressRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRegisteredAddress(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRegisteredAddressRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIndividual(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIndividualRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEmail(ctx context.Context, body UpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJointAccount(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJointAccountRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountHolderName(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountHolderNameRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSoleTrader(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSoleTraderRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProfileImage(ctx context.Context, accountHolderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProfileImageRequest(c.Server, accountHolderUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadProfileImage(ctx context.Context, accountHolderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadProfileImageRequest(c.Server, accountHolderUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProfileImageWithBody(ctx context.Context, accountHolderUid openapi_types.UUID, params *UpdateProfileImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProfileImageRequestWithBody(c.Server, accountHolderUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSavingsGoals(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSavingsGoalsRequest(c.Server, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSavingsGoalWithBody(ctx context.Context, accountUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSavingsGoalRequestWithBody(c.Server, accountUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSavingsGoal(ctx context.Context, accountUid openapi_types.UUID, body CreateSavingsGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSavingsGoalRequest(c.Server, accountUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSavingsGoal(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSavingsGoalRequest(c.Server, accountUid, savingsGoalUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSavingsGoal(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSavingsGoalRequest(c.Server, accountUid, savingsGoalUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSavingsGoalWithBody(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSavingsGoalRequestWithBody(c.Server, accountUid, savingsGoalUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSavingsGoal(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, body UpdateSavingsGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSavingsGoalRequest(c.Server, accountUid, savingsGoalUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMoneyWithBody(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMoneyRequestWithBody(c.Server, accountUid, savingsGoalUid, transferUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMoney(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, body AddMoneyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMoneyRequest(c.Server, accountUid, savingsGoalUid, transferUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSavingsGoalPhoto(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSavingsGoalPhotoRequest(c.Server, accountUid, savingsGoalUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecurringTransfer(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecurringTransferRequest(c.Server, accountUid, savingsGoalUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRecurringTransfer(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRecurringTransferRequest(c.Server, accountUid, savingsGoalUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateRecurringTransferWithBody(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateRecurringTransferRequestWithBody(c.Server, accountUid, savingsGoalUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateRecurringTransfer(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, body CreateOrUpdateRecurringTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateRecurringTransferRequest(c.Server, accountUid, savingsGoalUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WithdrawMoneyWithBody(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWithdrawMoneyRequestWithBody(c.Server, accountUid, savingsGoalUid, transferUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WithdrawMoney(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, body WithdrawMoneyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWithdrawMoneyRequest(c.Server, accountUid, savingsGoalUid, transferUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpaces(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpacesRequest(c.Server, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpendingSpace(ctx context.Context, accountUid openapi_types.UUID, spaceUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpendingSpaceRequest(c.Server, accountUid, spaceUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSpacePhoto(ctx context.Context, accountUid openapi_types.UUID, spaceUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSpacePhotoRequest(c.Server, accountUid, spaceUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccounts(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountBalance(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountBalanceRequest(c.Server, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfirmationOfFunds(ctx context.Context, accountUid openapi_types.UUID, params *GetConfirmationOfFundsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfirmationOfFundsRequest(c.Server, accountUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountIdentifiers(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountIdentifiersRequest(c.Server, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRecurringPayments(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRecurringPaymentsRequest(c.Server, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySpendingInsightsByCounterparty(ctx context.Context, accountUid openapi_types.UUID, params *QuerySpendingInsightsByCounterpartyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySpendingInsightsByCounterpartyRequest(c.Server, accountUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QuerySpendingInsightsBySpendingCategory(ctx context.Context, accountUid openapi_types.UUID, params *QuerySpendingInsightsBySpendingCategoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQuerySpendingInsightsBySpendingCategoryRequest(c.Server, accountUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AvailablePeriods(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAvailablePeriodsRequest(c.Server, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadPDFStatement(ctx context.Context, accountUid openapi_types.UUID, params *DownloadPDFStatementParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadPDFStatementRequest(c.Server, accountUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadPDFStatementForDateRange(ctx context.Context, accountUid openapi_types.UUID, params *DownloadPDFStatementForDateRangeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadPDFStatementForDateRangeRequest(c.Server, accountUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAddresses(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAddressesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentAddressWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentAddressRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCurrentAddress(ctx context.Context, body UpdateCurrentAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCurrentAddressRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCards(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCardsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableAtmWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableAtmRequestWithBody(c.Server, cardUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableAtm(ctx context.Context, cardUid openapi_types.UUID, body EnableAtmJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableAtmRequest(c.Server, cardUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableCurrencySwitchWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableCurrencySwitchRequestWithBody(c.Server, cardUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableCurrencySwitch(ctx context.Context, cardUid openapi_types.UUID, body EnableCurrencySwitchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableCurrencySwitchRequest(c.Server, cardUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableCardWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableCardRequestWithBody(c.Server, cardUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableCard(ctx context.Context, cardUid openapi_types.UUID, body EnableCardJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableCardRequest(c.Server, cardUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableGamblingPaymentsWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableGamblingPaymentsRequestWithBody(c.Server, cardUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableGamblingPayments(ctx context.Context, cardUid openapi_types.UUID, body EnableGamblingPaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableGamblingPaymentsRequest(c.Server, cardUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableMagStripePaymentWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableMagStripePaymentRequestWithBody(c.Server, cardUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableMagStripePayment(ctx context.Context, cardUid openapi_types.UUID, body EnableMagStripePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableMagStripePaymentRequest(c.Server, cardUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableMobileWalletWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableMobileWalletRequestWithBody(c.Server, cardUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableMobileWallet(ctx context.Context, cardUid openapi_types.UUID, body EnableMobileWalletJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableMobileWalletRequest(c.Server, cardUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableOnlinePaymentsWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableOnlinePaymentsRequestWithBody(c.Server, cardUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnableOnlinePayments(ctx context.Context, cardUid openapi_types.UUID, body EnableOnlinePaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnableOnlinePaymentsRequest(c.Server, cardUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnablePosWithBody(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnablePosRequestWithBody(c.Server, cardUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EnablePos(ctx context.Context, cardUid openapi_types.UUID, body EnablePosJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEnablePosRequest(c.Server, cardUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMandates(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMandatesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMandatesForAccount(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMandatesForAccountRequest(c.Server, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelMandate(ctx context.Context, mandateUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelMandateRequest(c.Server, mandateUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMandate(ctx context.Context, mandateUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMandateRequest(c.Server, mandateUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPaymentsForMandate(ctx context.Context, mandateUid openapi_types.UUID, params *ListPaymentsForMandateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPaymentsForMandateRequest(c.Server, mandateUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryFeedItems(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, params *QueryFeedItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryFeedItemsRequest(c.Server, accountUid, categoryUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryFeedItemsByCategoryWithTransactionTimesBetween(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, params *QueryFeedItemsByCategoryWithTransactionTimesBetweenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryFeedItemsByCategoryWithTransactionTimesBetweenRequest(c.Server, accountUid, categoryUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeedItem(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeedItemRequest(c.Server, accountUid, categoryUid, feedItemUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeedItemAttachments(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeedItemAttachmentsRequest(c.Server, accountUid, categoryUid, feedItemUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AttachToFeedItemWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, params *AttachToFeedItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAttachToFeedItemRequestWithBody(c.Server, accountUid, categoryUid, feedItemUid, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DownloadFeedItemAttachment(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, feedItemAttachmentUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDownloadFeedItemAttachmentRequest(c.Server, accountUid, categoryUid, feedItemUid, feedItemAttachmentUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMastercardFeedItem(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMastercardFeedItemRequest(c.Server, accountUid, categoryUid, feedItemUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReceipt(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReceiptRequest(c.Server, accountUid, categoryUid, feedItemUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateReceiptWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateReceiptRequestWithBody(c.Server, accountUid, categoryUid, feedItemUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrUpdateReceipt(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body CreateOrUpdateReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrUpdateReceiptRequest(c.Server, accountUid, categoryUid, feedItemUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReceipts(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReceiptsRequest(c.Server, accountUid, categoryUid, feedItemUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeTransactionCategoryWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeTransactionCategoryRequestWithBody(c.Server, accountUid, categoryUid, feedItemUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ChangeTransactionCategory(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body ChangeTransactionCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewChangeTransactionCategoryRequest(c.Server, accountUid, categoryUid, feedItemUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserNoteWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserNoteRequestWithBody(c.Server, accountUid, categoryUid, feedItemUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserNote(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body UpdateUserNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserNoteRequest(c.Server, accountUid, categoryUid, feedItemUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) StopRoundUpGoal(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewStopRoundUpGoalRequest(c.Server, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchRoundUpGoal(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchRoundUpGoalRequest(c.Server, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateRoundUpGoalWithBody(ctx context.Context, accountUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateRoundUpGoalRequestWithBody(c.Server, accountUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateRoundUpGoal(ctx context.Context, accountUid openapi_types.UUID, body ActivateRoundUpGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateRoundUpGoalRequest(c.Server, accountUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) QueryFeedItemsWithTransactionTimesBetween(ctx context.Context, accountUid openapi_types.UUID, params *QueryFeedItemsWithTransactionTimesBetweenParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewQueryFeedItemsWithTransactionTimesBetweenRequest(c.Server, accountUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAuthorisingIndividual(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAuthorisingIndividualRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogoutIndividual(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutIndividualRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokenIdentity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenIdentityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPayees(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayeesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePayeeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePayeeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePayee(ctx context.Context, body CreatePayeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePayeeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePayee(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePayeeRequest(c.Server, payeeUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPayee(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPayeeRequest(c.Server, payeeUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePayeeWithBody(ctx context.Context, payeeUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePayeeRequestWithBody(c.Server, payeeUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePayee(ctx context.Context, payeeUid openapi_types.UUID, body UpdatePayeeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePayeeRequest(c.Server, payeeUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePayeeAccountWithBody(ctx context.Context, payeeUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePayeeAccountRequestWithBody(c.Server, payeeUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePayeeAccount(ctx context.Context, payeeUid openapi_types.UUID, body CreatePayeeAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePayeeAccountRequest(c.Server, payeeUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePayeeAccount(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePayeeAccountRequest(c.Server, payeeUid, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPaymentsForPayeeAccount(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, params *ListPaymentsForPayeeAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPaymentsForPayeeAccountRequest(c.Server, payeeUid, accountUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPaymentOrdersForAccount(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPaymentOrdersForAccountRequest(c.Server, payeeUid, accountUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ServePayeeImageFile(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewServePayeeImageFileRequest(c.Server, payeeUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MakeLocalPaymentWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMakeLocalPaymentRequestWithBody(c.Server, accountUid, categoryUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) MakeLocalPayment(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, body MakeLocalPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewMakeLocalPaymentRequest(c.Server, accountUid, categoryUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListStandingOrders(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListStandingOrdersRequest(c.Server, accountUid, categoryUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStandingOrderWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStandingOrderRequestWithBody(c.Server, accountUid, categoryUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStandingOrder(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, body CreateStandingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStandingOrderRequest(c.Server, accountUid, categoryUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelStandingOrder(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelStandingOrderRequest(c.Server, accountUid, categoryUid, paymentOrderUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStandingOrder(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStandingOrderRequest(c.Server, accountUid, categoryUid, paymentOrderUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStandingOrderWithBody(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStandingOrderRequestWithBody(c.Server, accountUid, categoryUid, paymentOrderUid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStandingOrder(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, body UpdateStandingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStandingOrderRequest(c.Server, accountUid, categoryUid, paymentOrderUid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNextPaymentDates(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, params *ListNextPaymentDatesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNextPaymentDatesRequest(c.Server, accountUid, categoryUid, paymentOrderUid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentOrder(ctx context.Context, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentOrderRequest(c.Server, paymentOrderUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentOrderPayments(ctx context.Context, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentOrderPaymentsRequest(c.Server, paymentOrderUid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSettleUpProfile(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSettleUpProfileRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCloseAccountHolderRequest generates requests for CloseAccountHolder
func NewCloseAccountHolderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountHolderRequest generates requests for GetAccountHolder
func NewGetAccountHolderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBusinessRequest generates requests for GetBusiness
func NewGetBusinessRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/business")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCorrespondenceAddressRequest generates requests for GetCorrespondenceAddress
func NewGetCorrespondenceAddressRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/business/correspondence-address")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRegisteredAddressRequest generates requests for GetRegisteredAddress
func NewGetRegisteredAddressRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/business/registered-address")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIndividualRequest generates requests for GetIndividual
func NewGetIndividualRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/individual")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEmailRequest calls the generic UpdateEmail builder with application/json body
func NewUpdateEmailRequest(server string, body UpdateEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateEmailRequestWithBody generates requests for UpdateEmail with any type of body
func NewUpdateEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/individual/email")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJointAccountRequest generates requests for GetJointAccount
func NewGetJointAccountRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/joint")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountHolderNameRequest generates requests for GetAccountHolderName
func NewGetAccountHolderNameRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSoleTraderRequest generates requests for GetSoleTrader
func NewGetSoleTraderRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/sole-trader")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteProfileImageRequest generates requests for DeleteProfileImage
func NewDeleteProfileImageRequest(server string, accountHolderUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountHolderUid", runtime.ParamLocationPath, accountHolderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/%s/profile-image", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadProfileImageRequest generates requests for DownloadProfileImage
func NewDownloadProfileImageRequest(server string, accountHolderUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountHolderUid", runtime.ParamLocationPath, accountHolderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/%s/profile-image", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProfileImageRequestWithBody generates requests for UpdateProfileImage with any type of body
func NewUpdateProfileImageRequestWithBody(server string, accountHolderUid openapi_types.UUID, params *UpdateProfileImageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountHolderUid", runtime.ParamLocationPath, accountHolderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account-holder/%s/profile-image", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, params.ContentType)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Content-Type", headerParam0)

	}

	return req, nil
}

// NewGetSavingsGoalsRequest generates requests for GetSavingsGoals
func NewGetSavingsGoalsRequest(server string, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSavingsGoalRequest calls the generic CreateSavingsGoal builder with application/json body
func NewCreateSavingsGoalRequest(server string, accountUid openapi_types.UUID, body CreateSavingsGoalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSavingsGoalRequestWithBody(server, accountUid, "application/json", bodyReader)
}

// NewCreateSavingsGoalRequestWithBody generates requests for CreateSavingsGoal with any type of body
func NewCreateSavingsGoalRequestWithBody(server string, accountUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSavingsGoalRequest generates requests for DeleteSavingsGoal
func NewDeleteSavingsGoalRequest(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "savingsGoalUid", runtime.ParamLocationPath, savingsGoalUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSavingsGoalRequest generates requests for GetSavingsGoal
func NewGetSavingsGoalRequest(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "savingsGoalUid", runtime.ParamLocationPath, savingsGoalUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSavingsGoalRequest calls the generic UpdateSavingsGoal builder with application/json body
func NewUpdateSavingsGoalRequest(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, body UpdateSavingsGoalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSavingsGoalRequestWithBody(server, accountUid, savingsGoalUid, "application/json", bodyReader)
}

// NewUpdateSavingsGoalRequestWithBody generates requests for UpdateSavingsGoal with any type of body
func NewUpdateSavingsGoalRequestWithBody(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "savingsGoalUid", runtime.ParamLocationPath, savingsGoalUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddMoneyRequest calls the generic AddMoney builder with application/json body
func NewAddMoneyRequest(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, body AddMoneyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMoneyRequestWithBody(server, accountUid, savingsGoalUid, transferUid, "application/json", bodyReader)
}

// NewAddMoneyRequestWithBody generates requests for AddMoney with any type of body
func NewAddMoneyRequestWithBody(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "savingsGoalUid", runtime.ParamLocationPath, savingsGoalUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "transferUid", runtime.ParamLocationPath, transferUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals/%s/add-money/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSavingsGoalPhotoRequest generates requests for GetSavingsGoalPhoto
func NewGetSavingsGoalPhotoRequest(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "savingsGoalUid", runtime.ParamLocationPath, savingsGoalUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals/%s/photo", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRecurringTransferRequest generates requests for DeleteRecurringTransfer
func NewDeleteRecurringTransferRequest(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "savingsGoalUid", runtime.ParamLocationPath, savingsGoalUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals/%s/recurring-transfer", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRecurringTransferRequest generates requests for GetRecurringTransfer
func NewGetRecurringTransferRequest(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "savingsGoalUid", runtime.ParamLocationPath, savingsGoalUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals/%s/recurring-transfer", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateRecurringTransferRequest calls the generic CreateOrUpdateRecurringTransfer builder with application/json body
func NewCreateOrUpdateRecurringTransferRequest(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, body CreateOrUpdateRecurringTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateRecurringTransferRequestWithBody(server, accountUid, savingsGoalUid, "application/json", bodyReader)
}

// NewCreateOrUpdateRecurringTransferRequestWithBody generates requests for CreateOrUpdateRecurringTransfer with any type of body
func NewCreateOrUpdateRecurringTransferRequestWithBody(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "savingsGoalUid", runtime.ParamLocationPath, savingsGoalUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals/%s/recurring-transfer", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWithdrawMoneyRequest calls the generic WithdrawMoney builder with application/json body
func NewWithdrawMoneyRequest(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, body WithdrawMoneyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWithdrawMoneyRequestWithBody(server, accountUid, savingsGoalUid, transferUid, "application/json", bodyReader)
}

// NewWithdrawMoneyRequestWithBody generates requests for WithdrawMoney with any type of body
func NewWithdrawMoneyRequestWithBody(server string, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "savingsGoalUid", runtime.ParamLocationPath, savingsGoalUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "transferUid", runtime.ParamLocationPath, transferUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/savings-goals/%s/withdraw-money/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSpacesRequest generates requests for GetSpaces
func NewGetSpacesRequest(server string, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/spaces", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpendingSpaceRequest generates requests for GetSpendingSpace
func NewGetSpendingSpaceRequest(server string, accountUid openapi_types.UUID, spaceUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "spaceUid", runtime.ParamLocationPath, spaceUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/spaces/spending/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSpacePhotoRequest generates requests for GetSpacePhoto
func NewGetSpacePhotoRequest(server string, accountUid openapi_types.UUID, spaceUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "spaceUid", runtime.ParamLocationPath, spaceUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/account/%s/spaces/%s/photo", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountsRequest generates requests for GetAccounts
func NewGetAccountsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountBalanceRequest generates requests for GetAccountBalance
func NewGetAccountBalanceRequest(server string, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/balance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfirmationOfFundsRequest generates requests for GetConfirmationOfFunds
func NewGetConfirmationOfFundsRequest(server string, accountUid openapi_types.UUID, params *GetConfirmationOfFundsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/confirmation-of-funds", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "targetAmountInMinorUnits", runtime.ParamLocationQuery, params.TargetAmountInMinorUnits); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAccountIdentifiersRequest generates requests for GetAccountIdentifiers
func NewGetAccountIdentifiersRequest(server string, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/identifiers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRecurringPaymentsRequest generates requests for ListRecurringPayments
func NewListRecurringPaymentsRequest(server string, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/recurring-payment", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySpendingInsightsByCounterpartyRequest generates requests for QuerySpendingInsightsByCounterparty
func NewQuerySpendingInsightsByCounterpartyRequest(server string, accountUid openapi_types.UUID, params *QuerySpendingInsightsByCounterpartyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/spending-insights/counter-party", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SummaryStartPeriodInclusive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "summaryStartPeriodInclusive", runtime.ParamLocationQuery, *params.SummaryStartPeriodInclusive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SummaryEndPeriodExclusive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "summaryEndPeriodExclusive", runtime.ParamLocationQuery, *params.SummaryEndPeriodExclusive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQuerySpendingInsightsBySpendingCategoryRequest generates requests for QuerySpendingInsightsBySpendingCategory
func NewQuerySpendingInsightsBySpendingCategoryRequest(server string, accountUid openapi_types.UUID, params *QuerySpendingInsightsBySpendingCategoryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/spending-insights/spending-category", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "year", runtime.ParamLocationQuery, params.Year); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "month", runtime.ParamLocationQuery, params.Month); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SummaryStartPeriodInclusive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "summaryStartPeriodInclusive", runtime.ParamLocationQuery, *params.SummaryStartPeriodInclusive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SummaryEndPeriodExclusive != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "summaryEndPeriodExclusive", runtime.ParamLocationQuery, *params.SummaryEndPeriodExclusive); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAvailablePeriodsRequest generates requests for AvailablePeriods
func NewAvailablePeriodsRequest(server string, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/statement/available-periods", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadPDFStatementRequest generates requests for DownloadPDFStatement
func NewDownloadPDFStatementRequest(server string, accountUid openapi_types.UUID, params *DownloadPDFStatementParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/statement/download", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "yearMonth", runtime.ParamLocationQuery, params.YearMonth); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDownloadPDFStatementForDateRangeRequest generates requests for DownloadPDFStatementForDateRange
func NewDownloadPDFStatementForDateRangeRequest(server string, accountUid openapi_types.UUID, params *DownloadPDFStatementForDateRangeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/accounts/%s/statement/downloadForDateRange", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, params.Start); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAddressesRequest generates requests for GetAddresses
func NewGetAddressesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/addresses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCurrentAddressRequest calls the generic UpdateCurrentAddress builder with application/json body
func NewUpdateCurrentAddressRequest(server string, body UpdateCurrentAddressJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateCurrentAddressRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateCurrentAddressRequestWithBody generates requests for UpdateCurrentAddress with any type of body
func NewUpdateCurrentAddressRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/addresses")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCardsRequest generates requests for ListCards
func NewListCardsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/cards")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewEnableAtmRequest calls the generic EnableAtm builder with application/json body
func NewEnableAtmRequest(server string, cardUid openapi_types.UUID, body EnableAtmJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableAtmRequestWithBody(server, cardUid, "application/json", bodyReader)
}

// NewEnableAtmRequestWithBody generates requests for EnableAtm with any type of body
func NewEnableAtmRequestWithBody(server string, cardUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardUid", runtime.ParamLocationPath, cardUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/cards/%s/controls/atm-enabled", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnableCurrencySwitchRequest calls the generic EnableCurrencySwitch builder with application/json body
func NewEnableCurrencySwitchRequest(server string, cardUid openapi_types.UUID, body EnableCurrencySwitchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableCurrencySwitchRequestWithBody(server, cardUid, "application/json", bodyReader)
}

// NewEnableCurrencySwitchRequestWithBody generates requests for EnableCurrencySwitch with any type of body
func NewEnableCurrencySwitchRequestWithBody(server string, cardUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardUid", runtime.ParamLocationPath, cardUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/cards/%s/controls/currency-switch", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnableCardRequest calls the generic EnableCard builder with application/json body
func NewEnableCardRequest(server string, cardUid openapi_types.UUID, body EnableCardJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableCardRequestWithBody(server, cardUid, "application/json", bodyReader)
}

// NewEnableCardRequestWithBody generates requests for EnableCard with any type of body
func NewEnableCardRequestWithBody(server string, cardUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardUid", runtime.ParamLocationPath, cardUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/cards/%s/controls/enabled", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnableGamblingPaymentsRequest calls the generic EnableGamblingPayments builder with application/json body
func NewEnableGamblingPaymentsRequest(server string, cardUid openapi_types.UUID, body EnableGamblingPaymentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableGamblingPaymentsRequestWithBody(server, cardUid, "application/json", bodyReader)
}

// NewEnableGamblingPaymentsRequestWithBody generates requests for EnableGamblingPayments with any type of body
func NewEnableGamblingPaymentsRequestWithBody(server string, cardUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardUid", runtime.ParamLocationPath, cardUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/cards/%s/controls/gambling-enabled", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnableMagStripePaymentRequest calls the generic EnableMagStripePayment builder with application/json body
func NewEnableMagStripePaymentRequest(server string, cardUid openapi_types.UUID, body EnableMagStripePaymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableMagStripePaymentRequestWithBody(server, cardUid, "application/json", bodyReader)
}

// NewEnableMagStripePaymentRequestWithBody generates requests for EnableMagStripePayment with any type of body
func NewEnableMagStripePaymentRequestWithBody(server string, cardUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardUid", runtime.ParamLocationPath, cardUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/cards/%s/controls/mag-stripe-enabled", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnableMobileWalletRequest calls the generic EnableMobileWallet builder with application/json body
func NewEnableMobileWalletRequest(server string, cardUid openapi_types.UUID, body EnableMobileWalletJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableMobileWalletRequestWithBody(server, cardUid, "application/json", bodyReader)
}

// NewEnableMobileWalletRequestWithBody generates requests for EnableMobileWallet with any type of body
func NewEnableMobileWalletRequestWithBody(server string, cardUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardUid", runtime.ParamLocationPath, cardUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/cards/%s/controls/mobile-wallet-enabled", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnableOnlinePaymentsRequest calls the generic EnableOnlinePayments builder with application/json body
func NewEnableOnlinePaymentsRequest(server string, cardUid openapi_types.UUID, body EnableOnlinePaymentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnableOnlinePaymentsRequestWithBody(server, cardUid, "application/json", bodyReader)
}

// NewEnableOnlinePaymentsRequestWithBody generates requests for EnableOnlinePayments with any type of body
func NewEnableOnlinePaymentsRequestWithBody(server string, cardUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardUid", runtime.ParamLocationPath, cardUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/cards/%s/controls/online-enabled", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEnablePosRequest calls the generic EnablePos builder with application/json body
func NewEnablePosRequest(server string, cardUid openapi_types.UUID, body EnablePosJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEnablePosRequestWithBody(server, cardUid, "application/json", bodyReader)
}

// NewEnablePosRequestWithBody generates requests for EnablePos with any type of body
func NewEnablePosRequestWithBody(server string, cardUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cardUid", runtime.ParamLocationPath, cardUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/cards/%s/controls/pos-enabled", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMandatesRequest generates requests for ListMandates
func NewListMandatesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/direct-debit/mandates")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListMandatesForAccountRequest generates requests for ListMandatesForAccount
func NewListMandatesForAccountRequest(server string, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/direct-debit/mandates/account/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelMandateRequest generates requests for CancelMandate
func NewCancelMandateRequest(server string, mandateUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mandateUid", runtime.ParamLocationPath, mandateUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/direct-debit/mandates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMandateRequest generates requests for GetMandate
func NewGetMandateRequest(server string, mandateUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mandateUid", runtime.ParamLocationPath, mandateUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/direct-debit/mandates/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPaymentsForMandateRequest generates requests for ListPaymentsForMandate
func NewListPaymentsForMandateRequest(server string, mandateUid openapi_types.UUID, params *ListPaymentsForMandateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mandateUid", runtime.ParamLocationPath, mandateUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/direct-debit/mandates/%s/payments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryFeedItemsRequest generates requests for QueryFeedItems
func NewQueryFeedItemsRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, params *QueryFeedItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "changesSince", runtime.ParamLocationQuery, params.ChangesSince); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewQueryFeedItemsByCategoryWithTransactionTimesBetweenRequest generates requests for QueryFeedItemsByCategoryWithTransactionTimesBetween
func NewQueryFeedItemsByCategoryWithTransactionTimesBetweenRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, params *QueryFeedItemsByCategoryWithTransactionTimesBetweenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/transactions-between", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minTransactionTimestamp", runtime.ParamLocationQuery, params.MinTransactionTimestamp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxTransactionTimestamp", runtime.ParamLocationQuery, params.MaxTransactionTimestamp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeedItemRequest generates requests for GetFeedItem
func NewGetFeedItemRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "feedItemUid", runtime.ParamLocationPath, feedItemUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeedItemAttachmentsRequest generates requests for GetFeedItemAttachments
func NewGetFeedItemAttachmentsRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "feedItemUid", runtime.ParamLocationPath, feedItemUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/%s/attachments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAttachToFeedItemRequestWithBody generates requests for AttachToFeedItem with any type of body
func NewAttachToFeedItemRequestWithBody(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, params *AttachToFeedItemParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "feedItemUid", runtime.ParamLocationPath, feedItemUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/%s/attachments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.ContentType != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Content-Type", runtime.ParamLocationHeader, *params.ContentType)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Content-Type", headerParam0)
		}

	}

	return req, nil
}

// NewDownloadFeedItemAttachmentRequest generates requests for DownloadFeedItemAttachment
func NewDownloadFeedItemAttachmentRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, feedItemAttachmentUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "feedItemUid", runtime.ParamLocationPath, feedItemUid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "feedItemAttachmentUid", runtime.ParamLocationPath, feedItemAttachmentUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/%s/attachments/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMastercardFeedItemRequest generates requests for GetMastercardFeedItem
func NewGetMastercardFeedItemRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "feedItemUid", runtime.ParamLocationPath, feedItemUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/%s/mastercard", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetReceiptRequest generates requests for GetReceipt
func NewGetReceiptRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "feedItemUid", runtime.ParamLocationPath, feedItemUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/%s/receipt", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrUpdateReceiptRequest calls the generic CreateOrUpdateReceipt builder with application/json body
func NewCreateOrUpdateReceiptRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body CreateOrUpdateReceiptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrUpdateReceiptRequestWithBody(server, accountUid, categoryUid, feedItemUid, "application/json", bodyReader)
}

// NewCreateOrUpdateReceiptRequestWithBody generates requests for CreateOrUpdateReceipt with any type of body
func NewCreateOrUpdateReceiptRequestWithBody(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "feedItemUid", runtime.ParamLocationPath, feedItemUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/%s/receipt", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReceiptsRequest generates requests for GetReceipts
func NewGetReceiptsRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "feedItemUid", runtime.ParamLocationPath, feedItemUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/%s/receipts", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewChangeTransactionCategoryRequest calls the generic ChangeTransactionCategory builder with application/json body
func NewChangeTransactionCategoryRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body ChangeTransactionCategoryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewChangeTransactionCategoryRequestWithBody(server, accountUid, categoryUid, feedItemUid, "application/json", bodyReader)
}

// NewChangeTransactionCategoryRequestWithBody generates requests for ChangeTransactionCategory with any type of body
func NewChangeTransactionCategoryRequestWithBody(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "feedItemUid", runtime.ParamLocationPath, feedItemUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/%s/spending-category", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateUserNoteRequest calls the generic UpdateUserNote builder with application/json body
func NewUpdateUserNoteRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body UpdateUserNoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserNoteRequestWithBody(server, accountUid, categoryUid, feedItemUid, "application/json", bodyReader)
}

// NewUpdateUserNoteRequestWithBody generates requests for UpdateUserNote with any type of body
func NewUpdateUserNoteRequestWithBody(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "feedItemUid", runtime.ParamLocationPath, feedItemUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/category/%s/%s/user-note", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewStopRoundUpGoalRequest generates requests for StopRoundUpGoal
func NewStopRoundUpGoalRequest(server string, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/round-up", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchRoundUpGoalRequest generates requests for FetchRoundUpGoal
func NewFetchRoundUpGoalRequest(server string, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/round-up", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActivateRoundUpGoalRequest calls the generic ActivateRoundUpGoal builder with application/json body
func NewActivateRoundUpGoalRequest(server string, accountUid openapi_types.UUID, body ActivateRoundUpGoalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActivateRoundUpGoalRequestWithBody(server, accountUid, "application/json", bodyReader)
}

// NewActivateRoundUpGoalRequestWithBody generates requests for ActivateRoundUpGoal with any type of body
func NewActivateRoundUpGoalRequestWithBody(server string, accountUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/round-up", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewQueryFeedItemsWithTransactionTimesBetweenRequest generates requests for QueryFeedItemsWithTransactionTimesBetween
func NewQueryFeedItemsWithTransactionTimesBetweenRequest(server string, accountUid openapi_types.UUID, params *QueryFeedItemsWithTransactionTimesBetweenParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/feed/account/%s/settled-transactions-between", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "minTransactionTimestamp", runtime.ParamLocationQuery, params.MinTransactionTimestamp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxTransactionTimestamp", runtime.ParamLocationQuery, params.MaxTransactionTimestamp); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAuthorisingIndividualRequest generates requests for GetAuthorisingIndividual
func NewGetAuthorisingIndividualRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/identity/individual")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogoutIndividualRequest generates requests for LogoutIndividual
func NewLogoutIndividualRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/identity/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokenIdentityRequest generates requests for GetTokenIdentity
func NewGetTokenIdentityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/identity/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPayeesRequest generates requests for GetPayees
func NewGetPayeesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePayeeRequest calls the generic CreatePayee builder with application/json body
func NewCreatePayeeRequest(server string, body CreatePayeeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePayeeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreatePayeeRequestWithBody generates requests for CreatePayee with any type of body
func NewCreatePayeeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payees")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePayeeRequest generates requests for DeletePayee
func NewDeletePayeeRequest(server string, payeeUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "payeeUid", runtime.ParamLocationPath, payeeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPayeeRequest generates requests for GetPayee
func NewGetPayeeRequest(server string, payeeUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "payeeUid", runtime.ParamLocationPath, payeeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePayeeRequest calls the generic UpdatePayee builder with application/json body
func NewUpdatePayeeRequest(server string, payeeUid openapi_types.UUID, body UpdatePayeeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePayeeRequestWithBody(server, payeeUid, "application/json", bodyReader)
}

// NewUpdatePayeeRequestWithBody generates requests for UpdatePayee with any type of body
func NewUpdatePayeeRequestWithBody(server string, payeeUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "payeeUid", runtime.ParamLocationPath, payeeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payees/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreatePayeeAccountRequest calls the generic CreatePayeeAccount builder with application/json body
func NewCreatePayeeAccountRequest(server string, payeeUid openapi_types.UUID, body CreatePayeeAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreatePayeeAccountRequestWithBody(server, payeeUid, "application/json", bodyReader)
}

// NewCreatePayeeAccountRequestWithBody generates requests for CreatePayeeAccount with any type of body
func NewCreatePayeeAccountRequestWithBody(server string, payeeUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "payeeUid", runtime.ParamLocationPath, payeeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payees/%s/account", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePayeeAccountRequest generates requests for DeletePayeeAccount
func NewDeletePayeeAccountRequest(server string, payeeUid openapi_types.UUID, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "payeeUid", runtime.ParamLocationPath, payeeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payees/%s/account/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPaymentsForPayeeAccountRequest generates requests for ListPaymentsForPayeeAccount
func NewListPaymentsForPayeeAccountRequest(server string, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, params *ListPaymentsForPayeeAccountParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "payeeUid", runtime.ParamLocationPath, payeeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payees/%s/account/%s/payments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPaymentOrdersForAccountRequest generates requests for ListPaymentOrdersForAccount
func NewListPaymentOrdersForAccountRequest(server string, payeeUid openapi_types.UUID, accountUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "payeeUid", runtime.ParamLocationPath, payeeUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payees/%s/account/%s/scheduled-payments", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewServePayeeImageFileRequest generates requests for ServePayeeImageFile
func NewServePayeeImageFileRequest(server string, payeeUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "payeeUid", runtime.ParamLocationPath, payeeUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payees/%s/image", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewMakeLocalPaymentRequest calls the generic MakeLocalPayment builder with application/json body
func NewMakeLocalPaymentRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, body MakeLocalPaymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewMakeLocalPaymentRequestWithBody(server, accountUid, categoryUid, "application/json", bodyReader)
}

// NewMakeLocalPaymentRequestWithBody generates requests for MakeLocalPayment with any type of body
func NewMakeLocalPaymentRequestWithBody(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payments/local/account/%s/category/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListStandingOrdersRequest generates requests for ListStandingOrders
func NewListStandingOrdersRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payments/local/account/%s/category/%s/standing-orders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateStandingOrderRequest calls the generic CreateStandingOrder builder with application/json body
func NewCreateStandingOrderRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, body CreateStandingOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateStandingOrderRequestWithBody(server, accountUid, categoryUid, "application/json", bodyReader)
}

// NewCreateStandingOrderRequestWithBody generates requests for CreateStandingOrder with any type of body
func NewCreateStandingOrderRequestWithBody(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payments/local/account/%s/category/%s/standing-orders", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCancelStandingOrderRequest generates requests for CancelStandingOrder
func NewCancelStandingOrderRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "paymentOrderUid", runtime.ParamLocationPath, paymentOrderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payments/local/account/%s/category/%s/standing-orders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStandingOrderRequest generates requests for GetStandingOrder
func NewGetStandingOrderRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "paymentOrderUid", runtime.ParamLocationPath, paymentOrderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payments/local/account/%s/category/%s/standing-orders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateStandingOrderRequest calls the generic UpdateStandingOrder builder with application/json body
func NewUpdateStandingOrderRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, body UpdateStandingOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateStandingOrderRequestWithBody(server, accountUid, categoryUid, paymentOrderUid, "application/json", bodyReader)
}

// NewUpdateStandingOrderRequestWithBody generates requests for UpdateStandingOrder with any type of body
func NewUpdateStandingOrderRequestWithBody(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "paymentOrderUid", runtime.ParamLocationPath, paymentOrderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payments/local/account/%s/category/%s/standing-orders/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListNextPaymentDatesRequest generates requests for ListNextPaymentDates
func NewListNextPaymentDatesRequest(server string, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, params *ListNextPaymentDatesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "accountUid", runtime.ParamLocationPath, accountUid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "categoryUid", runtime.ParamLocationPath, categoryUid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "paymentOrderUid", runtime.ParamLocationPath, paymentOrderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payments/local/account/%s/category/%s/standing-orders/%s/upcoming-payments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentOrderRequest generates requests for GetPaymentOrder
func NewGetPaymentOrderRequest(server string, paymentOrderUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentOrderUid", runtime.ParamLocationPath, paymentOrderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payments/local/payment-order/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentOrderPaymentsRequest generates requests for GetPaymentOrderPayments
func NewGetPaymentOrderPaymentsRequest(server string, paymentOrderUid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentOrderUid", runtime.ParamLocationPath, paymentOrderUid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/payments/local/payment-order/%s/payments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSettleUpProfileRequest generates requests for GetSettleUpProfile
func NewGetSettleUpProfileRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/settle-up/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CloseAccountHolderWithResponse request
	CloseAccountHolderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CloseAccountHolderResponse, error)

	// GetAccountHolderWithResponse request
	GetAccountHolderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountHolderResponse, error)

	// GetBusinessWithResponse request
	GetBusinessWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBusinessResponse, error)

	// GetCorrespondenceAddressWithResponse request
	GetCorrespondenceAddressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCorrespondenceAddressResponse, error)

	// GetRegisteredAddressWithResponse request
	GetRegisteredAddressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRegisteredAddressResponse, error)

	// GetIndividualWithResponse request
	GetIndividualWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndividualResponse, error)

	// UpdateEmailWithBodyWithResponse request with any body
	UpdateEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEmailResponse, error)

	UpdateEmailWithResponse(ctx context.Context, body UpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEmailResponse, error)

	// GetJointAccountWithResponse request
	GetJointAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJointAccountResponse, error)

	// GetAccountHolderNameWithResponse request
	GetAccountHolderNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountHolderNameResponse, error)

	// GetSoleTraderWithResponse request
	GetSoleTraderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSoleTraderResponse, error)

	// DeleteProfileImageWithResponse request
	DeleteProfileImageWithResponse(ctx context.Context, accountHolderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteProfileImageResponse, error)

	// DownloadProfileImageWithResponse request
	DownloadProfileImageWithResponse(ctx context.Context, accountHolderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DownloadProfileImageResponse, error)

	// UpdateProfileImageWithBodyWithResponse request with any body
	UpdateProfileImageWithBodyWithResponse(ctx context.Context, accountHolderUid openapi_types.UUID, params *UpdateProfileImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProfileImageResponse, error)

	// GetSavingsGoalsWithResponse request
	GetSavingsGoalsWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSavingsGoalsResponse, error)

	// CreateSavingsGoalWithBodyWithResponse request with any body
	CreateSavingsGoalWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSavingsGoalResponse, error)

	CreateSavingsGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, body CreateSavingsGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSavingsGoalResponse, error)

	// DeleteSavingsGoalWithResponse request
	DeleteSavingsGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteSavingsGoalResponse, error)

	// GetSavingsGoalWithResponse request
	GetSavingsGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSavingsGoalResponse, error)

	// UpdateSavingsGoalWithBodyWithResponse request with any body
	UpdateSavingsGoalWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSavingsGoalResponse, error)

	UpdateSavingsGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, body UpdateSavingsGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSavingsGoalResponse, error)

	// AddMoneyWithBodyWithResponse request with any body
	AddMoneyWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMoneyResponse, error)

	AddMoneyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, body AddMoneyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMoneyResponse, error)

	// GetSavingsGoalPhotoWithResponse request
	GetSavingsGoalPhotoWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSavingsGoalPhotoResponse, error)

	// DeleteRecurringTransferWithResponse request
	DeleteRecurringTransferWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteRecurringTransferResponse, error)

	// GetRecurringTransferWithResponse request
	GetRecurringTransferWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRecurringTransferResponse, error)

	// CreateOrUpdateRecurringTransferWithBodyWithResponse request with any body
	CreateOrUpdateRecurringTransferWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateRecurringTransferResponse, error)

	CreateOrUpdateRecurringTransferWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, body CreateOrUpdateRecurringTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateRecurringTransferResponse, error)

	// WithdrawMoneyWithBodyWithResponse request with any body
	WithdrawMoneyWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WithdrawMoneyResponse, error)

	WithdrawMoneyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, body WithdrawMoneyJSONRequestBody, reqEditors ...RequestEditorFn) (*WithdrawMoneyResponse, error)

	// GetSpacesWithResponse request
	GetSpacesWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSpacesResponse, error)

	// GetSpendingSpaceWithResponse request
	GetSpendingSpaceWithResponse(ctx context.Context, accountUid openapi_types.UUID, spaceUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSpendingSpaceResponse, error)

	// GetSpacePhotoWithResponse request
	GetSpacePhotoWithResponse(ctx context.Context, accountUid openapi_types.UUID, spaceUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSpacePhotoResponse, error)

	// GetAccountsWithResponse request
	GetAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error)

	// GetAccountBalanceWithResponse request
	GetAccountBalanceWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAccountBalanceResponse, error)

	// GetConfirmationOfFundsWithResponse request
	GetConfirmationOfFundsWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *GetConfirmationOfFundsParams, reqEditors ...RequestEditorFn) (*GetConfirmationOfFundsResponse, error)

	// GetAccountIdentifiersWithResponse request
	GetAccountIdentifiersWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAccountIdentifiersResponse, error)

	// ListRecurringPaymentsWithResponse request
	ListRecurringPaymentsWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListRecurringPaymentsResponse, error)

	// QuerySpendingInsightsByCounterpartyWithResponse request
	QuerySpendingInsightsByCounterpartyWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *QuerySpendingInsightsByCounterpartyParams, reqEditors ...RequestEditorFn) (*QuerySpendingInsightsByCounterpartyResponse, error)

	// QuerySpendingInsightsBySpendingCategoryWithResponse request
	QuerySpendingInsightsBySpendingCategoryWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *QuerySpendingInsightsBySpendingCategoryParams, reqEditors ...RequestEditorFn) (*QuerySpendingInsightsBySpendingCategoryResponse, error)

	// AvailablePeriodsWithResponse request
	AvailablePeriodsWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*AvailablePeriodsResponse, error)

	// DownloadPDFStatementWithResponse request
	DownloadPDFStatementWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *DownloadPDFStatementParams, reqEditors ...RequestEditorFn) (*DownloadPDFStatementResponse, error)

	// DownloadPDFStatementForDateRangeWithResponse request
	DownloadPDFStatementForDateRangeWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *DownloadPDFStatementForDateRangeParams, reqEditors ...RequestEditorFn) (*DownloadPDFStatementForDateRangeResponse, error)

	// GetAddressesWithResponse request
	GetAddressesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAddressesResponse, error)

	// UpdateCurrentAddressWithBodyWithResponse request with any body
	UpdateCurrentAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCurrentAddressResponse, error)

	UpdateCurrentAddressWithResponse(ctx context.Context, body UpdateCurrentAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCurrentAddressResponse, error)

	// ListCardsWithResponse request
	ListCardsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCardsResponse, error)

	// EnableAtmWithBodyWithResponse request with any body
	EnableAtmWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableAtmResponse, error)

	EnableAtmWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableAtmJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableAtmResponse, error)

	// EnableCurrencySwitchWithBodyWithResponse request with any body
	EnableCurrencySwitchWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableCurrencySwitchResponse, error)

	EnableCurrencySwitchWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableCurrencySwitchJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableCurrencySwitchResponse, error)

	// EnableCardWithBodyWithResponse request with any body
	EnableCardWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableCardResponse, error)

	EnableCardWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableCardJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableCardResponse, error)

	// EnableGamblingPaymentsWithBodyWithResponse request with any body
	EnableGamblingPaymentsWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableGamblingPaymentsResponse, error)

	EnableGamblingPaymentsWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableGamblingPaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableGamblingPaymentsResponse, error)

	// EnableMagStripePaymentWithBodyWithResponse request with any body
	EnableMagStripePaymentWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableMagStripePaymentResponse, error)

	EnableMagStripePaymentWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableMagStripePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableMagStripePaymentResponse, error)

	// EnableMobileWalletWithBodyWithResponse request with any body
	EnableMobileWalletWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableMobileWalletResponse, error)

	EnableMobileWalletWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableMobileWalletJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableMobileWalletResponse, error)

	// EnableOnlinePaymentsWithBodyWithResponse request with any body
	EnableOnlinePaymentsWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableOnlinePaymentsResponse, error)

	EnableOnlinePaymentsWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableOnlinePaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableOnlinePaymentsResponse, error)

	// EnablePosWithBodyWithResponse request with any body
	EnablePosWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnablePosResponse, error)

	EnablePosWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnablePosJSONRequestBody, reqEditors ...RequestEditorFn) (*EnablePosResponse, error)

	// ListMandatesWithResponse request
	ListMandatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListMandatesResponse, error)

	// ListMandatesForAccountWithResponse request
	ListMandatesForAccountWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListMandatesForAccountResponse, error)

	// CancelMandateWithResponse request
	CancelMandateWithResponse(ctx context.Context, mandateUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*CancelMandateResponse, error)

	// GetMandateWithResponse request
	GetMandateWithResponse(ctx context.Context, mandateUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMandateResponse, error)

	// ListPaymentsForMandateWithResponse request
	ListPaymentsForMandateWithResponse(ctx context.Context, mandateUid openapi_types.UUID, params *ListPaymentsForMandateParams, reqEditors ...RequestEditorFn) (*ListPaymentsForMandateResponse, error)

	// QueryFeedItemsWithResponse request
	QueryFeedItemsWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, params *QueryFeedItemsParams, reqEditors ...RequestEditorFn) (*QueryFeedItemsResponse, error)

	// QueryFeedItemsByCategoryWithTransactionTimesBetweenWithResponse request
	QueryFeedItemsByCategoryWithTransactionTimesBetweenWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, params *QueryFeedItemsByCategoryWithTransactionTimesBetweenParams, reqEditors ...RequestEditorFn) (*QueryFeedItemsByCategoryWithTransactionTimesBetweenResponse, error)

	// GetFeedItemWithResponse request
	GetFeedItemWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetFeedItemResponse, error)

	// GetFeedItemAttachmentsWithResponse request
	GetFeedItemAttachmentsWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetFeedItemAttachmentsResponse, error)

	// AttachToFeedItemWithBodyWithResponse request with any body
	AttachToFeedItemWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, params *AttachToFeedItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachToFeedItemResponse, error)

	// DownloadFeedItemAttachmentWithResponse request
	DownloadFeedItemAttachmentWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, feedItemAttachmentUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DownloadFeedItemAttachmentResponse, error)

	// GetMastercardFeedItemWithResponse request
	GetMastercardFeedItemWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMastercardFeedItemResponse, error)

	// GetReceiptWithResponse request
	GetReceiptWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetReceiptResponse, error)

	// CreateOrUpdateReceiptWithBodyWithResponse request with any body
	CreateOrUpdateReceiptWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateReceiptResponse, error)

	CreateOrUpdateReceiptWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body CreateOrUpdateReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateReceiptResponse, error)

	// GetReceiptsWithResponse request
	GetReceiptsWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetReceiptsResponse, error)

	// ChangeTransactionCategoryWithBodyWithResponse request with any body
	ChangeTransactionCategoryWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeTransactionCategoryResponse, error)

	ChangeTransactionCategoryWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body ChangeTransactionCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeTransactionCategoryResponse, error)

	// UpdateUserNoteWithBodyWithResponse request with any body
	UpdateUserNoteWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserNoteResponse, error)

	UpdateUserNoteWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body UpdateUserNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserNoteResponse, error)

	// StopRoundUpGoalWithResponse request
	StopRoundUpGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*StopRoundUpGoalResponse, error)

	// FetchRoundUpGoalWithResponse request
	FetchRoundUpGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*FetchRoundUpGoalResponse, error)

	// ActivateRoundUpGoalWithBodyWithResponse request with any body
	ActivateRoundUpGoalWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateRoundUpGoalResponse, error)

	ActivateRoundUpGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, body ActivateRoundUpGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateRoundUpGoalResponse, error)

	// QueryFeedItemsWithTransactionTimesBetweenWithResponse request
	QueryFeedItemsWithTransactionTimesBetweenWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *QueryFeedItemsWithTransactionTimesBetweenParams, reqEditors ...RequestEditorFn) (*QueryFeedItemsWithTransactionTimesBetweenResponse, error)

	// GetAuthorisingIndividualWithResponse request
	GetAuthorisingIndividualWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthorisingIndividualResponse, error)

	// LogoutIndividualWithResponse request
	LogoutIndividualWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutIndividualResponse, error)

	// GetTokenIdentityWithResponse request
	GetTokenIdentityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokenIdentityResponse, error)

	// GetPayeesWithResponse request
	GetPayeesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPayeesResponse, error)

	// CreatePayeeWithBodyWithResponse request with any body
	CreatePayeeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePayeeResponse, error)

	CreatePayeeWithResponse(ctx context.Context, body CreatePayeeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePayeeResponse, error)

	// DeletePayeeWithResponse request
	DeletePayeeWithResponse(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeletePayeeResponse, error)

	// GetPayeeWithResponse request
	GetPayeeWithResponse(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPayeeResponse, error)

	// UpdatePayeeWithBodyWithResponse request with any body
	UpdatePayeeWithBodyWithResponse(ctx context.Context, payeeUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePayeeResponse, error)

	UpdatePayeeWithResponse(ctx context.Context, payeeUid openapi_types.UUID, body UpdatePayeeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePayeeResponse, error)

	// CreatePayeeAccountWithBodyWithResponse request with any body
	CreatePayeeAccountWithBodyWithResponse(ctx context.Context, payeeUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePayeeAccountResponse, error)

	CreatePayeeAccountWithResponse(ctx context.Context, payeeUid openapi_types.UUID, body CreatePayeeAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePayeeAccountResponse, error)

	// DeletePayeeAccountWithResponse request
	DeletePayeeAccountWithResponse(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeletePayeeAccountResponse, error)

	// ListPaymentsForPayeeAccountWithResponse request
	ListPaymentsForPayeeAccountWithResponse(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, params *ListPaymentsForPayeeAccountParams, reqEditors ...RequestEditorFn) (*ListPaymentsForPayeeAccountResponse, error)

	// ListPaymentOrdersForAccountWithResponse request
	ListPaymentOrdersForAccountWithResponse(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListPaymentOrdersForAccountResponse, error)

	// ServePayeeImageFileWithResponse request
	ServePayeeImageFileWithResponse(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ServePayeeImageFileResponse, error)

	// MakeLocalPaymentWithBodyWithResponse request with any body
	MakeLocalPaymentWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MakeLocalPaymentResponse, error)

	MakeLocalPaymentWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, body MakeLocalPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*MakeLocalPaymentResponse, error)

	// ListStandingOrdersWithResponse request
	ListStandingOrdersWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListStandingOrdersResponse, error)

	// CreateStandingOrderWithBodyWithResponse request with any body
	CreateStandingOrderWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStandingOrderResponse, error)

	CreateStandingOrderWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, body CreateStandingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStandingOrderResponse, error)

	// CancelStandingOrderWithResponse request
	CancelStandingOrderWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*CancelStandingOrderResponse, error)

	// GetStandingOrderWithResponse request
	GetStandingOrderWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetStandingOrderResponse, error)

	// UpdateStandingOrderWithBodyWithResponse request with any body
	UpdateStandingOrderWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStandingOrderResponse, error)

	UpdateStandingOrderWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, body UpdateStandingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStandingOrderResponse, error)

	// ListNextPaymentDatesWithResponse request
	ListNextPaymentDatesWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, params *ListNextPaymentDatesParams, reqEditors ...RequestEditorFn) (*ListNextPaymentDatesResponse, error)

	// GetPaymentOrderWithResponse request
	GetPaymentOrderWithResponse(ctx context.Context, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPaymentOrderResponse, error)

	// GetPaymentOrderPaymentsWithResponse request
	GetPaymentOrderPaymentsWithResponse(ctx context.Context, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPaymentOrderPaymentsResponse, error)

	// GetSettleUpProfileWithResponse request
	GetSettleUpProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettleUpProfileResponse, error)
}

type CloseAccountHolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CloseAccountHolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CloseAccountHolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountHolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountHolder
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAccountHolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountHolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBusinessResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Business
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetBusinessResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBusinessResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCorrespondenceAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddressV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCorrespondenceAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCorrespondenceAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRegisteredAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddressV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetRegisteredAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRegisteredAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIndividualResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Individual
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetIndividualResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIndividualResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJointAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JointAccount
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetJointAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJointAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountHolderNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountHolderName
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAccountHolderNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountHolderNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSoleTraderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SoleTrader
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSoleTraderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSoleTraderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProfileImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadProfileImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DownloadProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProfileImageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProfileImageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProfileImageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSavingsGoalsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SavingsGoalsV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSavingsGoalsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSavingsGoalsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSavingsGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateOrUpdateSavingsGoalResponseV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateSavingsGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSavingsGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSavingsGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteSavingsGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSavingsGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSavingsGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SavingsGoalV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSavingsGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSavingsGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSavingsGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateOrUpdateSavingsGoalResponseV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateSavingsGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSavingsGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMoneyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SavingsGoalTransferResponseV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AddMoneyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMoneyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSavingsGoalPhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SavingsGoalPhotoV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSavingsGoalPhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSavingsGoalPhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecurringTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteRecurringTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecurringTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRecurringTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledSavingsPaymentV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetRecurringTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRecurringTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateRecurringTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SavingsGoalTransferResponseV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateRecurringTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateRecurringTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WithdrawMoneyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SavingsGoalTransferResponseV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r WithdrawMoneyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WithdrawMoneyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Spaces
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSpacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpendingSpaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpendingSpace
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSpendingSpaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpendingSpaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSpacePhotoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpacePhoto
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSpacePhotoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSpacePhotoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Accounts
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BalanceV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAccountBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfirmationOfFundsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConfirmationOfFundsResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetConfirmationOfFundsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfirmationOfFundsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountIdentifiersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountIdentifiers
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAccountIdentifiersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountIdentifiersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRecurringPaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RecurringCardPayments
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListRecurringPaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRecurringPaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySpendingInsightsByCounterpartyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpendingCounterPartySummary
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r QuerySpendingInsightsByCounterpartyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySpendingInsightsByCounterpartyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QuerySpendingInsightsBySpendingCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SpendingCategorySummary
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r QuerySpendingInsightsBySpendingCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QuerySpendingInsightsBySpendingCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AvailablePeriodsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountStatementPeriods
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AvailablePeriodsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AvailablePeriodsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadPDFStatementResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DownloadPDFStatementResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadPDFStatementResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadPDFStatementForDateRangeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DownloadPDFStatementForDateRangeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadPDFStatementForDateRangeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AddressesV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCurrentAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateCurrentAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCurrentAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCardsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Cards
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListCardsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCardsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableAtmResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EnableAtmResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableAtmResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableCurrencySwitchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EnableCurrencySwitchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableCurrencySwitchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableCardResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EnableCardResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableCardResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableGamblingPaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EnableGamblingPaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableGamblingPaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableMagStripePaymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EnableMagStripePaymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableMagStripePaymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableMobileWalletResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EnableMobileWalletResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableMobileWalletResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnableOnlinePaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EnableOnlinePaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnableOnlinePaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EnablePosResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r EnablePosResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EnablePosResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMandatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DirectDebitMandatesV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListMandatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMandatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMandatesForAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DirectDebitMandatesV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListMandatesForAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMandatesForAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelMandateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CancelMandateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelMandateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMandateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DirectDebitMandateV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetMandateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMandateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPaymentsForMandateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DirectDebitPaymentsResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPaymentsForMandateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPaymentsForMandateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryFeedItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeedItems
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r QueryFeedItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryFeedItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryFeedItemsByCategoryWithTransactionTimesBetweenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeedItems
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r QueryFeedItemsByCategoryWithTransactionTimesBetweenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryFeedItemsByCategoryWithTransactionTimesBetweenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeedItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeedItem
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFeedItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeedItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeedItemAttachmentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeedItemAttachments
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFeedItemAttachmentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeedItemAttachmentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AttachToFeedItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *openapi_types.UUID
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r AttachToFeedItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AttachToFeedItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DownloadFeedItemAttachmentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DownloadFeedItemAttachmentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DownloadFeedItemAttachmentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMastercardFeedItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MastercardFeedItem
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetMastercardFeedItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMastercardFeedItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReceiptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Receipt
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetReceiptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReceiptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrUpdateReceiptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReceiptCreationResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrUpdateReceiptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrUpdateReceiptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReceiptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Receipt
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetReceiptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReceiptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ChangeTransactionCategoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ChangeTransactionCategoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ChangeTransactionCategoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserNoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateUserNoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserNoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type StopRoundUpGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r StopRoundUpGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r StopRoundUpGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchRoundUpGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RoundUpGoalResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r FetchRoundUpGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchRoundUpGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateRoundUpGoalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ActivateRoundUpGoalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateRoundUpGoalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type QueryFeedItemsWithTransactionTimesBetweenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FeedItems
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r QueryFeedItemsWithTransactionTimesBetweenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r QueryFeedItemsWithTransactionTimesBetweenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAuthorisingIndividualResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Individual
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetAuthorisingIndividualResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAuthorisingIndividualResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutIndividualResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r LogoutIndividualResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutIndividualResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *IdentityV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetTokenIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayeesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Payees
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPayeesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayeesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePayeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PayeeCreationResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePayeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePayeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePayeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePayeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePayeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPayeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Payee
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPayeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPayeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePayeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConsentInformation
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePayeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePayeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePayeeAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PayeeAccountCreationResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreatePayeeAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePayeeAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePayeeAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeletePayeeAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePayeeAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPaymentsForPayeeAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Payments
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPaymentsForPayeeAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPaymentsForPayeeAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPaymentOrdersForAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ScheduledPaymentResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPaymentOrdersForAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPaymentOrdersForAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ServePayeeImageFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ServePayeeImageFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ServePayeeImageFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type MakeLocalPaymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstructLocalPaymentResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r MakeLocalPaymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r MakeLocalPaymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListStandingOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StandingOrdersResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListStandingOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListStandingOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStandingOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CreateStandingOrderResult
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateStandingOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStandingOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelStandingOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CancelStandingOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelStandingOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStandingOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StandingOrder
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetStandingOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStandingOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStandingOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateStandingOrderResult
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateStandingOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStandingOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNextPaymentDatesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NextPaymentDatesResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListNextPaymentDatesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNextPaymentDatesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentOrderV2
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPaymentOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentOrderPaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PaymentOrderPaymentsResponse
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPaymentOrderPaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentOrderPaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSettleUpProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SettleUpProfile
	JSON4XX      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetSettleUpProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSettleUpProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CloseAccountHolderWithResponse request returning *CloseAccountHolderResponse
func (c *ClientWithResponses) CloseAccountHolderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*CloseAccountHolderResponse, error) {
	rsp, err := c.CloseAccountHolder(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCloseAccountHolderResponse(rsp)
}

// GetAccountHolderWithResponse request returning *GetAccountHolderResponse
func (c *ClientWithResponses) GetAccountHolderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountHolderResponse, error) {
	rsp, err := c.GetAccountHolder(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountHolderResponse(rsp)
}

// GetBusinessWithResponse request returning *GetBusinessResponse
func (c *ClientWithResponses) GetBusinessWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetBusinessResponse, error) {
	rsp, err := c.GetBusiness(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBusinessResponse(rsp)
}

// GetCorrespondenceAddressWithResponse request returning *GetCorrespondenceAddressResponse
func (c *ClientWithResponses) GetCorrespondenceAddressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCorrespondenceAddressResponse, error) {
	rsp, err := c.GetCorrespondenceAddress(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCorrespondenceAddressResponse(rsp)
}

// GetRegisteredAddressWithResponse request returning *GetRegisteredAddressResponse
func (c *ClientWithResponses) GetRegisteredAddressWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRegisteredAddressResponse, error) {
	rsp, err := c.GetRegisteredAddress(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRegisteredAddressResponse(rsp)
}

// GetIndividualWithResponse request returning *GetIndividualResponse
func (c *ClientWithResponses) GetIndividualWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetIndividualResponse, error) {
	rsp, err := c.GetIndividual(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIndividualResponse(rsp)
}

// UpdateEmailWithBodyWithResponse request with arbitrary body returning *UpdateEmailResponse
func (c *ClientWithResponses) UpdateEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateEmailResponse, error) {
	rsp, err := c.UpdateEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEmailResponse(rsp)
}

func (c *ClientWithResponses) UpdateEmailWithResponse(ctx context.Context, body UpdateEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateEmailResponse, error) {
	rsp, err := c.UpdateEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEmailResponse(rsp)
}

// GetJointAccountWithResponse request returning *GetJointAccountResponse
func (c *ClientWithResponses) GetJointAccountWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetJointAccountResponse, error) {
	rsp, err := c.GetJointAccount(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJointAccountResponse(rsp)
}

// GetAccountHolderNameWithResponse request returning *GetAccountHolderNameResponse
func (c *ClientWithResponses) GetAccountHolderNameWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountHolderNameResponse, error) {
	rsp, err := c.GetAccountHolderName(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountHolderNameResponse(rsp)
}

// GetSoleTraderWithResponse request returning *GetSoleTraderResponse
func (c *ClientWithResponses) GetSoleTraderWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSoleTraderResponse, error) {
	rsp, err := c.GetSoleTrader(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSoleTraderResponse(rsp)
}

// DeleteProfileImageWithResponse request returning *DeleteProfileImageResponse
func (c *ClientWithResponses) DeleteProfileImageWithResponse(ctx context.Context, accountHolderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteProfileImageResponse, error) {
	rsp, err := c.DeleteProfileImage(ctx, accountHolderUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProfileImageResponse(rsp)
}

// DownloadProfileImageWithResponse request returning *DownloadProfileImageResponse
func (c *ClientWithResponses) DownloadProfileImageWithResponse(ctx context.Context, accountHolderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DownloadProfileImageResponse, error) {
	rsp, err := c.DownloadProfileImage(ctx, accountHolderUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadProfileImageResponse(rsp)
}

// UpdateProfileImageWithBodyWithResponse request with arbitrary body returning *UpdateProfileImageResponse
func (c *ClientWithResponses) UpdateProfileImageWithBodyWithResponse(ctx context.Context, accountHolderUid openapi_types.UUID, params *UpdateProfileImageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProfileImageResponse, error) {
	rsp, err := c.UpdateProfileImageWithBody(ctx, accountHolderUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProfileImageResponse(rsp)
}

// GetSavingsGoalsWithResponse request returning *GetSavingsGoalsResponse
func (c *ClientWithResponses) GetSavingsGoalsWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSavingsGoalsResponse, error) {
	rsp, err := c.GetSavingsGoals(ctx, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSavingsGoalsResponse(rsp)
}

// CreateSavingsGoalWithBodyWithResponse request with arbitrary body returning *CreateSavingsGoalResponse
func (c *ClientWithResponses) CreateSavingsGoalWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSavingsGoalResponse, error) {
	rsp, err := c.CreateSavingsGoalWithBody(ctx, accountUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSavingsGoalResponse(rsp)
}

func (c *ClientWithResponses) CreateSavingsGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, body CreateSavingsGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSavingsGoalResponse, error) {
	rsp, err := c.CreateSavingsGoal(ctx, accountUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSavingsGoalResponse(rsp)
}

// DeleteSavingsGoalWithResponse request returning *DeleteSavingsGoalResponse
func (c *ClientWithResponses) DeleteSavingsGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteSavingsGoalResponse, error) {
	rsp, err := c.DeleteSavingsGoal(ctx, accountUid, savingsGoalUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSavingsGoalResponse(rsp)
}

// GetSavingsGoalWithResponse request returning *GetSavingsGoalResponse
func (c *ClientWithResponses) GetSavingsGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSavingsGoalResponse, error) {
	rsp, err := c.GetSavingsGoal(ctx, accountUid, savingsGoalUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSavingsGoalResponse(rsp)
}

// UpdateSavingsGoalWithBodyWithResponse request with arbitrary body returning *UpdateSavingsGoalResponse
func (c *ClientWithResponses) UpdateSavingsGoalWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSavingsGoalResponse, error) {
	rsp, err := c.UpdateSavingsGoalWithBody(ctx, accountUid, savingsGoalUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSavingsGoalResponse(rsp)
}

func (c *ClientWithResponses) UpdateSavingsGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, body UpdateSavingsGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSavingsGoalResponse, error) {
	rsp, err := c.UpdateSavingsGoal(ctx, accountUid, savingsGoalUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSavingsGoalResponse(rsp)
}

// AddMoneyWithBodyWithResponse request with arbitrary body returning *AddMoneyResponse
func (c *ClientWithResponses) AddMoneyWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMoneyResponse, error) {
	rsp, err := c.AddMoneyWithBody(ctx, accountUid, savingsGoalUid, transferUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMoneyResponse(rsp)
}

func (c *ClientWithResponses) AddMoneyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, body AddMoneyJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMoneyResponse, error) {
	rsp, err := c.AddMoney(ctx, accountUid, savingsGoalUid, transferUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddMoneyResponse(rsp)
}

// GetSavingsGoalPhotoWithResponse request returning *GetSavingsGoalPhotoResponse
func (c *ClientWithResponses) GetSavingsGoalPhotoWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSavingsGoalPhotoResponse, error) {
	rsp, err := c.GetSavingsGoalPhoto(ctx, accountUid, savingsGoalUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSavingsGoalPhotoResponse(rsp)
}

// DeleteRecurringTransferWithResponse request returning *DeleteRecurringTransferResponse
func (c *ClientWithResponses) DeleteRecurringTransferWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteRecurringTransferResponse, error) {
	rsp, err := c.DeleteRecurringTransfer(ctx, accountUid, savingsGoalUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecurringTransferResponse(rsp)
}

// GetRecurringTransferWithResponse request returning *GetRecurringTransferResponse
func (c *ClientWithResponses) GetRecurringTransferWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRecurringTransferResponse, error) {
	rsp, err := c.GetRecurringTransfer(ctx, accountUid, savingsGoalUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRecurringTransferResponse(rsp)
}

// CreateOrUpdateRecurringTransferWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateRecurringTransferResponse
func (c *ClientWithResponses) CreateOrUpdateRecurringTransferWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateRecurringTransferResponse, error) {
	rsp, err := c.CreateOrUpdateRecurringTransferWithBody(ctx, accountUid, savingsGoalUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateRecurringTransferResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateRecurringTransferWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, body CreateOrUpdateRecurringTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateRecurringTransferResponse, error) {
	rsp, err := c.CreateOrUpdateRecurringTransfer(ctx, accountUid, savingsGoalUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateRecurringTransferResponse(rsp)
}

// WithdrawMoneyWithBodyWithResponse request with arbitrary body returning *WithdrawMoneyResponse
func (c *ClientWithResponses) WithdrawMoneyWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WithdrawMoneyResponse, error) {
	rsp, err := c.WithdrawMoneyWithBody(ctx, accountUid, savingsGoalUid, transferUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWithdrawMoneyResponse(rsp)
}

func (c *ClientWithResponses) WithdrawMoneyWithResponse(ctx context.Context, accountUid openapi_types.UUID, savingsGoalUid openapi_types.UUID, transferUid openapi_types.UUID, body WithdrawMoneyJSONRequestBody, reqEditors ...RequestEditorFn) (*WithdrawMoneyResponse, error) {
	rsp, err := c.WithdrawMoney(ctx, accountUid, savingsGoalUid, transferUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWithdrawMoneyResponse(rsp)
}

// GetSpacesWithResponse request returning *GetSpacesResponse
func (c *ClientWithResponses) GetSpacesWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSpacesResponse, error) {
	rsp, err := c.GetSpaces(ctx, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpacesResponse(rsp)
}

// GetSpendingSpaceWithResponse request returning *GetSpendingSpaceResponse
func (c *ClientWithResponses) GetSpendingSpaceWithResponse(ctx context.Context, accountUid openapi_types.UUID, spaceUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSpendingSpaceResponse, error) {
	rsp, err := c.GetSpendingSpace(ctx, accountUid, spaceUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpendingSpaceResponse(rsp)
}

// GetSpacePhotoWithResponse request returning *GetSpacePhotoResponse
func (c *ClientWithResponses) GetSpacePhotoWithResponse(ctx context.Context, accountUid openapi_types.UUID, spaceUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetSpacePhotoResponse, error) {
	rsp, err := c.GetSpacePhoto(ctx, accountUid, spaceUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSpacePhotoResponse(rsp)
}

// GetAccountsWithResponse request returning *GetAccountsResponse
func (c *ClientWithResponses) GetAccountsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error) {
	rsp, err := c.GetAccounts(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsResponse(rsp)
}

// GetAccountBalanceWithResponse request returning *GetAccountBalanceResponse
func (c *ClientWithResponses) GetAccountBalanceWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAccountBalanceResponse, error) {
	rsp, err := c.GetAccountBalance(ctx, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountBalanceResponse(rsp)
}

// GetConfirmationOfFundsWithResponse request returning *GetConfirmationOfFundsResponse
func (c *ClientWithResponses) GetConfirmationOfFundsWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *GetConfirmationOfFundsParams, reqEditors ...RequestEditorFn) (*GetConfirmationOfFundsResponse, error) {
	rsp, err := c.GetConfirmationOfFunds(ctx, accountUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfirmationOfFundsResponse(rsp)
}

// GetAccountIdentifiersWithResponse request returning *GetAccountIdentifiersResponse
func (c *ClientWithResponses) GetAccountIdentifiersWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAccountIdentifiersResponse, error) {
	rsp, err := c.GetAccountIdentifiers(ctx, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountIdentifiersResponse(rsp)
}

// ListRecurringPaymentsWithResponse request returning *ListRecurringPaymentsResponse
func (c *ClientWithResponses) ListRecurringPaymentsWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListRecurringPaymentsResponse, error) {
	rsp, err := c.ListRecurringPayments(ctx, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRecurringPaymentsResponse(rsp)
}

// QuerySpendingInsightsByCounterpartyWithResponse request returning *QuerySpendingInsightsByCounterpartyResponse
func (c *ClientWithResponses) QuerySpendingInsightsByCounterpartyWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *QuerySpendingInsightsByCounterpartyParams, reqEditors ...RequestEditorFn) (*QuerySpendingInsightsByCounterpartyResponse, error) {
	rsp, err := c.QuerySpendingInsightsByCounterparty(ctx, accountUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySpendingInsightsByCounterpartyResponse(rsp)
}

// QuerySpendingInsightsBySpendingCategoryWithResponse request returning *QuerySpendingInsightsBySpendingCategoryResponse
func (c *ClientWithResponses) QuerySpendingInsightsBySpendingCategoryWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *QuerySpendingInsightsBySpendingCategoryParams, reqEditors ...RequestEditorFn) (*QuerySpendingInsightsBySpendingCategoryResponse, error) {
	rsp, err := c.QuerySpendingInsightsBySpendingCategory(ctx, accountUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQuerySpendingInsightsBySpendingCategoryResponse(rsp)
}

// AvailablePeriodsWithResponse request returning *AvailablePeriodsResponse
func (c *ClientWithResponses) AvailablePeriodsWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*AvailablePeriodsResponse, error) {
	rsp, err := c.AvailablePeriods(ctx, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAvailablePeriodsResponse(rsp)
}

// DownloadPDFStatementWithResponse request returning *DownloadPDFStatementResponse
func (c *ClientWithResponses) DownloadPDFStatementWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *DownloadPDFStatementParams, reqEditors ...RequestEditorFn) (*DownloadPDFStatementResponse, error) {
	rsp, err := c.DownloadPDFStatement(ctx, accountUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadPDFStatementResponse(rsp)
}

// DownloadPDFStatementForDateRangeWithResponse request returning *DownloadPDFStatementForDateRangeResponse
func (c *ClientWithResponses) DownloadPDFStatementForDateRangeWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *DownloadPDFStatementForDateRangeParams, reqEditors ...RequestEditorFn) (*DownloadPDFStatementForDateRangeResponse, error) {
	rsp, err := c.DownloadPDFStatementForDateRange(ctx, accountUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadPDFStatementForDateRangeResponse(rsp)
}

// GetAddressesWithResponse request returning *GetAddressesResponse
func (c *ClientWithResponses) GetAddressesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAddressesResponse, error) {
	rsp, err := c.GetAddresses(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAddressesResponse(rsp)
}

// UpdateCurrentAddressWithBodyWithResponse request with arbitrary body returning *UpdateCurrentAddressResponse
func (c *ClientWithResponses) UpdateCurrentAddressWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCurrentAddressResponse, error) {
	rsp, err := c.UpdateCurrentAddressWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentAddressResponse(rsp)
}

func (c *ClientWithResponses) UpdateCurrentAddressWithResponse(ctx context.Context, body UpdateCurrentAddressJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateCurrentAddressResponse, error) {
	rsp, err := c.UpdateCurrentAddress(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCurrentAddressResponse(rsp)
}

// ListCardsWithResponse request returning *ListCardsResponse
func (c *ClientWithResponses) ListCardsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCardsResponse, error) {
	rsp, err := c.ListCards(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCardsResponse(rsp)
}

// EnableAtmWithBodyWithResponse request with arbitrary body returning *EnableAtmResponse
func (c *ClientWithResponses) EnableAtmWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableAtmResponse, error) {
	rsp, err := c.EnableAtmWithBody(ctx, cardUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableAtmResponse(rsp)
}

func (c *ClientWithResponses) EnableAtmWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableAtmJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableAtmResponse, error) {
	rsp, err := c.EnableAtm(ctx, cardUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableAtmResponse(rsp)
}

// EnableCurrencySwitchWithBodyWithResponse request with arbitrary body returning *EnableCurrencySwitchResponse
func (c *ClientWithResponses) EnableCurrencySwitchWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableCurrencySwitchResponse, error) {
	rsp, err := c.EnableCurrencySwitchWithBody(ctx, cardUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableCurrencySwitchResponse(rsp)
}

func (c *ClientWithResponses) EnableCurrencySwitchWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableCurrencySwitchJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableCurrencySwitchResponse, error) {
	rsp, err := c.EnableCurrencySwitch(ctx, cardUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableCurrencySwitchResponse(rsp)
}

// EnableCardWithBodyWithResponse request with arbitrary body returning *EnableCardResponse
func (c *ClientWithResponses) EnableCardWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableCardResponse, error) {
	rsp, err := c.EnableCardWithBody(ctx, cardUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableCardResponse(rsp)
}

func (c *ClientWithResponses) EnableCardWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableCardJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableCardResponse, error) {
	rsp, err := c.EnableCard(ctx, cardUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableCardResponse(rsp)
}

// EnableGamblingPaymentsWithBodyWithResponse request with arbitrary body returning *EnableGamblingPaymentsResponse
func (c *ClientWithResponses) EnableGamblingPaymentsWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableGamblingPaymentsResponse, error) {
	rsp, err := c.EnableGamblingPaymentsWithBody(ctx, cardUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableGamblingPaymentsResponse(rsp)
}

func (c *ClientWithResponses) EnableGamblingPaymentsWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableGamblingPaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableGamblingPaymentsResponse, error) {
	rsp, err := c.EnableGamblingPayments(ctx, cardUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableGamblingPaymentsResponse(rsp)
}

// EnableMagStripePaymentWithBodyWithResponse request with arbitrary body returning *EnableMagStripePaymentResponse
func (c *ClientWithResponses) EnableMagStripePaymentWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableMagStripePaymentResponse, error) {
	rsp, err := c.EnableMagStripePaymentWithBody(ctx, cardUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableMagStripePaymentResponse(rsp)
}

func (c *ClientWithResponses) EnableMagStripePaymentWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableMagStripePaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableMagStripePaymentResponse, error) {
	rsp, err := c.EnableMagStripePayment(ctx, cardUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableMagStripePaymentResponse(rsp)
}

// EnableMobileWalletWithBodyWithResponse request with arbitrary body returning *EnableMobileWalletResponse
func (c *ClientWithResponses) EnableMobileWalletWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableMobileWalletResponse, error) {
	rsp, err := c.EnableMobileWalletWithBody(ctx, cardUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableMobileWalletResponse(rsp)
}

func (c *ClientWithResponses) EnableMobileWalletWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableMobileWalletJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableMobileWalletResponse, error) {
	rsp, err := c.EnableMobileWallet(ctx, cardUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableMobileWalletResponse(rsp)
}

// EnableOnlinePaymentsWithBodyWithResponse request with arbitrary body returning *EnableOnlinePaymentsResponse
func (c *ClientWithResponses) EnableOnlinePaymentsWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnableOnlinePaymentsResponse, error) {
	rsp, err := c.EnableOnlinePaymentsWithBody(ctx, cardUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableOnlinePaymentsResponse(rsp)
}

func (c *ClientWithResponses) EnableOnlinePaymentsWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnableOnlinePaymentsJSONRequestBody, reqEditors ...RequestEditorFn) (*EnableOnlinePaymentsResponse, error) {
	rsp, err := c.EnableOnlinePayments(ctx, cardUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnableOnlinePaymentsResponse(rsp)
}

// EnablePosWithBodyWithResponse request with arbitrary body returning *EnablePosResponse
func (c *ClientWithResponses) EnablePosWithBodyWithResponse(ctx context.Context, cardUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EnablePosResponse, error) {
	rsp, err := c.EnablePosWithBody(ctx, cardUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnablePosResponse(rsp)
}

func (c *ClientWithResponses) EnablePosWithResponse(ctx context.Context, cardUid openapi_types.UUID, body EnablePosJSONRequestBody, reqEditors ...RequestEditorFn) (*EnablePosResponse, error) {
	rsp, err := c.EnablePos(ctx, cardUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEnablePosResponse(rsp)
}

// ListMandatesWithResponse request returning *ListMandatesResponse
func (c *ClientWithResponses) ListMandatesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListMandatesResponse, error) {
	rsp, err := c.ListMandates(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMandatesResponse(rsp)
}

// ListMandatesForAccountWithResponse request returning *ListMandatesForAccountResponse
func (c *ClientWithResponses) ListMandatesForAccountWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListMandatesForAccountResponse, error) {
	rsp, err := c.ListMandatesForAccount(ctx, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMandatesForAccountResponse(rsp)
}

// CancelMandateWithResponse request returning *CancelMandateResponse
func (c *ClientWithResponses) CancelMandateWithResponse(ctx context.Context, mandateUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*CancelMandateResponse, error) {
	rsp, err := c.CancelMandate(ctx, mandateUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelMandateResponse(rsp)
}

// GetMandateWithResponse request returning *GetMandateResponse
func (c *ClientWithResponses) GetMandateWithResponse(ctx context.Context, mandateUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMandateResponse, error) {
	rsp, err := c.GetMandate(ctx, mandateUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMandateResponse(rsp)
}

// ListPaymentsForMandateWithResponse request returning *ListPaymentsForMandateResponse
func (c *ClientWithResponses) ListPaymentsForMandateWithResponse(ctx context.Context, mandateUid openapi_types.UUID, params *ListPaymentsForMandateParams, reqEditors ...RequestEditorFn) (*ListPaymentsForMandateResponse, error) {
	rsp, err := c.ListPaymentsForMandate(ctx, mandateUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPaymentsForMandateResponse(rsp)
}

// QueryFeedItemsWithResponse request returning *QueryFeedItemsResponse
func (c *ClientWithResponses) QueryFeedItemsWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, params *QueryFeedItemsParams, reqEditors ...RequestEditorFn) (*QueryFeedItemsResponse, error) {
	rsp, err := c.QueryFeedItems(ctx, accountUid, categoryUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryFeedItemsResponse(rsp)
}

// QueryFeedItemsByCategoryWithTransactionTimesBetweenWithResponse request returning *QueryFeedItemsByCategoryWithTransactionTimesBetweenResponse
func (c *ClientWithResponses) QueryFeedItemsByCategoryWithTransactionTimesBetweenWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, params *QueryFeedItemsByCategoryWithTransactionTimesBetweenParams, reqEditors ...RequestEditorFn) (*QueryFeedItemsByCategoryWithTransactionTimesBetweenResponse, error) {
	rsp, err := c.QueryFeedItemsByCategoryWithTransactionTimesBetween(ctx, accountUid, categoryUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryFeedItemsByCategoryWithTransactionTimesBetweenResponse(rsp)
}

// GetFeedItemWithResponse request returning *GetFeedItemResponse
func (c *ClientWithResponses) GetFeedItemWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetFeedItemResponse, error) {
	rsp, err := c.GetFeedItem(ctx, accountUid, categoryUid, feedItemUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeedItemResponse(rsp)
}

// GetFeedItemAttachmentsWithResponse request returning *GetFeedItemAttachmentsResponse
func (c *ClientWithResponses) GetFeedItemAttachmentsWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetFeedItemAttachmentsResponse, error) {
	rsp, err := c.GetFeedItemAttachments(ctx, accountUid, categoryUid, feedItemUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeedItemAttachmentsResponse(rsp)
}

// AttachToFeedItemWithBodyWithResponse request with arbitrary body returning *AttachToFeedItemResponse
func (c *ClientWithResponses) AttachToFeedItemWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, params *AttachToFeedItemParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AttachToFeedItemResponse, error) {
	rsp, err := c.AttachToFeedItemWithBody(ctx, accountUid, categoryUid, feedItemUid, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAttachToFeedItemResponse(rsp)
}

// DownloadFeedItemAttachmentWithResponse request returning *DownloadFeedItemAttachmentResponse
func (c *ClientWithResponses) DownloadFeedItemAttachmentWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, feedItemAttachmentUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DownloadFeedItemAttachmentResponse, error) {
	rsp, err := c.DownloadFeedItemAttachment(ctx, accountUid, categoryUid, feedItemUid, feedItemAttachmentUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDownloadFeedItemAttachmentResponse(rsp)
}

// GetMastercardFeedItemWithResponse request returning *GetMastercardFeedItemResponse
func (c *ClientWithResponses) GetMastercardFeedItemWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMastercardFeedItemResponse, error) {
	rsp, err := c.GetMastercardFeedItem(ctx, accountUid, categoryUid, feedItemUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMastercardFeedItemResponse(rsp)
}

// GetReceiptWithResponse request returning *GetReceiptResponse
func (c *ClientWithResponses) GetReceiptWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetReceiptResponse, error) {
	rsp, err := c.GetReceipt(ctx, accountUid, categoryUid, feedItemUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReceiptResponse(rsp)
}

// CreateOrUpdateReceiptWithBodyWithResponse request with arbitrary body returning *CreateOrUpdateReceiptResponse
func (c *ClientWithResponses) CreateOrUpdateReceiptWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrUpdateReceiptResponse, error) {
	rsp, err := c.CreateOrUpdateReceiptWithBody(ctx, accountUid, categoryUid, feedItemUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateReceiptResponse(rsp)
}

func (c *ClientWithResponses) CreateOrUpdateReceiptWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body CreateOrUpdateReceiptJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrUpdateReceiptResponse, error) {
	rsp, err := c.CreateOrUpdateReceipt(ctx, accountUid, categoryUid, feedItemUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrUpdateReceiptResponse(rsp)
}

// GetReceiptsWithResponse request returning *GetReceiptsResponse
func (c *ClientWithResponses) GetReceiptsWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetReceiptsResponse, error) {
	rsp, err := c.GetReceipts(ctx, accountUid, categoryUid, feedItemUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReceiptsResponse(rsp)
}

// ChangeTransactionCategoryWithBodyWithResponse request with arbitrary body returning *ChangeTransactionCategoryResponse
func (c *ClientWithResponses) ChangeTransactionCategoryWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ChangeTransactionCategoryResponse, error) {
	rsp, err := c.ChangeTransactionCategoryWithBody(ctx, accountUid, categoryUid, feedItemUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeTransactionCategoryResponse(rsp)
}

func (c *ClientWithResponses) ChangeTransactionCategoryWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body ChangeTransactionCategoryJSONRequestBody, reqEditors ...RequestEditorFn) (*ChangeTransactionCategoryResponse, error) {
	rsp, err := c.ChangeTransactionCategory(ctx, accountUid, categoryUid, feedItemUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseChangeTransactionCategoryResponse(rsp)
}

// UpdateUserNoteWithBodyWithResponse request with arbitrary body returning *UpdateUserNoteResponse
func (c *ClientWithResponses) UpdateUserNoteWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserNoteResponse, error) {
	rsp, err := c.UpdateUserNoteWithBody(ctx, accountUid, categoryUid, feedItemUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserNoteResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserNoteWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, feedItemUid openapi_types.UUID, body UpdateUserNoteJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserNoteResponse, error) {
	rsp, err := c.UpdateUserNote(ctx, accountUid, categoryUid, feedItemUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserNoteResponse(rsp)
}

// StopRoundUpGoalWithResponse request returning *StopRoundUpGoalResponse
func (c *ClientWithResponses) StopRoundUpGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*StopRoundUpGoalResponse, error) {
	rsp, err := c.StopRoundUpGoal(ctx, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseStopRoundUpGoalResponse(rsp)
}

// FetchRoundUpGoalWithResponse request returning *FetchRoundUpGoalResponse
func (c *ClientWithResponses) FetchRoundUpGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*FetchRoundUpGoalResponse, error) {
	rsp, err := c.FetchRoundUpGoal(ctx, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchRoundUpGoalResponse(rsp)
}

// ActivateRoundUpGoalWithBodyWithResponse request with arbitrary body returning *ActivateRoundUpGoalResponse
func (c *ClientWithResponses) ActivateRoundUpGoalWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateRoundUpGoalResponse, error) {
	rsp, err := c.ActivateRoundUpGoalWithBody(ctx, accountUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateRoundUpGoalResponse(rsp)
}

func (c *ClientWithResponses) ActivateRoundUpGoalWithResponse(ctx context.Context, accountUid openapi_types.UUID, body ActivateRoundUpGoalJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateRoundUpGoalResponse, error) {
	rsp, err := c.ActivateRoundUpGoal(ctx, accountUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateRoundUpGoalResponse(rsp)
}

// QueryFeedItemsWithTransactionTimesBetweenWithResponse request returning *QueryFeedItemsWithTransactionTimesBetweenResponse
func (c *ClientWithResponses) QueryFeedItemsWithTransactionTimesBetweenWithResponse(ctx context.Context, accountUid openapi_types.UUID, params *QueryFeedItemsWithTransactionTimesBetweenParams, reqEditors ...RequestEditorFn) (*QueryFeedItemsWithTransactionTimesBetweenResponse, error) {
	rsp, err := c.QueryFeedItemsWithTransactionTimesBetween(ctx, accountUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseQueryFeedItemsWithTransactionTimesBetweenResponse(rsp)
}

// GetAuthorisingIndividualWithResponse request returning *GetAuthorisingIndividualResponse
func (c *ClientWithResponses) GetAuthorisingIndividualWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAuthorisingIndividualResponse, error) {
	rsp, err := c.GetAuthorisingIndividual(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAuthorisingIndividualResponse(rsp)
}

// LogoutIndividualWithResponse request returning *LogoutIndividualResponse
func (c *ClientWithResponses) LogoutIndividualWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutIndividualResponse, error) {
	rsp, err := c.LogoutIndividual(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutIndividualResponse(rsp)
}

// GetTokenIdentityWithResponse request returning *GetTokenIdentityResponse
func (c *ClientWithResponses) GetTokenIdentityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTokenIdentityResponse, error) {
	rsp, err := c.GetTokenIdentity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenIdentityResponse(rsp)
}

// GetPayeesWithResponse request returning *GetPayeesResponse
func (c *ClientWithResponses) GetPayeesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPayeesResponse, error) {
	rsp, err := c.GetPayees(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayeesResponse(rsp)
}

// CreatePayeeWithBodyWithResponse request with arbitrary body returning *CreatePayeeResponse
func (c *ClientWithResponses) CreatePayeeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePayeeResponse, error) {
	rsp, err := c.CreatePayeeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePayeeResponse(rsp)
}

func (c *ClientWithResponses) CreatePayeeWithResponse(ctx context.Context, body CreatePayeeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePayeeResponse, error) {
	rsp, err := c.CreatePayee(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePayeeResponse(rsp)
}

// DeletePayeeWithResponse request returning *DeletePayeeResponse
func (c *ClientWithResponses) DeletePayeeWithResponse(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeletePayeeResponse, error) {
	rsp, err := c.DeletePayee(ctx, payeeUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePayeeResponse(rsp)
}

// GetPayeeWithResponse request returning *GetPayeeResponse
func (c *ClientWithResponses) GetPayeeWithResponse(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPayeeResponse, error) {
	rsp, err := c.GetPayee(ctx, payeeUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPayeeResponse(rsp)
}

// UpdatePayeeWithBodyWithResponse request with arbitrary body returning *UpdatePayeeResponse
func (c *ClientWithResponses) UpdatePayeeWithBodyWithResponse(ctx context.Context, payeeUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePayeeResponse, error) {
	rsp, err := c.UpdatePayeeWithBody(ctx, payeeUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePayeeResponse(rsp)
}

func (c *ClientWithResponses) UpdatePayeeWithResponse(ctx context.Context, payeeUid openapi_types.UUID, body UpdatePayeeJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePayeeResponse, error) {
	rsp, err := c.UpdatePayee(ctx, payeeUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePayeeResponse(rsp)
}

// CreatePayeeAccountWithBodyWithResponse request with arbitrary body returning *CreatePayeeAccountResponse
func (c *ClientWithResponses) CreatePayeeAccountWithBodyWithResponse(ctx context.Context, payeeUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePayeeAccountResponse, error) {
	rsp, err := c.CreatePayeeAccountWithBody(ctx, payeeUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePayeeAccountResponse(rsp)
}

func (c *ClientWithResponses) CreatePayeeAccountWithResponse(ctx context.Context, payeeUid openapi_types.UUID, body CreatePayeeAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreatePayeeAccountResponse, error) {
	rsp, err := c.CreatePayeeAccount(ctx, payeeUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePayeeAccountResponse(rsp)
}

// DeletePayeeAccountWithResponse request returning *DeletePayeeAccountResponse
func (c *ClientWithResponses) DeletePayeeAccountWithResponse(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeletePayeeAccountResponse, error) {
	rsp, err := c.DeletePayeeAccount(ctx, payeeUid, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePayeeAccountResponse(rsp)
}

// ListPaymentsForPayeeAccountWithResponse request returning *ListPaymentsForPayeeAccountResponse
func (c *ClientWithResponses) ListPaymentsForPayeeAccountWithResponse(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, params *ListPaymentsForPayeeAccountParams, reqEditors ...RequestEditorFn) (*ListPaymentsForPayeeAccountResponse, error) {
	rsp, err := c.ListPaymentsForPayeeAccount(ctx, payeeUid, accountUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPaymentsForPayeeAccountResponse(rsp)
}

// ListPaymentOrdersForAccountWithResponse request returning *ListPaymentOrdersForAccountResponse
func (c *ClientWithResponses) ListPaymentOrdersForAccountWithResponse(ctx context.Context, payeeUid openapi_types.UUID, accountUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListPaymentOrdersForAccountResponse, error) {
	rsp, err := c.ListPaymentOrdersForAccount(ctx, payeeUid, accountUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListPaymentOrdersForAccountResponse(rsp)
}

// ServePayeeImageFileWithResponse request returning *ServePayeeImageFileResponse
func (c *ClientWithResponses) ServePayeeImageFileWithResponse(ctx context.Context, payeeUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ServePayeeImageFileResponse, error) {
	rsp, err := c.ServePayeeImageFile(ctx, payeeUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseServePayeeImageFileResponse(rsp)
}

// MakeLocalPaymentWithBodyWithResponse request with arbitrary body returning *MakeLocalPaymentResponse
func (c *ClientWithResponses) MakeLocalPaymentWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*MakeLocalPaymentResponse, error) {
	rsp, err := c.MakeLocalPaymentWithBody(ctx, accountUid, categoryUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMakeLocalPaymentResponse(rsp)
}

func (c *ClientWithResponses) MakeLocalPaymentWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, body MakeLocalPaymentJSONRequestBody, reqEditors ...RequestEditorFn) (*MakeLocalPaymentResponse, error) {
	rsp, err := c.MakeLocalPayment(ctx, accountUid, categoryUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseMakeLocalPaymentResponse(rsp)
}

// ListStandingOrdersWithResponse request returning *ListStandingOrdersResponse
func (c *ClientWithResponses) ListStandingOrdersWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*ListStandingOrdersResponse, error) {
	rsp, err := c.ListStandingOrders(ctx, accountUid, categoryUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListStandingOrdersResponse(rsp)
}

// CreateStandingOrderWithBodyWithResponse request with arbitrary body returning *CreateStandingOrderResponse
func (c *ClientWithResponses) CreateStandingOrderWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStandingOrderResponse, error) {
	rsp, err := c.CreateStandingOrderWithBody(ctx, accountUid, categoryUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStandingOrderResponse(rsp)
}

func (c *ClientWithResponses) CreateStandingOrderWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, body CreateStandingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateStandingOrderResponse, error) {
	rsp, err := c.CreateStandingOrder(ctx, accountUid, categoryUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStandingOrderResponse(rsp)
}

// CancelStandingOrderWithResponse request returning *CancelStandingOrderResponse
func (c *ClientWithResponses) CancelStandingOrderWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*CancelStandingOrderResponse, error) {
	rsp, err := c.CancelStandingOrder(ctx, accountUid, categoryUid, paymentOrderUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelStandingOrderResponse(rsp)
}

// GetStandingOrderWithResponse request returning *GetStandingOrderResponse
func (c *ClientWithResponses) GetStandingOrderWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetStandingOrderResponse, error) {
	rsp, err := c.GetStandingOrder(ctx, accountUid, categoryUid, paymentOrderUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStandingOrderResponse(rsp)
}

// UpdateStandingOrderWithBodyWithResponse request with arbitrary body returning *UpdateStandingOrderResponse
func (c *ClientWithResponses) UpdateStandingOrderWithBodyWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStandingOrderResponse, error) {
	rsp, err := c.UpdateStandingOrderWithBody(ctx, accountUid, categoryUid, paymentOrderUid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStandingOrderResponse(rsp)
}

func (c *ClientWithResponses) UpdateStandingOrderWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, body UpdateStandingOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateStandingOrderResponse, error) {
	rsp, err := c.UpdateStandingOrder(ctx, accountUid, categoryUid, paymentOrderUid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStandingOrderResponse(rsp)
}

// ListNextPaymentDatesWithResponse request returning *ListNextPaymentDatesResponse
func (c *ClientWithResponses) ListNextPaymentDatesWithResponse(ctx context.Context, accountUid openapi_types.UUID, categoryUid openapi_types.UUID, paymentOrderUid openapi_types.UUID, params *ListNextPaymentDatesParams, reqEditors ...RequestEditorFn) (*ListNextPaymentDatesResponse, error) {
	rsp, err := c.ListNextPaymentDates(ctx, accountUid, categoryUid, paymentOrderUid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNextPaymentDatesResponse(rsp)
}

// GetPaymentOrderWithResponse request returning *GetPaymentOrderResponse
func (c *ClientWithResponses) GetPaymentOrderWithResponse(ctx context.Context, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPaymentOrderResponse, error) {
	rsp, err := c.GetPaymentOrder(ctx, paymentOrderUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentOrderResponse(rsp)
}

// GetPaymentOrderPaymentsWithResponse request returning *GetPaymentOrderPaymentsResponse
func (c *ClientWithResponses) GetPaymentOrderPaymentsWithResponse(ctx context.Context, paymentOrderUid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetPaymentOrderPaymentsResponse, error) {
	rsp, err := c.GetPaymentOrderPayments(ctx, paymentOrderUid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentOrderPaymentsResponse(rsp)
}

// GetSettleUpProfileWithResponse request returning *GetSettleUpProfileResponse
func (c *ClientWithResponses) GetSettleUpProfileWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSettleUpProfileResponse, error) {
	rsp, err := c.GetSettleUpProfile(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSettleUpProfileResponse(rsp)
}

// ParseCloseAccountHolderResponse parses an HTTP response from a CloseAccountHolderWithResponse call
func ParseCloseAccountHolderResponse(rsp *http.Response) (*CloseAccountHolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CloseAccountHolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetAccountHolderResponse parses an HTTP response from a GetAccountHolderWithResponse call
func ParseGetAccountHolderResponse(rsp *http.Response) (*GetAccountHolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountHolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountHolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetBusinessResponse parses an HTTP response from a GetBusinessWithResponse call
func ParseGetBusinessResponse(rsp *http.Response) (*GetBusinessResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBusinessResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Business
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetCorrespondenceAddressResponse parses an HTTP response from a GetCorrespondenceAddressWithResponse call
func ParseGetCorrespondenceAddressResponse(rsp *http.Response) (*GetCorrespondenceAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCorrespondenceAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddressV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetRegisteredAddressResponse parses an HTTP response from a GetRegisteredAddressWithResponse call
func ParseGetRegisteredAddressResponse(rsp *http.Response) (*GetRegisteredAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRegisteredAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddressV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetIndividualResponse parses an HTTP response from a GetIndividualWithResponse call
func ParseGetIndividualResponse(rsp *http.Response) (*GetIndividualResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIndividualResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Individual
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateEmailResponse parses an HTTP response from a UpdateEmailWithResponse call
func ParseUpdateEmailResponse(rsp *http.Response) (*UpdateEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetJointAccountResponse parses an HTTP response from a GetJointAccountWithResponse call
func ParseGetJointAccountResponse(rsp *http.Response) (*GetJointAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJointAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JointAccount
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetAccountHolderNameResponse parses an HTTP response from a GetAccountHolderNameWithResponse call
func ParseGetAccountHolderNameResponse(rsp *http.Response) (*GetAccountHolderNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountHolderNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountHolderName
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetSoleTraderResponse parses an HTTP response from a GetSoleTraderWithResponse call
func ParseGetSoleTraderResponse(rsp *http.Response) (*GetSoleTraderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSoleTraderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SoleTrader
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDeleteProfileImageResponse parses an HTTP response from a DeleteProfileImageWithResponse call
func ParseDeleteProfileImageResponse(rsp *http.Response) (*DeleteProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDownloadProfileImageResponse parses an HTTP response from a DownloadProfileImageWithResponse call
func ParseDownloadProfileImageResponse(rsp *http.Response) (*DownloadProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateProfileImageResponse parses an HTTP response from a UpdateProfileImageWithResponse call
func ParseUpdateProfileImageResponse(rsp *http.Response) (*UpdateProfileImageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProfileImageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetSavingsGoalsResponse parses an HTTP response from a GetSavingsGoalsWithResponse call
func ParseGetSavingsGoalsResponse(rsp *http.Response) (*GetSavingsGoalsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSavingsGoalsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SavingsGoalsV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCreateSavingsGoalResponse parses an HTTP response from a CreateSavingsGoalWithResponse call
func ParseCreateSavingsGoalResponse(rsp *http.Response) (*CreateSavingsGoalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSavingsGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateOrUpdateSavingsGoalResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDeleteSavingsGoalResponse parses an HTTP response from a DeleteSavingsGoalWithResponse call
func ParseDeleteSavingsGoalResponse(rsp *http.Response) (*DeleteSavingsGoalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSavingsGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetSavingsGoalResponse parses an HTTP response from a GetSavingsGoalWithResponse call
func ParseGetSavingsGoalResponse(rsp *http.Response) (*GetSavingsGoalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSavingsGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SavingsGoalV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateSavingsGoalResponse parses an HTTP response from a UpdateSavingsGoalWithResponse call
func ParseUpdateSavingsGoalResponse(rsp *http.Response) (*UpdateSavingsGoalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSavingsGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateOrUpdateSavingsGoalResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseAddMoneyResponse parses an HTTP response from a AddMoneyWithResponse call
func ParseAddMoneyResponse(rsp *http.Response) (*AddMoneyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMoneyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SavingsGoalTransferResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetSavingsGoalPhotoResponse parses an HTTP response from a GetSavingsGoalPhotoWithResponse call
func ParseGetSavingsGoalPhotoResponse(rsp *http.Response) (*GetSavingsGoalPhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSavingsGoalPhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SavingsGoalPhotoV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDeleteRecurringTransferResponse parses an HTTP response from a DeleteRecurringTransferWithResponse call
func ParseDeleteRecurringTransferResponse(rsp *http.Response) (*DeleteRecurringTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecurringTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetRecurringTransferResponse parses an HTTP response from a GetRecurringTransferWithResponse call
func ParseGetRecurringTransferResponse(rsp *http.Response) (*GetRecurringTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRecurringTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledSavingsPaymentV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateRecurringTransferResponse parses an HTTP response from a CreateOrUpdateRecurringTransferWithResponse call
func ParseCreateOrUpdateRecurringTransferResponse(rsp *http.Response) (*CreateOrUpdateRecurringTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateRecurringTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SavingsGoalTransferResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseWithdrawMoneyResponse parses an HTTP response from a WithdrawMoneyWithResponse call
func ParseWithdrawMoneyResponse(rsp *http.Response) (*WithdrawMoneyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WithdrawMoneyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SavingsGoalTransferResponseV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetSpacesResponse parses an HTTP response from a GetSpacesWithResponse call
func ParseGetSpacesResponse(rsp *http.Response) (*GetSpacesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Spaces
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetSpendingSpaceResponse parses an HTTP response from a GetSpendingSpaceWithResponse call
func ParseGetSpendingSpaceResponse(rsp *http.Response) (*GetSpendingSpaceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpendingSpaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpendingSpace
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetSpacePhotoResponse parses an HTTP response from a GetSpacePhotoWithResponse call
func ParseGetSpacePhotoResponse(rsp *http.Response) (*GetSpacePhotoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSpacePhotoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpacePhoto
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetAccountsResponse parses an HTTP response from a GetAccountsWithResponse call
func ParseGetAccountsResponse(rsp *http.Response) (*GetAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Accounts
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetAccountBalanceResponse parses an HTTP response from a GetAccountBalanceWithResponse call
func ParseGetAccountBalanceResponse(rsp *http.Response) (*GetAccountBalanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BalanceV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetConfirmationOfFundsResponse parses an HTTP response from a GetConfirmationOfFundsWithResponse call
func ParseGetConfirmationOfFundsResponse(rsp *http.Response) (*GetConfirmationOfFundsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfirmationOfFundsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConfirmationOfFundsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetAccountIdentifiersResponse parses an HTTP response from a GetAccountIdentifiersWithResponse call
func ParseGetAccountIdentifiersResponse(rsp *http.Response) (*GetAccountIdentifiersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountIdentifiersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountIdentifiers
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseListRecurringPaymentsResponse parses an HTTP response from a ListRecurringPaymentsWithResponse call
func ParseListRecurringPaymentsResponse(rsp *http.Response) (*ListRecurringPaymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRecurringPaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RecurringCardPayments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseQuerySpendingInsightsByCounterpartyResponse parses an HTTP response from a QuerySpendingInsightsByCounterpartyWithResponse call
func ParseQuerySpendingInsightsByCounterpartyResponse(rsp *http.Response) (*QuerySpendingInsightsByCounterpartyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySpendingInsightsByCounterpartyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpendingCounterPartySummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseQuerySpendingInsightsBySpendingCategoryResponse parses an HTTP response from a QuerySpendingInsightsBySpendingCategoryWithResponse call
func ParseQuerySpendingInsightsBySpendingCategoryResponse(rsp *http.Response) (*QuerySpendingInsightsBySpendingCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QuerySpendingInsightsBySpendingCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SpendingCategorySummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseAvailablePeriodsResponse parses an HTTP response from a AvailablePeriodsWithResponse call
func ParseAvailablePeriodsResponse(rsp *http.Response) (*AvailablePeriodsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AvailablePeriodsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountStatementPeriods
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDownloadPDFStatementResponse parses an HTTP response from a DownloadPDFStatementWithResponse call
func ParseDownloadPDFStatementResponse(rsp *http.Response) (*DownloadPDFStatementResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadPDFStatementResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDownloadPDFStatementForDateRangeResponse parses an HTTP response from a DownloadPDFStatementForDateRangeWithResponse call
func ParseDownloadPDFStatementForDateRangeResponse(rsp *http.Response) (*DownloadPDFStatementForDateRangeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadPDFStatementForDateRangeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetAddressesResponse parses an HTTP response from a GetAddressesWithResponse call
func ParseGetAddressesResponse(rsp *http.Response) (*GetAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AddressesV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateCurrentAddressResponse parses an HTTP response from a UpdateCurrentAddressWithResponse call
func ParseUpdateCurrentAddressResponse(rsp *http.Response) (*UpdateCurrentAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCurrentAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseListCardsResponse parses an HTTP response from a ListCardsWithResponse call
func ParseListCardsResponse(rsp *http.Response) (*ListCardsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCardsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Cards
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseEnableAtmResponse parses an HTTP response from a EnableAtmWithResponse call
func ParseEnableAtmResponse(rsp *http.Response) (*EnableAtmResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableAtmResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseEnableCurrencySwitchResponse parses an HTTP response from a EnableCurrencySwitchWithResponse call
func ParseEnableCurrencySwitchResponse(rsp *http.Response) (*EnableCurrencySwitchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableCurrencySwitchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseEnableCardResponse parses an HTTP response from a EnableCardWithResponse call
func ParseEnableCardResponse(rsp *http.Response) (*EnableCardResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableCardResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseEnableGamblingPaymentsResponse parses an HTTP response from a EnableGamblingPaymentsWithResponse call
func ParseEnableGamblingPaymentsResponse(rsp *http.Response) (*EnableGamblingPaymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableGamblingPaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseEnableMagStripePaymentResponse parses an HTTP response from a EnableMagStripePaymentWithResponse call
func ParseEnableMagStripePaymentResponse(rsp *http.Response) (*EnableMagStripePaymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableMagStripePaymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseEnableMobileWalletResponse parses an HTTP response from a EnableMobileWalletWithResponse call
func ParseEnableMobileWalletResponse(rsp *http.Response) (*EnableMobileWalletResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableMobileWalletResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseEnableOnlinePaymentsResponse parses an HTTP response from a EnableOnlinePaymentsWithResponse call
func ParseEnableOnlinePaymentsResponse(rsp *http.Response) (*EnableOnlinePaymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnableOnlinePaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseEnablePosResponse parses an HTTP response from a EnablePosWithResponse call
func ParseEnablePosResponse(rsp *http.Response) (*EnablePosResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EnablePosResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseListMandatesResponse parses an HTTP response from a ListMandatesWithResponse call
func ParseListMandatesResponse(rsp *http.Response) (*ListMandatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMandatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DirectDebitMandatesV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseListMandatesForAccountResponse parses an HTTP response from a ListMandatesForAccountWithResponse call
func ParseListMandatesForAccountResponse(rsp *http.Response) (*ListMandatesForAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMandatesForAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DirectDebitMandatesV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCancelMandateResponse parses an HTTP response from a CancelMandateWithResponse call
func ParseCancelMandateResponse(rsp *http.Response) (*CancelMandateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelMandateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetMandateResponse parses an HTTP response from a GetMandateWithResponse call
func ParseGetMandateResponse(rsp *http.Response) (*GetMandateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMandateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DirectDebitMandateV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseListPaymentsForMandateResponse parses an HTTP response from a ListPaymentsForMandateWithResponse call
func ParseListPaymentsForMandateResponse(rsp *http.Response) (*ListPaymentsForMandateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPaymentsForMandateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DirectDebitPaymentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseQueryFeedItemsResponse parses an HTTP response from a QueryFeedItemsWithResponse call
func ParseQueryFeedItemsResponse(rsp *http.Response) (*QueryFeedItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryFeedItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeedItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseQueryFeedItemsByCategoryWithTransactionTimesBetweenResponse parses an HTTP response from a QueryFeedItemsByCategoryWithTransactionTimesBetweenWithResponse call
func ParseQueryFeedItemsByCategoryWithTransactionTimesBetweenResponse(rsp *http.Response) (*QueryFeedItemsByCategoryWithTransactionTimesBetweenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryFeedItemsByCategoryWithTransactionTimesBetweenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeedItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetFeedItemResponse parses an HTTP response from a GetFeedItemWithResponse call
func ParseGetFeedItemResponse(rsp *http.Response) (*GetFeedItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeedItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetFeedItemAttachmentsResponse parses an HTTP response from a GetFeedItemAttachmentsWithResponse call
func ParseGetFeedItemAttachmentsResponse(rsp *http.Response) (*GetFeedItemAttachmentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeedItemAttachmentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeedItemAttachments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseAttachToFeedItemResponse parses an HTTP response from a AttachToFeedItemWithResponse call
func ParseAttachToFeedItemResponse(rsp *http.Response) (*AttachToFeedItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AttachToFeedItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest openapi_types.UUID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDownloadFeedItemAttachmentResponse parses an HTTP response from a DownloadFeedItemAttachmentWithResponse call
func ParseDownloadFeedItemAttachmentResponse(rsp *http.Response) (*DownloadFeedItemAttachmentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DownloadFeedItemAttachmentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetMastercardFeedItemResponse parses an HTTP response from a GetMastercardFeedItemWithResponse call
func ParseGetMastercardFeedItemResponse(rsp *http.Response) (*GetMastercardFeedItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMastercardFeedItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MastercardFeedItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetReceiptResponse parses an HTTP response from a GetReceiptWithResponse call
func ParseGetReceiptResponse(rsp *http.Response) (*GetReceiptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReceiptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Receipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCreateOrUpdateReceiptResponse parses an HTTP response from a CreateOrUpdateReceiptWithResponse call
func ParseCreateOrUpdateReceiptResponse(rsp *http.Response) (*CreateOrUpdateReceiptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrUpdateReceiptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReceiptCreationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetReceiptsResponse parses an HTTP response from a GetReceiptsWithResponse call
func ParseGetReceiptsResponse(rsp *http.Response) (*GetReceiptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReceiptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Receipt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseChangeTransactionCategoryResponse parses an HTTP response from a ChangeTransactionCategoryWithResponse call
func ParseChangeTransactionCategoryResponse(rsp *http.Response) (*ChangeTransactionCategoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ChangeTransactionCategoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateUserNoteResponse parses an HTTP response from a UpdateUserNoteWithResponse call
func ParseUpdateUserNoteResponse(rsp *http.Response) (*UpdateUserNoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserNoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseStopRoundUpGoalResponse parses an HTTP response from a StopRoundUpGoalWithResponse call
func ParseStopRoundUpGoalResponse(rsp *http.Response) (*StopRoundUpGoalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &StopRoundUpGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseFetchRoundUpGoalResponse parses an HTTP response from a FetchRoundUpGoalWithResponse call
func ParseFetchRoundUpGoalResponse(rsp *http.Response) (*FetchRoundUpGoalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchRoundUpGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RoundUpGoalResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseActivateRoundUpGoalResponse parses an HTTP response from a ActivateRoundUpGoalWithResponse call
func ParseActivateRoundUpGoalResponse(rsp *http.Response) (*ActivateRoundUpGoalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateRoundUpGoalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseQueryFeedItemsWithTransactionTimesBetweenResponse parses an HTTP response from a QueryFeedItemsWithTransactionTimesBetweenWithResponse call
func ParseQueryFeedItemsWithTransactionTimesBetweenResponse(rsp *http.Response) (*QueryFeedItemsWithTransactionTimesBetweenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &QueryFeedItemsWithTransactionTimesBetweenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FeedItems
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetAuthorisingIndividualResponse parses an HTTP response from a GetAuthorisingIndividualWithResponse call
func ParseGetAuthorisingIndividualResponse(rsp *http.Response) (*GetAuthorisingIndividualResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAuthorisingIndividualResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Individual
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseLogoutIndividualResponse parses an HTTP response from a LogoutIndividualWithResponse call
func ParseLogoutIndividualResponse(rsp *http.Response) (*LogoutIndividualResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutIndividualResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetTokenIdentityResponse parses an HTTP response from a GetTokenIdentityWithResponse call
func ParseGetTokenIdentityResponse(rsp *http.Response) (*GetTokenIdentityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest IdentityV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetPayeesResponse parses an HTTP response from a GetPayeesWithResponse call
func ParseGetPayeesResponse(rsp *http.Response) (*GetPayeesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayeesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Payees
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCreatePayeeResponse parses an HTTP response from a CreatePayeeWithResponse call
func ParseCreatePayeeResponse(rsp *http.Response) (*CreatePayeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePayeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PayeeCreationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDeletePayeeResponse parses an HTTP response from a DeletePayeeWithResponse call
func ParseDeletePayeeResponse(rsp *http.Response) (*DeletePayeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePayeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetPayeeResponse parses an HTTP response from a GetPayeeWithResponse call
func ParseGetPayeeResponse(rsp *http.Response) (*GetPayeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPayeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Payee
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdatePayeeResponse parses an HTTP response from a UpdatePayeeWithResponse call
func ParseUpdatePayeeResponse(rsp *http.Response) (*UpdatePayeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePayeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConsentInformation
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCreatePayeeAccountResponse parses an HTTP response from a CreatePayeeAccountWithResponse call
func ParseCreatePayeeAccountResponse(rsp *http.Response) (*CreatePayeeAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePayeeAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PayeeAccountCreationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseDeletePayeeAccountResponse parses an HTTP response from a DeletePayeeAccountWithResponse call
func ParseDeletePayeeAccountResponse(rsp *http.Response) (*DeletePayeeAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePayeeAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseListPaymentsForPayeeAccountResponse parses an HTTP response from a ListPaymentsForPayeeAccountWithResponse call
func ParseListPaymentsForPayeeAccountResponse(rsp *http.Response) (*ListPaymentsForPayeeAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPaymentsForPayeeAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Payments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseListPaymentOrdersForAccountResponse parses an HTTP response from a ListPaymentOrdersForAccountWithResponse call
func ParseListPaymentOrdersForAccountResponse(rsp *http.Response) (*ListPaymentOrdersForAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPaymentOrdersForAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ScheduledPaymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseServePayeeImageFileResponse parses an HTTP response from a ServePayeeImageFileWithResponse call
func ParseServePayeeImageFileResponse(rsp *http.Response) (*ServePayeeImageFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ServePayeeImageFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseMakeLocalPaymentResponse parses an HTTP response from a MakeLocalPaymentWithResponse call
func ParseMakeLocalPaymentResponse(rsp *http.Response) (*MakeLocalPaymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &MakeLocalPaymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstructLocalPaymentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseListStandingOrdersResponse parses an HTTP response from a ListStandingOrdersWithResponse call
func ParseListStandingOrdersResponse(rsp *http.Response) (*ListStandingOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListStandingOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StandingOrdersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCreateStandingOrderResponse parses an HTTP response from a CreateStandingOrderWithResponse call
func ParseCreateStandingOrderResponse(rsp *http.Response) (*CreateStandingOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStandingOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CreateStandingOrderResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseCancelStandingOrderResponse parses an HTTP response from a CancelStandingOrderWithResponse call
func ParseCancelStandingOrderResponse(rsp *http.Response) (*CancelStandingOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelStandingOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetStandingOrderResponse parses an HTTP response from a GetStandingOrderWithResponse call
func ParseGetStandingOrderResponse(rsp *http.Response) (*GetStandingOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStandingOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StandingOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseUpdateStandingOrderResponse parses an HTTP response from a UpdateStandingOrderWithResponse call
func ParseUpdateStandingOrderResponse(rsp *http.Response) (*UpdateStandingOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStandingOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateStandingOrderResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseListNextPaymentDatesResponse parses an HTTP response from a ListNextPaymentDatesWithResponse call
func ParseListNextPaymentDatesResponse(rsp *http.Response) (*ListNextPaymentDatesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNextPaymentDatesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NextPaymentDatesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetPaymentOrderResponse parses an HTTP response from a GetPaymentOrderWithResponse call
func ParseGetPaymentOrderResponse(rsp *http.Response) (*GetPaymentOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentOrderV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetPaymentOrderPaymentsResponse parses an HTTP response from a GetPaymentOrderPaymentsWithResponse call
func ParseGetPaymentOrderPaymentsResponse(rsp *http.Response) (*GetPaymentOrderPaymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentOrderPaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PaymentOrderPaymentsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// ParseGetSettleUpProfileResponse parses an HTTP response from a GetSettleUpProfileWithResponse call
func ParseGetSettleUpProfileResponse(rsp *http.Response) (*GetSettleUpProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSettleUpProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SettleUpProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode/100 == 4:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON4XX = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PlCL/EYDAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
